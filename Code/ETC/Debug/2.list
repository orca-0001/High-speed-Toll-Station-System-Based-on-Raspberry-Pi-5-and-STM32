
2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008570  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020c4  08008680  08008680  00009680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a744  0800a744  0000c1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a744  0800a744  0000b744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a74c  0800a74c  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a74c  0800a74c  0000b74c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a750  0800a750  0000b750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a754  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000700  200001d4  0800a928  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008d4  0800a928  0000c8d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001129e  00000000  00000000  0000c1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ca2  00000000  00000000  0001d49b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  00020140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d92  00000000  00000000  000212a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e11  00000000  00000000  00022032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001592d  00000000  00000000  0003be43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fafe  00000000  00000000  00051770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e126e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a38  00000000  00000000  000e12b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000e6cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008668 	.word	0x08008668

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08008668 	.word	0x08008668

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2iz>:
 8000f44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f4c:	d30f      	bcc.n	8000f6e <__aeabi_f2iz+0x2a>
 8000f4e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d90d      	bls.n	8000f74 <__aeabi_f2iz+0x30>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f60:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000f64:	fa23 f002 	lsr.w	r0, r3, r2
 8000f68:	bf18      	it	ne
 8000f6a:	4240      	negne	r0, r0
 8000f6c:	4770      	bx	lr
 8000f6e:	f04f 0000 	mov.w	r0, #0
 8000f72:	4770      	bx	lr
 8000f74:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f78:	d101      	bne.n	8000f7e <__aeabi_f2iz+0x3a>
 8000f7a:	0242      	lsls	r2, r0, #9
 8000f7c:	d105      	bne.n	8000f8a <__aeabi_f2iz+0x46>
 8000f7e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f82:	bf08      	it	eq
 8000f84:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000f88:	4770      	bx	lr
 8000f8a:	f04f 0000 	mov.w	r0, #0
 8000f8e:	4770      	bx	lr

08000f90 <AHT20_Send>:
 * @param data 发送的数据
 * @param len 发送的数据长度
 * @return void
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void AHT20_Send(uint8_t *data, uint8_t len) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af02      	add	r7, sp, #8
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, AHT20_ADDRESS, data, len, HAL_MAX_DELAY);
 8000f9c:	78fb      	ldrb	r3, [r7, #3]
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa4:	9200      	str	r2, [sp, #0]
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	2170      	movs	r1, #112	@ 0x70
 8000faa:	4803      	ldr	r0, [pc, #12]	@ (8000fb8 <AHT20_Send+0x28>)
 8000fac:	f002 f878 	bl	80030a0 <HAL_I2C_Master_Transmit>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	200001f8 	.word	0x200001f8

08000fbc <AHT20_Receive>:
 * @param data 接收数据的缓冲区
 * @param len 接收数据的长度
 * @return void
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void AHT20_Receive(uint8_t *data, uint8_t len) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af02      	add	r7, sp, #8
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Receive(&hi2c1, AHT20_ADDRESS, data, len, HAL_MAX_DELAY);
 8000fc8:	78fb      	ldrb	r3, [r7, #3]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd0:	9200      	str	r2, [sp, #0]
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	2170      	movs	r1, #112	@ 0x70
 8000fd6:	4803      	ldr	r0, [pc, #12]	@ (8000fe4 <AHT20_Receive+0x28>)
 8000fd8:	f002 f960 	bl	800329c <HAL_I2C_Master_Receive>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200001f8 	.word	0x200001f8

08000fe8 <AHT20_Init>:

/**
 * @brief AHT20初始化函数
 */
void AHT20_Init() {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
  uint8_t readBuffer;
  HAL_Delay(40);
 8000fee:	2028      	movs	r0, #40	@ 0x28
 8000ff0:	f001 fc2c 	bl	800284c <HAL_Delay>
  AHT20_Receive(&readBuffer, 1);
 8000ff4:	1dfb      	adds	r3, r7, #7
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ffdf 	bl	8000fbc <AHT20_Receive>
  if ((readBuffer & 0x08) == 0x00) {
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	f003 0308 	and.w	r3, r3, #8
 8001004:	2b00      	cmp	r3, #0
 8001006:	d10c      	bne.n	8001022 <AHT20_Init+0x3a>
    uint8_t sendBuffer[3] = {0xBE, 0x08, 0x00};
 8001008:	4a08      	ldr	r2, [pc, #32]	@ (800102c <AHT20_Init+0x44>)
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	6812      	ldr	r2, [r2, #0]
 800100e:	4611      	mov	r1, r2
 8001010:	8019      	strh	r1, [r3, #0]
 8001012:	3302      	adds	r3, #2
 8001014:	0c12      	lsrs	r2, r2, #16
 8001016:	701a      	strb	r2, [r3, #0]
    AHT20_Send(sendBuffer, 3);
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	2103      	movs	r1, #3
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ffb7 	bl	8000f90 <AHT20_Send>
  }
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	08008680 	.word	0x08008680

08001030 <AHT20_Measure>:

/**
 * @brief AHT20测量函数
 * @note 测量完成后可以通过AHT20_Temperature()与AHT20_Humidity()获取温度与湿度数据
 */
void AHT20_Measure() {
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
  uint8_t sendBuffer[3] = {0xAC, 0x33, 0x00};
 8001036:	4a2d      	ldr	r2, [pc, #180]	@ (80010ec <AHT20_Measure+0xbc>)
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	6812      	ldr	r2, [r2, #0]
 800103e:	4611      	mov	r1, r2
 8001040:	8019      	strh	r1, [r3, #0]
 8001042:	3302      	adds	r3, #2
 8001044:	0c12      	lsrs	r2, r2, #16
 8001046:	701a      	strb	r2, [r3, #0]
  uint8_t readBuffer[6];
  AHT20_Send(sendBuffer, 3);
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	2103      	movs	r1, #3
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff ff9e 	bl	8000f90 <AHT20_Send>
  HAL_Delay(75);
 8001054:	204b      	movs	r0, #75	@ 0x4b
 8001056:	f001 fbf9 	bl	800284c <HAL_Delay>
  AHT20_Receive(readBuffer, 6);
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2106      	movs	r1, #6
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ffac 	bl	8000fbc <AHT20_Receive>

  if ((readBuffer[0] & 0x80) == 0x00) {
 8001064:	793b      	ldrb	r3, [r7, #4]
 8001066:	b25b      	sxtb	r3, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	db3a      	blt.n	80010e2 <AHT20_Measure+0xb2>
    float humi, temp;
    #ifdef __CMSIS_GCC_H //只快一点点，但是看起来可能更直观一些：__REV()是硬实现的大小端序转换，在cmsis_gcc.h中定义
    humi = (__REV(*(uint32_t*)readBuffer) & 0x00fffff0) >> 4;
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	613b      	str	r3, [r7, #16]
  \return               Reversed value
 */
__STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
  return __builtin_bswap32(value);
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	ba1b      	rev	r3, r3
 8001076:	091b      	lsrs	r3, r3, #4
 8001078:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fdb9 	bl	8000bf4 <__aeabi_ui2f>
 8001082:	4603      	mov	r3, r0
 8001084:	61fb      	str	r3, [r7, #28]
    temp = __REV(*(uint32_t*)(readBuffer+2)) & 0x000fffff;
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	3302      	adds	r3, #2
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	617b      	str	r3, [r7, #20]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	ba1b      	rev	r3, r3
 8001092:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fdac 	bl	8000bf4 <__aeabi_ui2f>
 800109c:	4603      	mov	r3, r0
 800109e:	61bb      	str	r3, [r7, #24]
    #else
    humi = ((uint32_t)readBuffer[3] >> 4) + ((uint32_t)readBuffer[2] << 4) + ((uint32_t)readBuffer[1] << 12);
    temp = (((uint32_t)readBuffer[3] & 0x0F) << 16) + (((uint32_t)readBuffer[4]) << 8) + (uint32_t)readBuffer[5];
    #endif
    Humidity = humi * 100 / (1 << 20);
 80010a0:	4913      	ldr	r1, [pc, #76]	@ (80010f0 <AHT20_Measure+0xc0>)
 80010a2:	69f8      	ldr	r0, [r7, #28]
 80010a4:	f7ff fdfe 	bl	8000ca4 <__aeabi_fmul>
 80010a8:	4603      	mov	r3, r0
 80010aa:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff feac 	bl	8000e0c <__aeabi_fdiv>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461a      	mov	r2, r3
 80010b8:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <AHT20_Measure+0xc4>)
 80010ba:	601a      	str	r2, [r3, #0]
    Temperature = temp * 200 / (1 << 20) - 50;
 80010bc:	490e      	ldr	r1, [pc, #56]	@ (80010f8 <AHT20_Measure+0xc8>)
 80010be:	69b8      	ldr	r0, [r7, #24]
 80010c0:	f7ff fdf0 	bl	8000ca4 <__aeabi_fmul>
 80010c4:	4603      	mov	r3, r0
 80010c6:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fe9e 	bl	8000e0c <__aeabi_fdiv>
 80010d0:	4603      	mov	r3, r0
 80010d2:	490a      	ldr	r1, [pc, #40]	@ (80010fc <AHT20_Measure+0xcc>)
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fcdb 	bl	8000a90 <__aeabi_fsub>
 80010da:	4603      	mov	r3, r0
 80010dc:	461a      	mov	r2, r3
 80010de:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <AHT20_Measure+0xd0>)
 80010e0:	601a      	str	r2, [r3, #0]
  }
}
 80010e2:	bf00      	nop
 80010e4:	3720      	adds	r7, #32
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	08008684 	.word	0x08008684
 80010f0:	42c80000 	.word	0x42c80000
 80010f4:	200001f4 	.word	0x200001f4
 80010f8:	43480000 	.word	0x43480000
 80010fc:	42480000 	.word	0x42480000
 8001100:	200001f0 	.word	0x200001f0

08001104 <AHT20_Temperature>:

/**
 * @brief 获取上次测量时的温度数据
 */
float AHT20_Temperature() {
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return Temperature;
 8001108:	4b02      	ldr	r3, [pc, #8]	@ (8001114 <AHT20_Temperature+0x10>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	200001f0 	.word	0x200001f0

08001118 <AHT20_Humidity>:

/**
 * @brief 获取上次测量时的湿度数据
 */
float AHT20_Humidity() {
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return Humidity;
 800111c:	4b02      	ldr	r3, [pc, #8]	@ (8001128 <AHT20_Humidity+0x10>)
 800111e:	681b      	ldr	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	200001f4 	.word	0x200001f4

0800112c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001140:	4b3c      	ldr	r3, [pc, #240]	@ (8001234 <MX_GPIO_Init+0x108>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a3b      	ldr	r2, [pc, #236]	@ (8001234 <MX_GPIO_Init+0x108>)
 8001146:	f043 0304 	orr.w	r3, r3, #4
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b39      	ldr	r3, [pc, #228]	@ (8001234 <MX_GPIO_Init+0x108>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001158:	4b36      	ldr	r3, [pc, #216]	@ (8001234 <MX_GPIO_Init+0x108>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4a35      	ldr	r2, [pc, #212]	@ (8001234 <MX_GPIO_Init+0x108>)
 800115e:	f043 0308 	orr.w	r3, r3, #8
 8001162:	6193      	str	r3, [r2, #24]
 8001164:	4b33      	ldr	r3, [pc, #204]	@ (8001234 <MX_GPIO_Init+0x108>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f003 0308 	and.w	r3, r3, #8
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001170:	2200      	movs	r2, #0
 8001172:	2130      	movs	r1, #48	@ 0x30
 8001174:	4830      	ldr	r0, [pc, #192]	@ (8001238 <MX_GPIO_Init+0x10c>)
 8001176:	f001 fe36 	bl	8002de6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */


  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800117a:	2302      	movs	r3, #2
 800117c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 0308 	add.w	r3, r7, #8
 800118a:	4619      	mov	r1, r3
 800118c:	482a      	ldr	r0, [pc, #168]	@ (8001238 <MX_GPIO_Init+0x10c>)
 800118e:	f001 fc8f 	bl	8002ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_12;
 8001192:	f241 03b0 	movw	r3, #4272	@ 0x10b0
 8001196:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001198:	2301      	movs	r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2302      	movs	r3, #2
 80011a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	f107 0308 	add.w	r3, r7, #8
 80011a8:	4619      	mov	r1, r3
 80011aa:	4823      	ldr	r0, [pc, #140]	@ (8001238 <MX_GPIO_Init+0x10c>)
 80011ac:	f001 fc80 	bl	8002ab0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80011b0:	2201      	movs	r2, #1
 80011b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011b6:	4820      	ldr	r0, [pc, #128]	@ (8001238 <MX_GPIO_Init+0x10c>)
 80011b8:	f001 fe15 	bl	8002de6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011c2:	481d      	ldr	r0, [pc, #116]	@ (8001238 <MX_GPIO_Init+0x10c>)
 80011c4:	f001 fe0f 	bl	8002de6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80011c8:	2201      	movs	r2, #1
 80011ca:	2180      	movs	r1, #128	@ 0x80
 80011cc:	481a      	ldr	r0, [pc, #104]	@ (8001238 <MX_GPIO_Init+0x10c>)
 80011ce:	f001 fe0a 	bl	8002de6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_12;
 80011d2:	f241 030b 	movw	r3, #4107	@ 0x100b
 80011d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011dc:	2301      	movs	r3, #1
 80011de:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e0:	f107 0308 	add.w	r3, r7, #8
 80011e4:	4619      	mov	r1, r3
 80011e6:	4815      	ldr	r0, [pc, #84]	@ (800123c <MX_GPIO_Init+0x110>)
 80011e8:	f001 fc62 	bl	8002ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80011ec:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80011f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f2:	2301      	movs	r3, #1
 80011f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f6:	2301      	movs	r3, #1
 80011f8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fa:	f107 0308 	add.w	r3, r7, #8
 80011fe:	4619      	mov	r1, r3
 8001200:	480e      	ldr	r0, [pc, #56]	@ (800123c <MX_GPIO_Init+0x110>)
 8001202:	f001 fc55 	bl	8002ab0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);//先来高电平防止上电就叫
 8001206:	2201      	movs	r2, #1
 8001208:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800120c:	480b      	ldr	r0, [pc, #44]	@ (800123c <MX_GPIO_Init+0x110>)
 800120e:	f001 fdea 	bl	8002de6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);//先来高电平防止上电就叫
 8001212:	2201      	movs	r2, #1
 8001214:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001218:	4808      	ldr	r0, [pc, #32]	@ (800123c <MX_GPIO_Init+0x110>)
 800121a:	f001 fde4 	bl	8002de6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);//先来高电平防止上电就叫
 800121e:	2201      	movs	r2, #1
 8001220:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001224:	4805      	ldr	r0, [pc, #20]	@ (800123c <MX_GPIO_Init+0x110>)
 8001226:	f001 fdde 	bl	8002de6 <HAL_GPIO_WritePin>

}
 800122a:	bf00      	nop
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40021000 	.word	0x40021000
 8001238:	40010800 	.word	0x40010800
 800123c:	40010c00 	.word	0x40010c00

08001240 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001244:	4b12      	ldr	r3, [pc, #72]	@ (8001290 <MX_I2C1_Init+0x50>)
 8001246:	4a13      	ldr	r2, [pc, #76]	@ (8001294 <MX_I2C1_Init+0x54>)
 8001248:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800124a:	4b11      	ldr	r3, [pc, #68]	@ (8001290 <MX_I2C1_Init+0x50>)
 800124c:	4a12      	ldr	r2, [pc, #72]	@ (8001298 <MX_I2C1_Init+0x58>)
 800124e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001250:	4b0f      	ldr	r3, [pc, #60]	@ (8001290 <MX_I2C1_Init+0x50>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001256:	4b0e      	ldr	r3, [pc, #56]	@ (8001290 <MX_I2C1_Init+0x50>)
 8001258:	2200      	movs	r2, #0
 800125a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800125c:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <MX_I2C1_Init+0x50>)
 800125e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001262:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001264:	4b0a      	ldr	r3, [pc, #40]	@ (8001290 <MX_I2C1_Init+0x50>)
 8001266:	2200      	movs	r2, #0
 8001268:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800126a:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <MX_I2C1_Init+0x50>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001270:	4b07      	ldr	r3, [pc, #28]	@ (8001290 <MX_I2C1_Init+0x50>)
 8001272:	2200      	movs	r2, #0
 8001274:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001276:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <MX_I2C1_Init+0x50>)
 8001278:	2200      	movs	r2, #0
 800127a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800127c:	4804      	ldr	r0, [pc, #16]	@ (8001290 <MX_I2C1_Init+0x50>)
 800127e:	f001 fdcb 	bl	8002e18 <HAL_I2C_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001288:	f000 fc9c 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200001f8 	.word	0x200001f8
 8001294:	40005400 	.word	0x40005400
 8001298:	000186a0 	.word	0x000186a0

0800129c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0310 	add.w	r3, r7, #16
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a15      	ldr	r2, [pc, #84]	@ (800130c <HAL_I2C_MspInit+0x70>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d123      	bne.n	8001304 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012bc:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <HAL_I2C_MspInit+0x74>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	4a13      	ldr	r2, [pc, #76]	@ (8001310 <HAL_I2C_MspInit+0x74>)
 80012c2:	f043 0308 	orr.w	r3, r3, #8
 80012c6:	6193      	str	r3, [r2, #24]
 80012c8:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <HAL_I2C_MspInit+0x74>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	f003 0308 	and.w	r3, r3, #8
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012d4:	23c0      	movs	r3, #192	@ 0xc0
 80012d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d8:	2312      	movs	r3, #18
 80012da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	4619      	mov	r1, r3
 80012e6:	480b      	ldr	r0, [pc, #44]	@ (8001314 <HAL_I2C_MspInit+0x78>)
 80012e8:	f001 fbe2 	bl	8002ab0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012ec:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <HAL_I2C_MspInit+0x74>)
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	4a07      	ldr	r2, [pc, #28]	@ (8001310 <HAL_I2C_MspInit+0x74>)
 80012f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012f6:	61d3      	str	r3, [r2, #28]
 80012f8:	4b05      	ldr	r3, [pc, #20]	@ (8001310 <HAL_I2C_MspInit+0x74>)
 80012fa:	69db      	ldr	r3, [r3, #28]
 80012fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001304:	bf00      	nop
 8001306:	3720      	adds	r7, #32
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40005400 	.word	0x40005400
 8001310:	40021000 	.word	0x40021000
 8001314:	40010c00 	.word	0x40010c00

08001318 <UART_ReadByte>:
/* Private user code ---------------------------------------------------------*/


// 从环形缓冲区读取一个字节
uint8_t UART_ReadByte(uint8_t *data)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
    if(uartRxBuffer.head == uartRxBuffer.tail)
 8001320:	4b15      	ldr	r3, [pc, #84]	@ (8001378 <UART_ReadByte+0x60>)
 8001322:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001326:	b29a      	uxth	r2, r3
 8001328:	4b13      	ldr	r3, [pc, #76]	@ (8001378 <UART_ReadByte+0x60>)
 800132a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 800132e:	b29b      	uxth	r3, r3
 8001330:	429a      	cmp	r2, r3
 8001332:	d101      	bne.n	8001338 <UART_ReadByte+0x20>
        return 0; // 缓冲区空
 8001334:	2300      	movs	r3, #0
 8001336:	e019      	b.n	800136c <UART_ReadByte+0x54>

    *data = uartRxBuffer.buffer[uartRxBuffer.tail];
 8001338:	4b0f      	ldr	r3, [pc, #60]	@ (8001378 <UART_ReadByte+0x60>)
 800133a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 800133e:	b29b      	uxth	r3, r3
 8001340:	461a      	mov	r2, r3
 8001342:	4b0d      	ldr	r3, [pc, #52]	@ (8001378 <UART_ReadByte+0x60>)
 8001344:	5c9a      	ldrb	r2, [r3, r2]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	701a      	strb	r2, [r3, #0]
    uartRxBuffer.tail = (uartRxBuffer.tail + 1) % UART_RX_BUFFER_SIZE;
 800134a:	4b0b      	ldr	r3, [pc, #44]	@ (8001378 <UART_ReadByte+0x60>)
 800134c:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001350:	b29b      	uxth	r3, r3
 8001352:	3301      	adds	r3, #1
 8001354:	425a      	negs	r2, r3
 8001356:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800135a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800135e:	bf58      	it	pl
 8001360:	4253      	negpl	r3, r2
 8001362:	b29a      	uxth	r2, r3
 8001364:	4b04      	ldr	r3, [pc, #16]	@ (8001378 <UART_ReadByte+0x60>)
 8001366:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
    return 1;
 800136a:	2301      	movs	r3, #1
}
 800136c:	4618      	mov	r0, r3
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	2000024c 	.word	0x2000024c

0800137c <Key_GetNum0>:



uint8_t Key_GetNum0(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
    uint8_t KeyNum0 = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 8001386:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800138a:	480e      	ldr	r0, [pc, #56]	@ (80013c4 <Key_GetNum0+0x48>)
 800138c:	f001 fd14 	bl	8002db8 <HAL_GPIO_ReadPin>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d110      	bne.n	80013b8 <Key_GetNum0+0x3c>
    {
        HAL_Delay(20);
 8001396:	2014      	movs	r0, #20
 8001398:	f001 fa58 	bl	800284c <HAL_Delay>
        while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET);
 800139c:	bf00      	nop
 800139e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013a2:	4808      	ldr	r0, [pc, #32]	@ (80013c4 <Key_GetNum0+0x48>)
 80013a4:	f001 fd08 	bl	8002db8 <HAL_GPIO_ReadPin>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0f7      	beq.n	800139e <Key_GetNum0+0x22>
        HAL_Delay(20);
 80013ae:	2014      	movs	r0, #20
 80013b0:	f001 fa4c 	bl	800284c <HAL_Delay>
        KeyNum0 = 1;
 80013b4:	2301      	movs	r3, #1
 80013b6:	71fb      	strb	r3, [r7, #7]
    }
    return KeyNum0;
 80013b8:	79fb      	ldrb	r3, [r7, #7]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40010c00 	.word	0x40010c00

080013c8 <Key_GetNum1>:

uint8_t Key_GetNum1(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
    uint8_t KeyNum1 = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET)
 80013d2:	2102      	movs	r1, #2
 80013d4:	480d      	ldr	r0, [pc, #52]	@ (800140c <Key_GetNum1+0x44>)
 80013d6:	f001 fcef 	bl	8002db8 <HAL_GPIO_ReadPin>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d10f      	bne.n	8001400 <Key_GetNum1+0x38>
    {
        HAL_Delay(20);
 80013e0:	2014      	movs	r0, #20
 80013e2:	f001 fa33 	bl	800284c <HAL_Delay>
        while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET);
 80013e6:	bf00      	nop
 80013e8:	2102      	movs	r1, #2
 80013ea:	4808      	ldr	r0, [pc, #32]	@ (800140c <Key_GetNum1+0x44>)
 80013ec:	f001 fce4 	bl	8002db8 <HAL_GPIO_ReadPin>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f8      	beq.n	80013e8 <Key_GetNum1+0x20>
        HAL_Delay(20);
 80013f6:	2014      	movs	r0, #20
 80013f8:	f001 fa28 	bl	800284c <HAL_Delay>
        KeyNum1 = 1;
 80013fc:	2301      	movs	r3, #1
 80013fe:	71fb      	strb	r3, [r7, #7]
    }
    return KeyNum1;
 8001400:	79fb      	ldrb	r3, [r7, #7]
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40010c00 	.word	0x40010c00

08001410 <Key_GetNum_2>:

uint8_t Key_GetNum_2(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
    uint8_t KeyNum2 = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET)
 800141a:	2108      	movs	r1, #8
 800141c:	480d      	ldr	r0, [pc, #52]	@ (8001454 <Key_GetNum_2+0x44>)
 800141e:	f001 fccb 	bl	8002db8 <HAL_GPIO_ReadPin>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d10f      	bne.n	8001448 <Key_GetNum_2+0x38>
    {
        HAL_Delay(20);
 8001428:	2014      	movs	r0, #20
 800142a:	f001 fa0f 	bl	800284c <HAL_Delay>
        while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET);
 800142e:	bf00      	nop
 8001430:	2108      	movs	r1, #8
 8001432:	4808      	ldr	r0, [pc, #32]	@ (8001454 <Key_GetNum_2+0x44>)
 8001434:	f001 fcc0 	bl	8002db8 <HAL_GPIO_ReadPin>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0f8      	beq.n	8001430 <Key_GetNum_2+0x20>
        HAL_Delay(20);
 800143e:	2014      	movs	r0, #20
 8001440:	f001 fa04 	bl	800284c <HAL_Delay>
        KeyNum2 = 1;
 8001444:	2301      	movs	r3, #1
 8001446:	71fb      	strb	r3, [r7, #7]
    }
    return KeyNum2;
 8001448:	79fb      	ldrb	r3, [r7, #7]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40010c00 	.word	0x40010c00

08001458 <Motor_SetSpeed>:

void Motor_SetSpeed(int8_t Speed)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
    if (Speed >= 0)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	2b00      	cmp	r3, #0
 8001468:	db0e      	blt.n	8001488 <Motor_SetSpeed+0x30>
    {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800146a:	2201      	movs	r2, #1
 800146c:	2110      	movs	r1, #16
 800146e:	4808      	ldr	r0, [pc, #32]	@ (8001490 <Motor_SetSpeed+0x38>)
 8001470:	f001 fcb9 	bl	8002de6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	2120      	movs	r1, #32
 8001478:	4805      	ldr	r0, [pc, #20]	@ (8001490 <Motor_SetSpeed+0x38>)
 800147a:	f001 fcb4 	bl	8002de6 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Speed);
 800147e:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <Motor_SetSpeed+0x3c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001486:	635a      	str	r2, [r3, #52]	@ 0x34
    }
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40010800 	.word	0x40010800
 8001494:	200006f4 	.word	0x200006f4

08001498 <ManualControlServo>:

void ManualControlServo(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
    KeyNum2 = Key_GetNum_2();
 800149c:	f7ff ffb8 	bl	8001410 <Key_GetNum_2>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <ManualControlServo+0x50>)
 80014a6:	701a      	strb	r2, [r3, #0]
    if (KeyNum2 == 1)
 80014a8:	4b0f      	ldr	r3, [pc, #60]	@ (80014e8 <ManualControlServo+0x50>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d118      	bne.n	80014e2 <ManualControlServo+0x4a>
    {
        servoState = !servoState;
 80014b0:	4b0e      	ldr	r3, [pc, #56]	@ (80014ec <ManualControlServo+0x54>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	bf0c      	ite	eq
 80014b8:	2301      	moveq	r3, #1
 80014ba:	2300      	movne	r3, #0
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	461a      	mov	r2, r3
 80014c0:	4b0a      	ldr	r3, [pc, #40]	@ (80014ec <ManualControlServo+0x54>)
 80014c2:	701a      	strb	r2, [r3, #0]
        if (servoState)
 80014c4:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <ManualControlServo+0x54>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d005      	beq.n	80014d8 <ManualControlServo+0x40>
        {
            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, SERVO_OPEN);
 80014cc:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <ManualControlServo+0x58>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 80014d4:	635a      	str	r2, [r3, #52]	@ 0x34
        else
        {
            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, SERVO_CLOSED);
        }
    }
}
 80014d6:	e004      	b.n	80014e2 <ManualControlServo+0x4a>
            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, SERVO_CLOSED);
 80014d8:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <ManualControlServo+0x58>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80014e0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000296 	.word	0x20000296
 80014ec:	20000293 	.word	0x20000293
 80014f0:	200006ac 	.word	0x200006ac

080014f4 <UART_ProcessCommand>:

// 处理接收到的命令
void UART_ProcessCommand(uint8_t *cmd)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
    // 命令处理中标志，防止重入
    if(commandInProgress) return;
 80014fc:	4b4a      	ldr	r3, [pc, #296]	@ (8001628 <UART_ProcessCommand+0x134>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	f040 808d 	bne.w	8001620 <UART_ProcessCommand+0x12c>
    commandInProgress = 1;
 8001506:	4b48      	ldr	r3, [pc, #288]	@ (8001628 <UART_ProcessCommand+0x134>)
 8001508:	2201      	movs	r2, #1
 800150a:	701a      	strb	r2, [r3, #0]

    if(cmd[0] == 'O' && cmd[1] == 'K')
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b4f      	cmp	r3, #79	@ 0x4f
 8001512:	d14f      	bne.n	80015b4 <UART_ProcessCommand+0xc0>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3301      	adds	r3, #1
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b4b      	cmp	r3, #75	@ 0x4b
 800151c:	d14a      	bne.n	80015b4 <UART_ProcessCommand+0xc0>
    {
    	HAL_Delay(2000);  //等待上一句“车辆靠近”说完
 800151e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001522:	f001 f993 	bl	800284c <HAL_Delay>

    	//蜂鸣器提示一下
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	2180      	movs	r1, #128	@ 0x80
 800152a:	4840      	ldr	r0, [pc, #256]	@ (800162c <UART_ProcessCommand+0x138>)
 800152c:	f001 fc5b 	bl	8002de6 <HAL_GPIO_WritePin>
        HAL_Delay(150);
 8001530:	2096      	movs	r0, #150	@ 0x96
 8001532:	f001 f98b 	bl	800284c <HAL_Delay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001536:	2201      	movs	r2, #1
 8001538:	2180      	movs	r1, #128	@ 0x80
 800153a:	483c      	ldr	r0, [pc, #240]	@ (800162c <UART_ProcessCommand+0x138>)
 800153c:	f001 fc53 	bl	8002de6 <HAL_GPIO_WritePin>

        HAL_Delay(200);  //稍等一下，提示完再说话
 8001540:	20c8      	movs	r0, #200	@ 0xc8
 8001542:	f001 f983 	bl	800284c <HAL_Delay>

    	//请尽快通行的语音
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001546:	2200      	movs	r2, #0
 8001548:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800154c:	4838      	ldr	r0, [pc, #224]	@ (8001630 <UART_ProcessCommand+0x13c>)
 800154e:	f001 fc4a 	bl	8002de6 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8001552:	2064      	movs	r0, #100	@ 0x64
 8001554:	f001 f97a 	bl	800284c <HAL_Delay>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001558:	2201      	movs	r2, #1
 800155a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800155e:	4834      	ldr	r0, [pc, #208]	@ (8001630 <UART_ProcessCommand+0x13c>)
 8001560:	f001 fc41 	bl	8002de6 <HAL_GPIO_WritePin>

        HAL_Delay(500);   //稍等0.5秒然后升起栏杆
 8001564:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001568:	f001 f970 	bl	800284c <HAL_Delay>

        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, SERVO_OPEN);
 800156c:	4b31      	ldr	r3, [pc, #196]	@ (8001634 <UART_ProcessCommand+0x140>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001574:	635a      	str	r2, [r3, #52]	@ 0x34

        // 新增逻辑：时刻检测光敏传感器的输出
        while (1)
        {
            GPIO_PinState carSensor = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8001576:	2102      	movs	r1, #2
 8001578:	482c      	ldr	r0, [pc, #176]	@ (800162c <UART_ProcessCommand+0x138>)
 800157a:	f001 fc1d 	bl	8002db8 <HAL_GPIO_ReadPin>
 800157e:	4603      	mov	r3, r0
 8001580:	73fb      	strb	r3, [r7, #15]
            uint8_t carDetected = (carSensor == GPIO_PIN_SET) ? 1 : 0; // 假设光敏传感器检测到物体时为高电平
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	2b01      	cmp	r3, #1
 8001586:	bf0c      	ite	eq
 8001588:	2301      	moveq	r3, #1
 800158a:	2300      	movne	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	73bb      	strb	r3, [r7, #14]

            if (!carDetected) // 光敏传感器输出为低电平，执行落下操作
 8001590:	7bbb      	ldrb	r3, [r7, #14]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10a      	bne.n	80015ac <UART_ProcessCommand+0xb8>
            {
                HAL_Delay(1500);
 8001596:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800159a:	f001 f957 	bl	800284c <HAL_Delay>
                __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, SERVO_CLOSED);
 800159e:	4b25      	ldr	r3, [pc, #148]	@ (8001634 <UART_ProcessCommand+0x140>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015a6:	635a      	str	r2, [r3, #52]	@ 0x34
                break; // 退出循环
 80015a8:	bf00      	nop
    if(cmd[0] == 'O' && cmd[1] == 'K')
 80015aa:	e035      	b.n	8001618 <UART_ProcessCommand+0x124>
            }
            else
            {
                // 光敏传感器输出为高电平，保持栏杆升起，继续检测
                HAL_Delay(100); // 避免过于频繁的检测
 80015ac:	2064      	movs	r0, #100	@ 0x64
 80015ae:	f001 f94d 	bl	800284c <HAL_Delay>
        {
 80015b2:	e7e0      	b.n	8001576 <UART_ProcessCommand+0x82>
            }
        }

    }
    else if(cmd[0] == 'N' && cmd[1] == 'O')
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b4e      	cmp	r3, #78	@ 0x4e
 80015ba:	d12d      	bne.n	8001618 <UART_ProcessCommand+0x124>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3301      	adds	r3, #1
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b4f      	cmp	r3, #79	@ 0x4f
 80015c4:	d128      	bne.n	8001618 <UART_ProcessCommand+0x124>
    {
    	HAL_Delay(2000);  //等待上一句车辆靠近说完
 80015c6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80015ca:	f001 f93f 	bl	800284c <HAL_Delay>

    	//蜂鸣器提示一下
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2180      	movs	r1, #128	@ 0x80
 80015d2:	4816      	ldr	r0, [pc, #88]	@ (800162c <UART_ProcessCommand+0x138>)
 80015d4:	f001 fc07 	bl	8002de6 <HAL_GPIO_WritePin>
        HAL_Delay(150);
 80015d8:	2096      	movs	r0, #150	@ 0x96
 80015da:	f001 f937 	bl	800284c <HAL_Delay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80015de:	2201      	movs	r2, #1
 80015e0:	2180      	movs	r1, #128	@ 0x80
 80015e2:	4812      	ldr	r0, [pc, #72]	@ (800162c <UART_ProcessCommand+0x138>)
 80015e4:	f001 fbff 	bl	8002de6 <HAL_GPIO_WritePin>

        HAL_Delay(200);  //稍等一下，提示完再说话
 80015e8:	20c8      	movs	r0, #200	@ 0xc8
 80015ea:	f001 f92f 	bl	800284c <HAL_Delay>

    	//请缴费的语音
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80015ee:	2200      	movs	r2, #0
 80015f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015f4:	480e      	ldr	r0, [pc, #56]	@ (8001630 <UART_ProcessCommand+0x13c>)
 80015f6:	f001 fbf6 	bl	8002de6 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 80015fa:	2064      	movs	r0, #100	@ 0x64
 80015fc:	f001 f926 	bl	800284c <HAL_Delay>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001600:	2201      	movs	r2, #1
 8001602:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001606:	480a      	ldr	r0, [pc, #40]	@ (8001630 <UART_ProcessCommand+0x13c>)
 8001608:	f001 fbed 	bl	8002de6 <HAL_GPIO_WritePin>

        ssd1306_TestDrawBitmap();
 800160c:	f000 fd70 	bl	80020f0 <ssd1306_TestDrawBitmap>
        HAL_Delay(4000);
 8001610:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8001614:	f001 f91a 	bl	800284c <HAL_Delay>
    }

    commandInProgress = 0;
 8001618:	4b03      	ldr	r3, [pc, #12]	@ (8001628 <UART_ProcessCommand+0x134>)
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
 800161e:	e000      	b.n	8001622 <UART_ProcessCommand+0x12e>
    if(commandInProgress) return;
 8001620:	bf00      	nop
}
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000292 	.word	0x20000292
 800162c:	40010800 	.word	0x40010800
 8001630:	40010c00 	.word	0x40010c00
 8001634:	200006ac 	.word	0x200006ac

08001638 <main>:

int main(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b09c      	sub	sp, #112	@ 0x70
 800163c:	af02      	add	r7, sp, #8
    HAL_Init();
 800163e:	f001 f8a3 	bl	8002788 <HAL_Init>
    SystemClock_Config();
 8001642:	f000 fa1d 	bl	8001a80 <SystemClock_Config>
    MX_GPIO_Init();
 8001646:	f7ff fd71 	bl	800112c <MX_GPIO_Init>
    MX_TIM2_Init();
 800164a:	f000 fe9d 	bl	8002388 <MX_TIM2_Init>
    MX_I2C1_Init();
 800164e:	f7ff fdf7 	bl	8001240 <MX_I2C1_Init>
    MX_USART1_UART_Init();
 8001652:	f000 fffd 	bl	8002650 <MX_USART1_UART_Init>
    MX_TIM3_Init();
 8001656:	f000 ff19 	bl	800248c <MX_TIM3_Init>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800165a:	2100      	movs	r1, #0
 800165c:	487f      	ldr	r0, [pc, #508]	@ (800185c <main+0x224>)
 800165e:	f003 fa4d 	bl	8004afc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001662:	2100      	movs	r1, #0
 8001664:	487e      	ldr	r0, [pc, #504]	@ (8001860 <main+0x228>)
 8001666:	f003 fa49 	bl	8004afc <HAL_TIM_PWM_Start>

    // 重要：重新配置波特率后重新初始化
    huart1.Instance = USART1;
 800166a:	4b7e      	ldr	r3, [pc, #504]	@ (8001864 <main+0x22c>)
 800166c:	4a7e      	ldr	r2, [pc, #504]	@ (8001868 <main+0x230>)
 800166e:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8001670:	4b7c      	ldr	r3, [pc, #496]	@ (8001864 <main+0x22c>)
 8001672:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001676:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001678:	4b7a      	ldr	r3, [pc, #488]	@ (8001864 <main+0x22c>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 800167e:	4b79      	ldr	r3, [pc, #484]	@ (8001864 <main+0x22c>)
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8001684:	4b77      	ldr	r3, [pc, #476]	@ (8001864 <main+0x22c>)
 8001686:	2200      	movs	r2, #0
 8001688:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 800168a:	4b76      	ldr	r3, [pc, #472]	@ (8001864 <main+0x22c>)
 800168c:	220c      	movs	r2, #12
 800168e:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001690:	4b74      	ldr	r3, [pc, #464]	@ (8001864 <main+0x22c>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001696:	4b73      	ldr	r3, [pc, #460]	@ (8001864 <main+0x22c>)
 8001698:	2200      	movs	r2, #0
 800169a:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 800169c:	4871      	ldr	r0, [pc, #452]	@ (8001864 <main+0x22c>)
 800169e:	f003 ff67 	bl	8005570 <HAL_UART_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <main+0x74>
    {
        Error_Handler();
 80016a8:	f000 fa8c 	bl	8001bc4 <Error_Handler>
    }

    // 启用串口接收中断
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 80016ac:	4b6d      	ldr	r3, [pc, #436]	@ (8001864 <main+0x22c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	68da      	ldr	r2, [r3, #12]
 80016b2:	4b6c      	ldr	r3, [pc, #432]	@ (8001864 <main+0x22c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f042 0220 	orr.w	r2, r2, #32
 80016ba:	60da      	str	r2, [r3, #12]
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016bc:	2200      	movs	r2, #0
 80016be:	2100      	movs	r1, #0
 80016c0:	2025      	movs	r0, #37	@ 0x25
 80016c2:	f001 f9be 	bl	8002a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016c6:	2025      	movs	r0, #37	@ 0x25
 80016c8:	f001 f9d7 	bl	8002a7a <HAL_NVIC_EnableIRQ>

    // 清空串口接收缓冲区
    uint8_t dummy;
    while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE)) {
 80016cc:	e004      	b.n	80016d8 <main+0xa0>
        dummy = huart1.Instance->DR;
 80016ce:	4b65      	ldr	r3, [pc, #404]	@ (8001864 <main+0x22c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE)) {
 80016d8:	4b62      	ldr	r3, [pc, #392]	@ (8001864 <main+0x22c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0320 	and.w	r3, r3, #32
 80016e2:	2b20      	cmp	r3, #32
 80016e4:	d0f3      	beq.n	80016ce <main+0x96>
    }

    ssd1306_Init();
 80016e6:	f000 faab 	bl	8001c40 <ssd1306_Init>
    AHT20_Init();
 80016ea:	f7ff fc7d 	bl	8000fe8 <AHT20_Init>
    float temperature, humidity;
    char message[50];
    int currentTemperature;
    int8_t Aut = 0, Flag = 0, Manual = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80016f4:	2300      	movs	r3, #0
 80016f6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80016fa:	2300      	movs	r3, #0
 80016fc:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

    SystemState state = NO_CAR;
 8001700:	2300      	movs	r3, #0
 8001702:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
    uint8_t carDetectedPrevious = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
    uint32_t lastCarDetectionTime = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, SERVO_CLOSED);
 8001710:	4b52      	ldr	r3, [pc, #328]	@ (800185c <main+0x224>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001718:	635a      	str	r2, [r3, #52]	@ 0x34

    // 初始化环形缓冲区
    uartRxBuffer.head = 0;
 800171a:	4b54      	ldr	r3, [pc, #336]	@ (800186c <main+0x234>)
 800171c:	2200      	movs	r2, #0
 800171e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    uartRxBuffer.tail = 0;
 8001722:	4b52      	ldr	r3, [pc, #328]	@ (800186c <main+0x234>)
 8001724:	2200      	movs	r2, #0
 8001726:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
    commandInProgress = 0;
 800172a:	4b51      	ldr	r3, [pc, #324]	@ (8001870 <main+0x238>)
 800172c:	2200      	movs	r2, #0
 800172e:	701a      	strb	r2, [r3, #0]

    // 初始化完成后延时，确保系统稳定
    HAL_Delay(100);
 8001730:	2064      	movs	r0, #100	@ 0x64
 8001732:	f001 f88b 	bl	800284c <HAL_Delay>

    // 新增：车辆检测防抖变量
    uint32_t lastCarDetectTime = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint8_t carDetectSent = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

    while (1)
    {
        GPIO_PinState carSensor = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8001740:	2102      	movs	r1, #2
 8001742:	484c      	ldr	r0, [pc, #304]	@ (8001874 <main+0x23c>)
 8001744:	f001 fb38 	bl	8002db8 <HAL_GPIO_ReadPin>
 8001748:	4603      	mov	r3, r0
 800174a:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
        uint8_t carDetected = (carSensor == GPIO_PIN_SET) ? 1 : 0;
 800174e:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8001752:	2b01      	cmp	r3, #1
 8001754:	bf0c      	ite	eq
 8001756:	2301      	moveq	r3, #1
 8001758:	2300      	movne	r3, #0
 800175a:	b2db      	uxtb	r3, r3
 800175c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
        uint32_t currentTime = HAL_GetTick();
 8001760:	f001 f86a 	bl	8002838 <HAL_GetTick>
 8001764:	6538      	str	r0, [r7, #80]	@ 0x50

        ManualControlServo();
 8001766:	f7ff fe97 	bl	8001498 <ManualControlServo>

        // 新增：车辆检测防抖逻辑 - 修复多次发送问题
        if (carDetected && !carDetectedPrevious && (currentTime - lastCarDetectTime > 1000))
 800176a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00e      	beq.n	8001790 <main+0x158>
 8001772:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8001776:	2b00      	cmp	r3, #0
 8001778:	d10a      	bne.n	8001790 <main+0x158>
 800177a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800177c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001784:	d904      	bls.n	8001790 <main+0x158>
        {
            // 设置防抖时间，确保1秒内只检测一次
            lastCarDetectTime = currentTime;
 8001786:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001788:	65bb      	str	r3, [r7, #88]	@ 0x58
            carDetectSent = 0; // 重置发送标志
 800178a:	2300      	movs	r3, #0
 800178c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        }

        switch (state)
 8001790:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8001794:	2b00      	cmp	r3, #0
 8001796:	d002      	beq.n	800179e <main+0x166>
 8001798:	2b01      	cmp	r3, #1
 800179a:	d035      	beq.n	8001808 <main+0x1d0>
 800179c:	e052      	b.n	8001844 <main+0x20c>
        {
            case NO_CAR:
                // 新增：确保只发送一次车辆检测信号
                if (carDetected && !carDetectedPrevious && !carDetectSent && (currentTime - lastCarDetectTime < 100))
 800179e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d04b      	beq.n	800183e <main+0x206>
 80017a6:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d147      	bne.n	800183e <main+0x206>
 80017ae:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d143      	bne.n	800183e <main+0x206>
 80017b6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80017b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b63      	cmp	r3, #99	@ 0x63
 80017be:	d83e      	bhi.n	800183e <main+0x206>
                {

                	//车辆靠近，等待检查的语音
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80017c0:	2200      	movs	r2, #0
 80017c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017c6:	482c      	ldr	r0, [pc, #176]	@ (8001878 <main+0x240>)
 80017c8:	f001 fb0d 	bl	8002de6 <HAL_GPIO_WritePin>
                    HAL_Delay(100);
 80017cc:	2064      	movs	r0, #100	@ 0x64
 80017ce:	f001 f83d 	bl	800284c <HAL_Delay>
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80017d2:	2201      	movs	r2, #1
 80017d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017d8:	4827      	ldr	r0, [pc, #156]	@ (8001878 <main+0x240>)
 80017da:	f001 fb04 	bl	8002de6 <HAL_GPIO_WritePin>

                    char *carDetectMsg = "CAR_DETECTED\n";
 80017de:	4b27      	ldr	r3, [pc, #156]	@ (800187c <main+0x244>)
 80017e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    // 只发送一次，不重试
                    HAL_UART_Transmit(&huart1, (uint8_t*)carDetectMsg, strlen(carDetectMsg), 100);
 80017e2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80017e4:	f7fe fcb4 	bl	8000150 <strlen>
 80017e8:	4603      	mov	r3, r0
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	2364      	movs	r3, #100	@ 0x64
 80017ee:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80017f0:	481c      	ldr	r0, [pc, #112]	@ (8001864 <main+0x22c>)
 80017f2:	f003 ff0d 	bl	8005610 <HAL_UART_Transmit>

                    // 标记已发送
                    carDetectSent = 1;
 80017f6:	2301      	movs	r3, #1
 80017f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

                    state = WAITING_RESPONSE;
 80017fc:	2301      	movs	r3, #1
 80017fe:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                    lastCarDetectionTime = currentTime;
 8001802:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001804:	65fb      	str	r3, [r7, #92]	@ 0x5c
                }
                break;
 8001806:	e01a      	b.n	800183e <main+0x206>

            case WAITING_RESPONSE:
                // 超时处理
                if (currentTime - lastCarDetectionTime > 3000)
 8001808:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800180a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001812:	4293      	cmp	r3, r2
 8001814:	d915      	bls.n	8001842 <main+0x20a>
                {
                    ssd1306_Fill(White);
 8001816:	2001      	movs	r0, #1
 8001818:	f000 fa7c 	bl	8001d14 <ssd1306_Fill>
                    ssd1306_SetCursor(0, 10);
 800181c:	210a      	movs	r1, #10
 800181e:	2000      	movs	r0, #0
 8001820:	f000 fbc2 	bl	8001fa8 <ssd1306_SetCursor>
                    ssd1306_WriteString("Timeout", Font_6x8, Black);
 8001824:	4b16      	ldr	r3, [pc, #88]	@ (8001880 <main+0x248>)
 8001826:	2200      	movs	r2, #0
 8001828:	9200      	str	r2, [sp, #0]
 800182a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800182c:	4815      	ldr	r0, [pc, #84]	@ (8001884 <main+0x24c>)
 800182e:	f000 fb95 	bl	8001f5c <ssd1306_WriteString>
                    ssd1306_UpdateScreen();
 8001832:	f000 fa87 	bl	8001d44 <ssd1306_UpdateScreen>
                    state = NO_CAR;
 8001836:	2300      	movs	r3, #0
 8001838:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                }
                break;
 800183c:	e001      	b.n	8001842 <main+0x20a>
                break;
 800183e:	bf00      	nop
 8001840:	e000      	b.n	8001844 <main+0x20c>
                break;
 8001842:	bf00      	nop
        }

        carDetectedPrevious = carDetected;
 8001844:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001848:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
        HAL_Delay(10);
 800184c:	200a      	movs	r0, #10
 800184e:	f000 fffd 	bl	800284c <HAL_Delay>

        // 处理接收到的UART数据
        static uint8_t cmdIndex = 0;
        static uint32_t lastByteTime = 0;
        uint8_t rxByte;
        uint32_t currentByteTime = HAL_GetTick();
 8001852:	f000 fff1 	bl	8002838 <HAL_GetTick>
 8001856:	64b8      	str	r0, [r7, #72]	@ 0x48

        while(UART_ReadByte(&rxByte))
 8001858:	e045      	b.n	80018e6 <main+0x2ae>
 800185a:	bf00      	nop
 800185c:	200006ac 	.word	0x200006ac
 8001860:	200006f4 	.word	0x200006f4
 8001864:	2000073c 	.word	0x2000073c
 8001868:	40013800 	.word	0x40013800
 800186c:	2000024c 	.word	0x2000024c
 8001870:	20000292 	.word	0x20000292
 8001874:	40010800 	.word	0x40010800
 8001878:	40010c00 	.word	0x40010c00
 800187c:	0800868c 	.word	0x0800868c
 8001880:	0800a260 	.word	0x0800a260
 8001884:	0800869c 	.word	0x0800869c
        {
            // 检查字节间隔时间，如果超过20ms则重置命令索引
            if(currentByteTime - lastByteTime > 20 && cmdIndex > 0) {
 8001888:	4b73      	ldr	r3, [pc, #460]	@ (8001a58 <main+0x420>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b14      	cmp	r3, #20
 8001892:	d906      	bls.n	80018a2 <main+0x26a>
 8001894:	4b71      	ldr	r3, [pc, #452]	@ (8001a5c <main+0x424>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d002      	beq.n	80018a2 <main+0x26a>
                cmdIndex = 0; // 超时重置
 800189c:	4b6f      	ldr	r3, [pc, #444]	@ (8001a5c <main+0x424>)
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
            }

            lastByteTime = currentByteTime;
 80018a2:	4a6d      	ldr	r2, [pc, #436]	@ (8001a58 <main+0x420>)
 80018a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018a6:	6013      	str	r3, [r2, #0]

            // 存储接收到的字节
            if(cmdIndex < UART_RX_CMD_SIZE) {
 80018a8:	4b6c      	ldr	r3, [pc, #432]	@ (8001a5c <main+0x424>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d809      	bhi.n	80018c4 <main+0x28c>
                uartCmd[cmdIndex++] = rxByte;
 80018b0:	4b6a      	ldr	r3, [pc, #424]	@ (8001a5c <main+0x424>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	1c5a      	adds	r2, r3, #1
 80018b6:	b2d1      	uxtb	r1, r2
 80018b8:	4a68      	ldr	r2, [pc, #416]	@ (8001a5c <main+0x424>)
 80018ba:	7011      	strb	r1, [r2, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	79f9      	ldrb	r1, [r7, #7]
 80018c0:	4b67      	ldr	r3, [pc, #412]	@ (8001a60 <main+0x428>)
 80018c2:	5499      	strb	r1, [r3, r2]
            }

            // 收到完整命令
            if(cmdIndex == UART_RX_CMD_SIZE) {
 80018c4:	4b65      	ldr	r3, [pc, #404]	@ (8001a5c <main+0x424>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d10c      	bne.n	80018e6 <main+0x2ae>
                UART_ProcessCommand(uartCmd);
 80018cc:	4864      	ldr	r0, [pc, #400]	@ (8001a60 <main+0x428>)
 80018ce:	f7ff fe11 	bl	80014f4 <UART_ProcessCommand>

                // 如果处于等待状态，切换到无车状态
                if(state == WAITING_RESPONSE) {
 80018d2:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d102      	bne.n	80018e0 <main+0x2a8>
                    state = NO_CAR;
 80018da:	2300      	movs	r3, #0
 80018dc:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                }

                cmdIndex = 0; // 重置索引
 80018e0:	4b5e      	ldr	r3, [pc, #376]	@ (8001a5c <main+0x424>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]
        while(UART_ReadByte(&rxByte))
 80018e6:	1dfb      	adds	r3, r7, #7
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fd15 	bl	8001318 <UART_ReadByte>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1c9      	bne.n	8001888 <main+0x250>
            }
        }

        // 如果超过50ms没有收到新字节，重置命令索引
        if(cmdIndex > 0 && (HAL_GetTick() - lastByteTime > 50)) {
 80018f4:	4b59      	ldr	r3, [pc, #356]	@ (8001a5c <main+0x424>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00a      	beq.n	8001912 <main+0x2da>
 80018fc:	f000 ff9c 	bl	8002838 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	4b55      	ldr	r3, [pc, #340]	@ (8001a58 <main+0x420>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b32      	cmp	r3, #50	@ 0x32
 800190a:	d902      	bls.n	8001912 <main+0x2da>
            cmdIndex = 0;
 800190c:	4b53      	ldr	r3, [pc, #332]	@ (8001a5c <main+0x424>)
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
        }

        // 按键处理
        KeyNum0 = Key_GetNum0();
 8001912:	f7ff fd33 	bl	800137c <Key_GetNum0>
 8001916:	4603      	mov	r3, r0
 8001918:	461a      	mov	r2, r3
 800191a:	4b52      	ldr	r3, [pc, #328]	@ (8001a64 <main+0x42c>)
 800191c:	701a      	strb	r2, [r3, #0]
        if(KeyNum0 == 1)
 800191e:	4b51      	ldr	r3, [pc, #324]	@ (8001a64 <main+0x42c>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d10c      	bne.n	8001940 <main+0x308>
        {
            Flag += 1;
 8001926:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800192a:	3301      	adds	r3, #1
 800192c:	b2db      	uxtb	r3, r3
 800192e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
            if(Flag == 2)
 8001932:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 8001936:	2b02      	cmp	r3, #2
 8001938:	d102      	bne.n	8001940 <main+0x308>
            {
                Flag = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
            }
        }

        // 温湿度处理
        AHT20_Measure();
 8001940:	f7ff fb76 	bl	8001030 <AHT20_Measure>
        temperature = AHT20_Temperature();
 8001944:	f7ff fbde 	bl	8001104 <AHT20_Temperature>
 8001948:	6478      	str	r0, [r7, #68]	@ 0x44
        currentTemperature = (int)temperature;
 800194a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800194c:	f7ff fafa 	bl	8000f44 <__aeabi_f2iz>
 8001950:	4603      	mov	r3, r0
 8001952:	643b      	str	r3, [r7, #64]	@ 0x40
        humidity = AHT20_Humidity();
 8001954:	f7ff fbe0 	bl	8001118 <AHT20_Humidity>
 8001958:	63f8      	str	r0, [r7, #60]	@ 0x3c

        // OLED显示
        ssd1306_Fill(White);
 800195a:	2001      	movs	r0, #1
 800195c:	f000 f9da 	bl	8001d14 <ssd1306_Fill>
        ssd1306_SetCursor(8, 0);
 8001960:	2100      	movs	r1, #0
 8001962:	2008      	movs	r0, #8
 8001964:	f000 fb20 	bl	8001fa8 <ssd1306_SetCursor>
        ssd1306_WriteString("ETC System", Font_11x18, Black);
 8001968:	4b3f      	ldr	r3, [pc, #252]	@ (8001a68 <main+0x430>)
 800196a:	2200      	movs	r2, #0
 800196c:	9200      	str	r2, [sp, #0]
 800196e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001970:	483e      	ldr	r0, [pc, #248]	@ (8001a6c <main+0x434>)
 8001972:	f000 faf3 	bl	8001f5c <ssd1306_WriteString>
        sprintf(message, "Temperature: %.1f", temperature);
 8001976:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001978:	f7fe fd56 	bl	8000428 <__aeabi_f2d>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	f107 0008 	add.w	r0, r7, #8
 8001984:	493a      	ldr	r1, [pc, #232]	@ (8001a70 <main+0x438>)
 8001986:	f004 fd33 	bl	80063f0 <siprintf>
        ssd1306_SetCursor(0, 32);
 800198a:	2120      	movs	r1, #32
 800198c:	2000      	movs	r0, #0
 800198e:	f000 fb0b 	bl	8001fa8 <ssd1306_SetCursor>
        ssd1306_WriteString(message, Font_7x10, Black);
 8001992:	4b38      	ldr	r3, [pc, #224]	@ (8001a74 <main+0x43c>)
 8001994:	f107 0008 	add.w	r0, r7, #8
 8001998:	2200      	movs	r2, #0
 800199a:	9200      	str	r2, [sp, #0]
 800199c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800199e:	f000 fadd 	bl	8001f5c <ssd1306_WriteString>
        sprintf(message, "Humidity: %.1f%%", humidity);
 80019a2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80019a4:	f7fe fd40 	bl	8000428 <__aeabi_f2d>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	f107 0008 	add.w	r0, r7, #8
 80019b0:	4931      	ldr	r1, [pc, #196]	@ (8001a78 <main+0x440>)
 80019b2:	f004 fd1d 	bl	80063f0 <siprintf>
        ssd1306_SetCursor(0, 50);
 80019b6:	2132      	movs	r1, #50	@ 0x32
 80019b8:	2000      	movs	r0, #0
 80019ba:	f000 faf5 	bl	8001fa8 <ssd1306_SetCursor>
        ssd1306_WriteString(message, Font_7x10, Black);
 80019be:	4b2d      	ldr	r3, [pc, #180]	@ (8001a74 <main+0x43c>)
 80019c0:	f107 0008 	add.w	r0, r7, #8
 80019c4:	2200      	movs	r2, #0
 80019c6:	9200      	str	r2, [sp, #0]
 80019c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019ca:	f000 fac7 	bl	8001f5c <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 80019ce:	f000 f9b9 	bl	8001d44 <ssd1306_UpdateScreen>

        // 风扇控制
        if(Flag == 1)
 80019d2:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d119      	bne.n	8001a0e <main+0x3d6>
        {
            if (currentTemperature < 27)
 80019da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019dc:	2b1a      	cmp	r3, #26
 80019de:	dc03      	bgt.n	80019e8 <main+0x3b0>
            {
                Aut = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80019e6:	e012      	b.n	8001a0e <main+0x3d6>
            }
            else if (currentTemperature >= 27 && currentTemperature < 29)
 80019e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019ea:	2b1a      	cmp	r3, #26
 80019ec:	dd06      	ble.n	80019fc <main+0x3c4>
 80019ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019f0:	2b1c      	cmp	r3, #28
 80019f2:	dc03      	bgt.n	80019fc <main+0x3c4>
            {
                Aut = 25;
 80019f4:	2319      	movs	r3, #25
 80019f6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80019fa:	e008      	b.n	8001a0e <main+0x3d6>
            }
            else if (currentTemperature >= 29 && currentTemperature <= 100)
 80019fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019fe:	2b1c      	cmp	r3, #28
 8001a00:	dd05      	ble.n	8001a0e <main+0x3d6>
 8001a02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a04:	2b64      	cmp	r3, #100	@ 0x64
 8001a06:	dc02      	bgt.n	8001a0e <main+0x3d6>
            {
                Aut = 49;
 8001a08:	2331      	movs	r3, #49	@ 0x31
 8001a0a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            }
        }

        if(Flag == 0)
 8001a0e:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d11a      	bne.n	8001a4c <main+0x414>
        {
            KeyNum1 = Key_GetNum1();
 8001a16:	f7ff fcd7 	bl	80013c8 <Key_GetNum1>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b17      	ldr	r3, [pc, #92]	@ (8001a7c <main+0x444>)
 8001a20:	701a      	strb	r2, [r3, #0]
            if (KeyNum1 == 1)
 8001a22:	4b16      	ldr	r3, [pc, #88]	@ (8001a7c <main+0x444>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d110      	bne.n	8001a4c <main+0x414>
            {
                Manual += 25;
 8001a2a:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8001a2e:	3319      	adds	r3, #25
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                if (Manual > 50)
 8001a36:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 8001a3a:	2b32      	cmp	r3, #50	@ 0x32
 8001a3c:	dd02      	ble.n	8001a44 <main+0x40c>
                {
                    Manual = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                }
                Aut = Manual;
 8001a44:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8001a48:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            }
        }

        Motor_SetSpeed(Aut);
 8001a4c:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff fd01 	bl	8001458 <Motor_SetSpeed>
    {
 8001a56:	e673      	b.n	8001740 <main+0x108>
 8001a58:	20000298 	.word	0x20000298
 8001a5c:	2000029c 	.word	0x2000029c
 8001a60:	20000290 	.word	0x20000290
 8001a64:	20000294 	.word	0x20000294
 8001a68:	0800a278 	.word	0x0800a278
 8001a6c:	080086a4 	.word	0x080086a4
 8001a70:	080086b0 	.word	0x080086b0
 8001a74:	0800a26c 	.word	0x0800a26c
 8001a78:	080086c4 	.word	0x080086c4
 8001a7c:	20000295 	.word	0x20000295

08001a80 <SystemClock_Config>:
    }
}

void SystemClock_Config(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b090      	sub	sp, #64	@ 0x40
 8001a84:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a86:	f107 0318 	add.w	r3, r7, #24
 8001a8a:	2228      	movs	r2, #40	@ 0x28
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f004 fd2d 	bl	80064ee <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	60da      	str	r2, [r3, #12]
 8001aa0:	611a      	str	r2, [r3, #16]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001aaa:	2310      	movs	r3, #16
 8001aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab2:	f107 0318 	add.w	r3, r7, #24
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f002 fb72 	bl	80041a0 <HAL_RCC_OscConfig>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <SystemClock_Config+0x46>
    {
        Error_Handler();
 8001ac2:	f000 f87f 	bl	8001bc4 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ac6:	230f      	movs	r3, #15
 8001ac8:	607b      	str	r3, [r7, #4]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	2100      	movs	r1, #0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f002 fde0 	bl	80046a4 <HAL_RCC_ClockConfig>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <SystemClock_Config+0x6e>
    {
        Error_Handler();
 8001aea:	f000 f86b 	bl	8001bc4 <Error_Handler>
    }
}
 8001aee:	bf00      	nop
 8001af0:	3740      	adds	r7, #64	@ 0x40
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <USART1_IRQHandler>:

/* USER CODE BEGIN 4 */
// USART1中断处理函数
// 串口接收到新数据时，触发中断并读取数据
void USART1_IRQHandler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
    // 只处理接收中断
    if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE) != RESET)  //检查接收数据标志（RXNE=1表示有数据）
 8001afe:	4b2f      	ldr	r3, [pc, #188]	@ (8001bbc <USART1_IRQHandler+0xc4>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0320 	and.w	r3, r3, #32
 8001b08:	2b20      	cmp	r3, #32
 8001b0a:	d140      	bne.n	8001b8e <USART1_IRQHandler+0x96>
    {
        // 读取数据寄存器（自动清除RXNE标志）
        uint8_t data = (uint8_t)(huart1.Instance->DR);  // 读取数据寄存器（DR），自动清除RXNE标志
 8001b0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001bbc <USART1_IRQHandler+0xc4>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	71fb      	strb	r3, [r7, #7]

        // 安全地将数据存入环形缓冲区
        uint16_t next_head = (uartRxBuffer.head + 1) % UART_RX_BUFFER_SIZE;
 8001b14:	4b2a      	ldr	r3, [pc, #168]	@ (8001bc0 <USART1_IRQHandler+0xc8>)
 8001b16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	425a      	negs	r2, r3
 8001b20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b24:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001b28:	bf58      	it	pl
 8001b2a:	4253      	negpl	r3, r2
 8001b2c:	80bb      	strh	r3, [r7, #4]

        // 检查缓冲区是否已满
        if (next_head != uartRxBuffer.tail)
 8001b2e:	4b24      	ldr	r3, [pc, #144]	@ (8001bc0 <USART1_IRQHandler+0xc8>)
 8001b30:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	88ba      	ldrh	r2, [r7, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d00c      	beq.n	8001b56 <USART1_IRQHandler+0x5e>
        {
            uartRxBuffer.buffer[uartRxBuffer.head] = data;
 8001b3c:	4b20      	ldr	r3, [pc, #128]	@ (8001bc0 <USART1_IRQHandler+0xc8>)
 8001b3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	4619      	mov	r1, r3
 8001b46:	4a1e      	ldr	r2, [pc, #120]	@ (8001bc0 <USART1_IRQHandler+0xc8>)
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	5453      	strb	r3, [r2, r1]
            uartRxBuffer.head = next_head;
 8001b4c:	4a1c      	ldr	r2, [pc, #112]	@ (8001bc0 <USART1_IRQHandler+0xc8>)
 8001b4e:	88bb      	ldrh	r3, [r7, #4]
 8001b50:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
 8001b54:	e01b      	b.n	8001b8e <USART1_IRQHandler+0x96>
        }
        else
        {
            // 缓冲区满，丢弃最旧的数据
            uartRxBuffer.tail = (uartRxBuffer.tail + 1) % UART_RX_BUFFER_SIZE;
 8001b56:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc0 <USART1_IRQHandler+0xc8>)
 8001b58:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	3301      	adds	r3, #1
 8001b60:	425a      	negs	r2, r3
 8001b62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b66:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001b6a:	bf58      	it	pl
 8001b6c:	4253      	negpl	r3, r2
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	4b13      	ldr	r3, [pc, #76]	@ (8001bc0 <USART1_IRQHandler+0xc8>)
 8001b72:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
            uartRxBuffer.buffer[uartRxBuffer.head] = data;
 8001b76:	4b12      	ldr	r3, [pc, #72]	@ (8001bc0 <USART1_IRQHandler+0xc8>)
 8001b78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4a0f      	ldr	r2, [pc, #60]	@ (8001bc0 <USART1_IRQHandler+0xc8>)
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	5453      	strb	r3, [r2, r1]
            uartRxBuffer.head = next_head;
 8001b86:	4a0e      	ldr	r2, [pc, #56]	@ (8001bc0 <USART1_IRQHandler+0xc8>)
 8001b88:	88bb      	ldrh	r3, [r7, #4]
 8001b8a:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
        }
    }

    // 清除可能的溢出错误
    if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_ORE))
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bbc <USART1_IRQHandler+0xc4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d10a      	bne.n	8001bb2 <USART1_IRQHandler+0xba>
    {
        __HAL_UART_CLEAR_OREFLAG(&huart1);
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	603b      	str	r3, [r7, #0]
 8001ba0:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <USART1_IRQHandler+0xc4>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	603b      	str	r3, [r7, #0]
 8001ba8:	4b04      	ldr	r3, [pc, #16]	@ (8001bbc <USART1_IRQHandler+0xc4>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]
    }
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr
 8001bbc:	2000073c 	.word	0x2000073c
 8001bc0:	2000024c 	.word	0x2000024c

08001bc4 <Error_Handler>:
/* USER CODE END 4 */

void Error_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc8:	b672      	cpsid	i
}
 8001bca:	bf00      	nop
    __disable_irq();
    while (1)
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <Error_Handler+0x8>

08001bd0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr

08001bdc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af04      	add	r7, sp, #16
 8001be2:	4603      	mov	r3, r0
 8001be4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001be6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bea:	9302      	str	r3, [sp, #8]
 8001bec:	2301      	movs	r3, #1
 8001bee:	9301      	str	r3, [sp, #4]
 8001bf0:	1dfb      	adds	r3, r7, #7
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2178      	movs	r1, #120	@ 0x78
 8001bfa:	4803      	ldr	r0, [pc, #12]	@ (8001c08 <ssd1306_WriteCommand+0x2c>)
 8001bfc:	f001 fdba 	bl	8003774 <HAL_I2C_Mem_Write>
}
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	200001f8 	.word	0x200001f8

08001c0c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af04      	add	r7, sp, #16
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c1e:	9202      	str	r2, [sp, #8]
 8001c20:	9301      	str	r3, [sp, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	2301      	movs	r3, #1
 8001c28:	2240      	movs	r2, #64	@ 0x40
 8001c2a:	2178      	movs	r1, #120	@ 0x78
 8001c2c:	4803      	ldr	r0, [pc, #12]	@ (8001c3c <ssd1306_WriteData+0x30>)
 8001c2e:	f001 fda1 	bl	8003774 <HAL_I2C_Mem_Write>
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200001f8 	.word	0x200001f8

08001c40 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001c44:	f7ff ffc4 	bl	8001bd0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001c48:	2064      	movs	r0, #100	@ 0x64
 8001c4a:	f000 fdff 	bl	800284c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f000 fa30 	bl	80020b4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001c54:	2020      	movs	r0, #32
 8001c56:	f7ff ffc1 	bl	8001bdc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	f7ff ffbe 	bl	8001bdc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001c60:	20b0      	movs	r0, #176	@ 0xb0
 8001c62:	f7ff ffbb 	bl	8001bdc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001c66:	20c8      	movs	r0, #200	@ 0xc8
 8001c68:	f7ff ffb8 	bl	8001bdc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	f7ff ffb5 	bl	8001bdc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001c72:	2010      	movs	r0, #16
 8001c74:	f7ff ffb2 	bl	8001bdc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001c78:	2040      	movs	r0, #64	@ 0x40
 8001c7a:	f7ff ffaf 	bl	8001bdc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001c7e:	20ff      	movs	r0, #255	@ 0xff
 8001c80:	f000 fa05 	bl	800208e <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001c84:	20a1      	movs	r0, #161	@ 0xa1
 8001c86:	f7ff ffa9 	bl	8001bdc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001c8a:	20a6      	movs	r0, #166	@ 0xa6
 8001c8c:	f7ff ffa6 	bl	8001bdc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001c90:	20a8      	movs	r0, #168	@ 0xa8
 8001c92:	f7ff ffa3 	bl	8001bdc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001c96:	203f      	movs	r0, #63	@ 0x3f
 8001c98:	f7ff ffa0 	bl	8001bdc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001c9c:	20a4      	movs	r0, #164	@ 0xa4
 8001c9e:	f7ff ff9d 	bl	8001bdc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001ca2:	20d3      	movs	r0, #211	@ 0xd3
 8001ca4:	f7ff ff9a 	bl	8001bdc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001ca8:	2000      	movs	r0, #0
 8001caa:	f7ff ff97 	bl	8001bdc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001cae:	20d5      	movs	r0, #213	@ 0xd5
 8001cb0:	f7ff ff94 	bl	8001bdc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001cb4:	20f0      	movs	r0, #240	@ 0xf0
 8001cb6:	f7ff ff91 	bl	8001bdc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001cba:	20d9      	movs	r0, #217	@ 0xd9
 8001cbc:	f7ff ff8e 	bl	8001bdc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001cc0:	2022      	movs	r0, #34	@ 0x22
 8001cc2:	f7ff ff8b 	bl	8001bdc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001cc6:	20da      	movs	r0, #218	@ 0xda
 8001cc8:	f7ff ff88 	bl	8001bdc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001ccc:	2012      	movs	r0, #18
 8001cce:	f7ff ff85 	bl	8001bdc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001cd2:	20db      	movs	r0, #219	@ 0xdb
 8001cd4:	f7ff ff82 	bl	8001bdc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001cd8:	2020      	movs	r0, #32
 8001cda:	f7ff ff7f 	bl	8001bdc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001cde:	208d      	movs	r0, #141	@ 0x8d
 8001ce0:	f7ff ff7c 	bl	8001bdc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001ce4:	2014      	movs	r0, #20
 8001ce6:	f7ff ff79 	bl	8001bdc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001cea:	2001      	movs	r0, #1
 8001cec:	f000 f9e2 	bl	80020b4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f000 f80f 	bl	8001d14 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001cf6:	f000 f825 	bl	8001d44 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001cfa:	4b05      	ldr	r3, [pc, #20]	@ (8001d10 <ssd1306_Init+0xd0>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001d00:	4b03      	ldr	r3, [pc, #12]	@ (8001d10 <ssd1306_Init+0xd0>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001d06:	4b02      	ldr	r3, [pc, #8]	@ (8001d10 <ssd1306_Init+0xd0>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	711a      	strb	r2, [r3, #4]
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	200006a0 	.word	0x200006a0

08001d14 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <ssd1306_Fill+0x14>
 8001d24:	2300      	movs	r3, #0
 8001d26:	e000      	b.n	8001d2a <ssd1306_Fill+0x16>
 8001d28:	23ff      	movs	r3, #255	@ 0xff
 8001d2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4803      	ldr	r0, [pc, #12]	@ (8001d40 <ssd1306_Fill+0x2c>)
 8001d32:	f004 fbdc 	bl	80064ee <memset>
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200002a0 	.word	0x200002a0

08001d44 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	71fb      	strb	r3, [r7, #7]
 8001d4e:	e016      	b.n	8001d7e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	3b50      	subs	r3, #80	@ 0x50
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff ff40 	bl	8001bdc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f7ff ff3d 	bl	8001bdc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001d62:	2010      	movs	r0, #16
 8001d64:	f7ff ff3a 	bl	8001bdc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	01db      	lsls	r3, r3, #7
 8001d6c:	4a08      	ldr	r2, [pc, #32]	@ (8001d90 <ssd1306_UpdateScreen+0x4c>)
 8001d6e:	4413      	add	r3, r2
 8001d70:	2180      	movs	r1, #128	@ 0x80
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ff4a 	bl	8001c0c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	71fb      	strb	r3, [r7, #7]
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	2b07      	cmp	r3, #7
 8001d82:	d9e5      	bls.n	8001d50 <ssd1306_UpdateScreen+0xc>
    }
}
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	200002a0 	.word	0x200002a0

08001d94 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	71fb      	strb	r3, [r7, #7]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	71bb      	strb	r3, [r7, #6]
 8001da2:	4613      	mov	r3, r2
 8001da4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	db3d      	blt.n	8001e2a <ssd1306_DrawPixel+0x96>
 8001dae:	79bb      	ldrb	r3, [r7, #6]
 8001db0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001db2:	d83a      	bhi.n	8001e2a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001db4:	797b      	ldrb	r3, [r7, #5]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d11a      	bne.n	8001df0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001dba:	79fa      	ldrb	r2, [r7, #7]
 8001dbc:	79bb      	ldrb	r3, [r7, #6]
 8001dbe:	08db      	lsrs	r3, r3, #3
 8001dc0:	b2d8      	uxtb	r0, r3
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	01db      	lsls	r3, r3, #7
 8001dc6:	4413      	add	r3, r2
 8001dc8:	4a1a      	ldr	r2, [pc, #104]	@ (8001e34 <ssd1306_DrawPixel+0xa0>)
 8001dca:	5cd3      	ldrb	r3, [r2, r3]
 8001dcc:	b25a      	sxtb	r2, r3
 8001dce:	79bb      	ldrb	r3, [r7, #6]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dda:	b25b      	sxtb	r3, r3
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	b259      	sxtb	r1, r3
 8001de0:	79fa      	ldrb	r2, [r7, #7]
 8001de2:	4603      	mov	r3, r0
 8001de4:	01db      	lsls	r3, r3, #7
 8001de6:	4413      	add	r3, r2
 8001de8:	b2c9      	uxtb	r1, r1
 8001dea:	4a12      	ldr	r2, [pc, #72]	@ (8001e34 <ssd1306_DrawPixel+0xa0>)
 8001dec:	54d1      	strb	r1, [r2, r3]
 8001dee:	e01d      	b.n	8001e2c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001df0:	79fa      	ldrb	r2, [r7, #7]
 8001df2:	79bb      	ldrb	r3, [r7, #6]
 8001df4:	08db      	lsrs	r3, r3, #3
 8001df6:	b2d8      	uxtb	r0, r3
 8001df8:	4603      	mov	r3, r0
 8001dfa:	01db      	lsls	r3, r3, #7
 8001dfc:	4413      	add	r3, r2
 8001dfe:	4a0d      	ldr	r2, [pc, #52]	@ (8001e34 <ssd1306_DrawPixel+0xa0>)
 8001e00:	5cd3      	ldrb	r3, [r2, r3]
 8001e02:	b25a      	sxtb	r2, r3
 8001e04:	79bb      	ldrb	r3, [r7, #6]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e10:	b25b      	sxtb	r3, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	b25b      	sxtb	r3, r3
 8001e16:	4013      	ands	r3, r2
 8001e18:	b259      	sxtb	r1, r3
 8001e1a:	79fa      	ldrb	r2, [r7, #7]
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	01db      	lsls	r3, r3, #7
 8001e20:	4413      	add	r3, r2
 8001e22:	b2c9      	uxtb	r1, r1
 8001e24:	4a03      	ldr	r2, [pc, #12]	@ (8001e34 <ssd1306_DrawPixel+0xa0>)
 8001e26:	54d1      	strb	r1, [r2, r3]
 8001e28:	e000      	b.n	8001e2c <ssd1306_DrawPixel+0x98>
        return;
 8001e2a:	bf00      	nop
    }
}
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr
 8001e34:	200002a0 	.word	0x200002a0

08001e38 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001e38:	b590      	push	{r4, r7, lr}
 8001e3a:	b089      	sub	sp, #36	@ 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4604      	mov	r4, r0
 8001e40:	4638      	mov	r0, r7
 8001e42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001e46:	4623      	mov	r3, r4
 8001e48:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	2b1f      	cmp	r3, #31
 8001e4e:	d902      	bls.n	8001e56 <ssd1306_WriteChar+0x1e>
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
 8001e52:	2b7e      	cmp	r3, #126	@ 0x7e
 8001e54:	d901      	bls.n	8001e5a <ssd1306_WriteChar+0x22>
        return 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	e079      	b.n	8001f4e <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <ssd1306_WriteChar+0x34>
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
 8001e64:	3b20      	subs	r3, #32
 8001e66:	4413      	add	r3, r2
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	e000      	b.n	8001e6e <ssd1306_WriteChar+0x36>
 8001e6c:	783b      	ldrb	r3, [r7, #0]
 8001e6e:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001e70:	4b39      	ldr	r3, [pc, #228]	@ (8001f58 <ssd1306_WriteChar+0x120>)
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	7dfb      	ldrb	r3, [r7, #23]
 8001e78:	4413      	add	r3, r2
 8001e7a:	2b80      	cmp	r3, #128	@ 0x80
 8001e7c:	dc06      	bgt.n	8001e8c <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001e7e:	4b36      	ldr	r3, [pc, #216]	@ (8001f58 <ssd1306_WriteChar+0x120>)
 8001e80:	885b      	ldrh	r3, [r3, #2]
 8001e82:	461a      	mov	r2, r3
 8001e84:	787b      	ldrb	r3, [r7, #1]
 8001e86:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001e88:	2b40      	cmp	r3, #64	@ 0x40
 8001e8a:	dd01      	ble.n	8001e90 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	e05e      	b.n	8001f4e <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001e90:	2300      	movs	r3, #0
 8001e92:	61fb      	str	r3, [r7, #28]
 8001e94:	e04d      	b.n	8001f32 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
 8001e9a:	3b20      	subs	r3, #32
 8001e9c:	7879      	ldrb	r1, [r7, #1]
 8001e9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	440b      	add	r3, r1
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4413      	add	r3, r2
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61bb      	str	r3, [r7, #24]
 8001eb4:	e036      	b.n	8001f24 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d013      	beq.n	8001eee <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001ec6:	4b24      	ldr	r3, [pc, #144]	@ (8001f58 <ssd1306_WriteChar+0x120>)
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	4413      	add	r3, r2
 8001ed2:	b2d8      	uxtb	r0, r3
 8001ed4:	4b20      	ldr	r3, [pc, #128]	@ (8001f58 <ssd1306_WriteChar+0x120>)
 8001ed6:	885b      	ldrh	r3, [r3, #2]
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	4413      	add	r3, r2
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f7ff ff54 	bl	8001d94 <ssd1306_DrawPixel>
 8001eec:	e017      	b.n	8001f1e <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001eee:	4b1a      	ldr	r3, [pc, #104]	@ (8001f58 <ssd1306_WriteChar+0x120>)
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	4413      	add	r3, r2
 8001efa:	b2d8      	uxtb	r0, r3
 8001efc:	4b16      	ldr	r3, [pc, #88]	@ (8001f58 <ssd1306_WriteChar+0x120>)
 8001efe:	885b      	ldrh	r3, [r3, #2]
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	4413      	add	r3, r2
 8001f08:	b2d9      	uxtb	r1, r3
 8001f0a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	bf0c      	ite	eq
 8001f12:	2301      	moveq	r3, #1
 8001f14:	2300      	movne	r3, #0
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	461a      	mov	r2, r3
 8001f1a:	f7ff ff3b 	bl	8001d94 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	3301      	adds	r3, #1
 8001f22:	61bb      	str	r3, [r7, #24]
 8001f24:	7dfb      	ldrb	r3, [r7, #23]
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d3c4      	bcc.n	8001eb6 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	61fb      	str	r3, [r7, #28]
 8001f32:	787b      	ldrb	r3, [r7, #1]
 8001f34:	461a      	mov	r2, r3
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d3ac      	bcc.n	8001e96 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	@ (8001f58 <ssd1306_WriteChar+0x120>)
 8001f3e:	881a      	ldrh	r2, [r3, #0]
 8001f40:	7dfb      	ldrb	r3, [r7, #23]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	4413      	add	r3, r2
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	4b03      	ldr	r3, [pc, #12]	@ (8001f58 <ssd1306_WriteChar+0x120>)
 8001f4a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3724      	adds	r7, #36	@ 0x24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd90      	pop	{r4, r7, pc}
 8001f56:	bf00      	nop
 8001f58:	200006a0 	.word	0x200006a0

08001f5c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af02      	add	r7, sp, #8
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	4638      	mov	r0, r7
 8001f66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001f6a:	e013      	b.n	8001f94 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	7818      	ldrb	r0, [r3, #0]
 8001f70:	7e3b      	ldrb	r3, [r7, #24]
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	463b      	mov	r3, r7
 8001f76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f78:	f7ff ff5e 	bl	8001e38 <ssd1306_WriteChar>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	461a      	mov	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d002      	beq.n	8001f8e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	e008      	b.n	8001fa0 <ssd1306_WriteString+0x44>
        }
        str++;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	3301      	adds	r3, #1
 8001f92:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1e7      	bne.n	8001f6c <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	460a      	mov	r2, r1
 8001fb2:	71fb      	strb	r3, [r7, #7]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <ssd1306_SetCursor+0x2c>)
 8001fbe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001fc0:	79bb      	ldrb	r3, [r7, #6]
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	4b03      	ldr	r3, [pc, #12]	@ (8001fd4 <ssd1306_SetCursor+0x2c>)
 8001fc6:	805a      	strh	r2, [r3, #2]
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	200006a0 	.word	0x200006a0

08001fd8 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	603a      	str	r2, [r7, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	71bb      	strb	r3, [r7, #6]
 8001fea:	4613      	mov	r3, r2
 8001fec:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001fee:	797b      	ldrb	r3, [r7, #5]
 8001ff0:	3307      	adds	r3, #7
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	da00      	bge.n	8001ff8 <ssd1306_DrawBitmap+0x20>
 8001ff6:	3307      	adds	r3, #7
 8001ff8:	10db      	asrs	r3, r3, #3
 8001ffa:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002004:	2b00      	cmp	r3, #0
 8002006:	db3e      	blt.n	8002086 <ssd1306_DrawBitmap+0xae>
 8002008:	79bb      	ldrb	r3, [r7, #6]
 800200a:	2b3f      	cmp	r3, #63	@ 0x3f
 800200c:	d83b      	bhi.n	8002086 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 800200e:	2300      	movs	r3, #0
 8002010:	73bb      	strb	r3, [r7, #14]
 8002012:	e033      	b.n	800207c <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8002014:	2300      	movs	r3, #0
 8002016:	737b      	strb	r3, [r7, #13]
 8002018:	e026      	b.n	8002068 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 800201a:	7b7b      	ldrb	r3, [r7, #13]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	73fb      	strb	r3, [r7, #15]
 800202a:	e00d      	b.n	8002048 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800202c:	7bbb      	ldrb	r3, [r7, #14]
 800202e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002032:	fb02 f303 	mul.w	r3, r2, r3
 8002036:	7b7a      	ldrb	r2, [r7, #13]
 8002038:	08d2      	lsrs	r2, r2, #3
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	4413      	add	r3, r2
 800203e:	461a      	mov	r2, r3
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	4413      	add	r3, r2
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8002048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800204c:	2b00      	cmp	r3, #0
 800204e:	da08      	bge.n	8002062 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8002050:	79fa      	ldrb	r2, [r7, #7]
 8002052:	7b7b      	ldrb	r3, [r7, #13]
 8002054:	4413      	add	r3, r2
 8002056:	b2db      	uxtb	r3, r3
 8002058:	7f3a      	ldrb	r2, [r7, #28]
 800205a:	79b9      	ldrb	r1, [r7, #6]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff fe99 	bl	8001d94 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8002062:	7b7b      	ldrb	r3, [r7, #13]
 8002064:	3301      	adds	r3, #1
 8002066:	737b      	strb	r3, [r7, #13]
 8002068:	7b7a      	ldrb	r2, [r7, #13]
 800206a:	797b      	ldrb	r3, [r7, #5]
 800206c:	429a      	cmp	r2, r3
 800206e:	d3d4      	bcc.n	800201a <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8002070:	7bbb      	ldrb	r3, [r7, #14]
 8002072:	3301      	adds	r3, #1
 8002074:	73bb      	strb	r3, [r7, #14]
 8002076:	79bb      	ldrb	r3, [r7, #6]
 8002078:	3301      	adds	r3, #1
 800207a:	71bb      	strb	r3, [r7, #6]
 800207c:	7bba      	ldrb	r2, [r7, #14]
 800207e:	7e3b      	ldrb	r3, [r7, #24]
 8002080:	429a      	cmp	r2, r3
 8002082:	d3c7      	bcc.n	8002014 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8002084:	e000      	b.n	8002088 <ssd1306_DrawBitmap+0xb0>
        return;
 8002086:	bf00      	nop
}
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 800208e:	b580      	push	{r7, lr}
 8002090:	b084      	sub	sp, #16
 8002092:	af00      	add	r7, sp, #0
 8002094:	4603      	mov	r3, r0
 8002096:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002098:	2381      	movs	r3, #129	@ 0x81
 800209a:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff fd9c 	bl	8001bdc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff fd98 	bl	8001bdc <ssd1306_WriteCommand>
}
 80020ac:	bf00      	nop
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80020c4:	23af      	movs	r3, #175	@ 0xaf
 80020c6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80020c8:	4b08      	ldr	r3, [pc, #32]	@ (80020ec <ssd1306_SetDisplayOn+0x38>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	715a      	strb	r2, [r3, #5]
 80020ce:	e004      	b.n	80020da <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80020d0:	23ae      	movs	r3, #174	@ 0xae
 80020d2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80020d4:	4b05      	ldr	r3, [pc, #20]	@ (80020ec <ssd1306_SetDisplayOn+0x38>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80020da:	7bfb      	ldrb	r3, [r7, #15]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fd7d 	bl	8001bdc <ssd1306_WriteCommand>
}
 80020e2:	bf00      	nop
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200006a0 	.word	0x200006a0

080020f0 <ssd1306_TestDrawBitmap>:
  ssd1306_UpdateScreen();
  return;
}

void ssd1306_TestDrawBitmap()
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af02      	add	r7, sp, #8
	  ssd1306_Fill(White);
 80020f6:	2001      	movs	r0, #1
 80020f8:	f7ff fe0c 	bl	8001d14 <ssd1306_Fill>
	  ssd1306_SetCursor(0, 24);
 80020fc:	2118      	movs	r1, #24
 80020fe:	2000      	movs	r0, #0
 8002100:	f7ff ff52 	bl	8001fa8 <ssd1306_SetCursor>
	  ssd1306_WriteString("The fee", Font_6x8, Black);
 8002104:	4b0a      	ldr	r3, [pc, #40]	@ (8002130 <ssd1306_TestDrawBitmap+0x40>)
 8002106:	2200      	movs	r2, #0
 8002108:	9200      	str	r2, [sp, #0]
 800210a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800210c:	4809      	ldr	r0, [pc, #36]	@ (8002134 <ssd1306_TestDrawBitmap+0x44>)
 800210e:	f7ff ff25 	bl	8001f5c <ssd1306_WriteString>
	  ssd1306_DrawBitmap(64,10,erData,48,48,Black);
 8002112:	2300      	movs	r3, #0
 8002114:	9301      	str	r3, [sp, #4]
 8002116:	2330      	movs	r3, #48	@ 0x30
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	2330      	movs	r3, #48	@ 0x30
 800211c:	4a06      	ldr	r2, [pc, #24]	@ (8002138 <ssd1306_TestDrawBitmap+0x48>)
 800211e:	210a      	movs	r1, #10
 8002120:	2040      	movs	r0, #64	@ 0x40
 8002122:	f7ff ff59 	bl	8001fd8 <ssd1306_DrawBitmap>
	  ssd1306_UpdateScreen();
 8002126:	f7ff fe0d 	bl	8001d44 <ssd1306_UpdateScreen>
//    ssd1306_UpdateScreen();
//    HAL_Delay(3000);
//    ssd1306_Fill(White);
//    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,Black);
//    ssd1306_UpdateScreen();
}
 800212a:	bf00      	nop
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	0800a260 	.word	0x0800a260
 8002134:	080087a0 	.word	0x080087a0
 8002138:	0800a284 	.word	0x0800a284

0800213c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002142:	4b15      	ldr	r3, [pc, #84]	@ (8002198 <HAL_MspInit+0x5c>)
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	4a14      	ldr	r2, [pc, #80]	@ (8002198 <HAL_MspInit+0x5c>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	6193      	str	r3, [r2, #24]
 800214e:	4b12      	ldr	r3, [pc, #72]	@ (8002198 <HAL_MspInit+0x5c>)
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800215a:	4b0f      	ldr	r3, [pc, #60]	@ (8002198 <HAL_MspInit+0x5c>)
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	4a0e      	ldr	r2, [pc, #56]	@ (8002198 <HAL_MspInit+0x5c>)
 8002160:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002164:	61d3      	str	r3, [r2, #28]
 8002166:	4b0c      	ldr	r3, [pc, #48]	@ (8002198 <HAL_MspInit+0x5c>)
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800216e:	607b      	str	r3, [r7, #4]
 8002170:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002172:	4b0a      	ldr	r3, [pc, #40]	@ (800219c <HAL_MspInit+0x60>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	4a04      	ldr	r2, [pc, #16]	@ (800219c <HAL_MspInit+0x60>)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800218e:	bf00      	nop
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	40021000 	.word	0x40021000
 800219c:	40010000 	.word	0x40010000

080021a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021a4:	bf00      	nop
 80021a6:	e7fd      	b.n	80021a4 <NMI_Handler+0x4>

080021a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ac:	bf00      	nop
 80021ae:	e7fd      	b.n	80021ac <HardFault_Handler+0x4>

080021b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021b4:	bf00      	nop
 80021b6:	e7fd      	b.n	80021b4 <MemManage_Handler+0x4>

080021b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021bc:	bf00      	nop
 80021be:	e7fd      	b.n	80021bc <BusFault_Handler+0x4>

080021c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021c4:	bf00      	nop
 80021c6:	e7fd      	b.n	80021c4 <UsageFault_Handler+0x4>

080021c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr

080021ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021f0:	f000 fb10 	bl	8002814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021f4:	bf00      	nop
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return 1;
 80021fc:	2301      	movs	r3, #1
}
 80021fe:	4618      	mov	r0, r3
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr

08002206 <_kill>:

int _kill(int pid, int sig)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002210:	f004 f9c0 	bl	8006594 <__errno>
 8002214:	4603      	mov	r3, r0
 8002216:	2216      	movs	r2, #22
 8002218:	601a      	str	r2, [r3, #0]
  return -1;
 800221a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <_exit>:

void _exit (int status)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800222e:	f04f 31ff 	mov.w	r1, #4294967295
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff ffe7 	bl	8002206 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002238:	bf00      	nop
 800223a:	e7fd      	b.n	8002238 <_exit+0x12>

0800223c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	e00a      	b.n	8002264 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800224e:	f3af 8000 	nop.w
 8002252:	4601      	mov	r1, r0
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	60ba      	str	r2, [r7, #8]
 800225a:	b2ca      	uxtb	r2, r1
 800225c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	3301      	adds	r3, #1
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	429a      	cmp	r2, r3
 800226a:	dbf0      	blt.n	800224e <_read+0x12>
  }

  return len;
 800226c:	687b      	ldr	r3, [r7, #4]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b086      	sub	sp, #24
 800227a:	af00      	add	r7, sp, #0
 800227c:	60f8      	str	r0, [r7, #12]
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	e009      	b.n	800229c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	60ba      	str	r2, [r7, #8]
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	3301      	adds	r3, #1
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	dbf1      	blt.n	8002288 <_write+0x12>
  }
  return len;
 80022a4:	687b      	ldr	r3, [r7, #4]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <_close>:

int _close(int file)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022d4:	605a      	str	r2, [r3, #4]
  return 0;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr

080022e2 <_isatty>:

int _isatty(int file)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022ea:	2301      	movs	r3, #1
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr

080022f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b085      	sub	sp, #20
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	60f8      	str	r0, [r7, #12]
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr
	...

08002310 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002318:	4a14      	ldr	r2, [pc, #80]	@ (800236c <_sbrk+0x5c>)
 800231a:	4b15      	ldr	r3, [pc, #84]	@ (8002370 <_sbrk+0x60>)
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002324:	4b13      	ldr	r3, [pc, #76]	@ (8002374 <_sbrk+0x64>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d102      	bne.n	8002332 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800232c:	4b11      	ldr	r3, [pc, #68]	@ (8002374 <_sbrk+0x64>)
 800232e:	4a12      	ldr	r2, [pc, #72]	@ (8002378 <_sbrk+0x68>)
 8002330:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002332:	4b10      	ldr	r3, [pc, #64]	@ (8002374 <_sbrk+0x64>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4413      	add	r3, r2
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	429a      	cmp	r2, r3
 800233e:	d207      	bcs.n	8002350 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002340:	f004 f928 	bl	8006594 <__errno>
 8002344:	4603      	mov	r3, r0
 8002346:	220c      	movs	r2, #12
 8002348:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800234a:	f04f 33ff 	mov.w	r3, #4294967295
 800234e:	e009      	b.n	8002364 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002350:	4b08      	ldr	r3, [pc, #32]	@ (8002374 <_sbrk+0x64>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002356:	4b07      	ldr	r3, [pc, #28]	@ (8002374 <_sbrk+0x64>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	4a05      	ldr	r2, [pc, #20]	@ (8002374 <_sbrk+0x64>)
 8002360:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002362:	68fb      	ldr	r3, [r7, #12]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20005000 	.word	0x20005000
 8002370:	00000400 	.word	0x00000400
 8002374:	200006a8 	.word	0x200006a8
 8002378:	200008d8 	.word	0x200008d8

0800237c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr

08002388 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08e      	sub	sp, #56	@ 0x38
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800238e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
 8002398:	609a      	str	r2, [r3, #8]
 800239a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800239c:	f107 0320 	add.w	r3, r7, #32
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023a6:	1d3b      	adds	r3, r7, #4
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	611a      	str	r2, [r3, #16]
 80023b4:	615a      	str	r2, [r3, #20]
 80023b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023b8:	4b33      	ldr	r3, [pc, #204]	@ (8002488 <MX_TIM2_Init+0x100>)
 80023ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80023be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 80023c0:	4b31      	ldr	r3, [pc, #196]	@ (8002488 <MX_TIM2_Init+0x100>)
 80023c2:	220f      	movs	r2, #15
 80023c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c6:	4b30      	ldr	r3, [pc, #192]	@ (8002488 <MX_TIM2_Init+0x100>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80023cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002488 <MX_TIM2_Init+0x100>)
 80023ce:	f242 720f 	movw	r2, #9999	@ 0x270f
 80023d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d4:	4b2c      	ldr	r3, [pc, #176]	@ (8002488 <MX_TIM2_Init+0x100>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023da:	4b2b      	ldr	r3, [pc, #172]	@ (8002488 <MX_TIM2_Init+0x100>)
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023e0:	4829      	ldr	r0, [pc, #164]	@ (8002488 <MX_TIM2_Init+0x100>)
 80023e2:	f002 faed 	bl	80049c0 <HAL_TIM_Base_Init>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80023ec:	f7ff fbea 	bl	8001bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023fa:	4619      	mov	r1, r3
 80023fc:	4822      	ldr	r0, [pc, #136]	@ (8002488 <MX_TIM2_Init+0x100>)
 80023fe:	f002 fce1 	bl	8004dc4 <HAL_TIM_ConfigClockSource>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002408:	f7ff fbdc 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800240c:	481e      	ldr	r0, [pc, #120]	@ (8002488 <MX_TIM2_Init+0x100>)
 800240e:	f002 fb26 	bl	8004a5e <HAL_TIM_PWM_Init>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002418:	f7ff fbd4 	bl	8001bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800241c:	2300      	movs	r3, #0
 800241e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002420:	2300      	movs	r3, #0
 8002422:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002424:	f107 0320 	add.w	r3, r7, #32
 8002428:	4619      	mov	r1, r3
 800242a:	4817      	ldr	r0, [pc, #92]	@ (8002488 <MX_TIM2_Init+0x100>)
 800242c:	f003 f842 	bl	80054b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002436:	f7ff fbc5 	bl	8001bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800243a:	2360      	movs	r3, #96	@ 0x60
 800243c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 800243e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8002442:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002444:	2300      	movs	r3, #0
 8002446:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800244c:	1d3b      	adds	r3, r7, #4
 800244e:	2200      	movs	r2, #0
 8002450:	4619      	mov	r1, r3
 8002452:	480d      	ldr	r0, [pc, #52]	@ (8002488 <MX_TIM2_Init+0x100>)
 8002454:	f002 fbf4 	bl	8004c40 <HAL_TIM_PWM_ConfigChannel>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800245e:	f7ff fbb1 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002462:	1d3b      	adds	r3, r7, #4
 8002464:	2208      	movs	r2, #8
 8002466:	4619      	mov	r1, r3
 8002468:	4807      	ldr	r0, [pc, #28]	@ (8002488 <MX_TIM2_Init+0x100>)
 800246a:	f002 fbe9 	bl	8004c40 <HAL_TIM_PWM_ConfigChannel>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002474:	f7ff fba6 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002478:	4803      	ldr	r0, [pc, #12]	@ (8002488 <MX_TIM2_Init+0x100>)
 800247a:	f000 f899 	bl	80025b0 <HAL_TIM_MspPostInit>

}
 800247e:	bf00      	nop
 8002480:	3738      	adds	r7, #56	@ 0x38
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	200006ac 	.word	0x200006ac

0800248c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08a      	sub	sp, #40	@ 0x28
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002492:	f107 0320 	add.w	r3, r7, #32
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800249c:	1d3b      	adds	r3, r7, #4
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]
 80024a4:	609a      	str	r2, [r3, #8]
 80024a6:	60da      	str	r2, [r3, #12]
 80024a8:	611a      	str	r2, [r3, #16]
 80024aa:	615a      	str	r2, [r3, #20]
 80024ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024ae:	4b21      	ldr	r3, [pc, #132]	@ (8002534 <MX_TIM3_Init+0xa8>)
 80024b0:	4a21      	ldr	r2, [pc, #132]	@ (8002538 <MX_TIM3_Init+0xac>)
 80024b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 80024b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002534 <MX_TIM3_Init+0xa8>)
 80024b6:	2207      	movs	r2, #7
 80024b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002534 <MX_TIM3_Init+0xa8>)
 80024bc:	2200      	movs	r2, #0
 80024be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50;
 80024c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002534 <MX_TIM3_Init+0xa8>)
 80024c2:	2232      	movs	r2, #50	@ 0x32
 80024c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002534 <MX_TIM3_Init+0xa8>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024cc:	4b19      	ldr	r3, [pc, #100]	@ (8002534 <MX_TIM3_Init+0xa8>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80024d2:	4818      	ldr	r0, [pc, #96]	@ (8002534 <MX_TIM3_Init+0xa8>)
 80024d4:	f002 fac3 	bl	8004a5e <HAL_TIM_PWM_Init>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80024de:	f7ff fb71 	bl	8001bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024e2:	2300      	movs	r3, #0
 80024e4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024e6:	2300      	movs	r3, #0
 80024e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024ea:	f107 0320 	add.w	r3, r7, #32
 80024ee:	4619      	mov	r1, r3
 80024f0:	4810      	ldr	r0, [pc, #64]	@ (8002534 <MX_TIM3_Init+0xa8>)
 80024f2:	f002 ffdf 	bl	80054b4 <HAL_TIMEx_MasterConfigSynchronization>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80024fc:	f7ff fb62 	bl	8001bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002500:	2360      	movs	r3, #96	@ 0x60
 8002502:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002508:	2300      	movs	r3, #0
 800250a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002510:	1d3b      	adds	r3, r7, #4
 8002512:	2200      	movs	r2, #0
 8002514:	4619      	mov	r1, r3
 8002516:	4807      	ldr	r0, [pc, #28]	@ (8002534 <MX_TIM3_Init+0xa8>)
 8002518:	f002 fb92 	bl	8004c40 <HAL_TIM_PWM_ConfigChannel>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002522:	f7ff fb4f 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002526:	4803      	ldr	r0, [pc, #12]	@ (8002534 <MX_TIM3_Init+0xa8>)
 8002528:	f000 f842 	bl	80025b0 <HAL_TIM_MspPostInit>

}
 800252c:	bf00      	nop
 800252e:	3728      	adds	r7, #40	@ 0x28
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	200006f4 	.word	0x200006f4
 8002538:	40000400 	.word	0x40000400

0800253c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800254c:	d10b      	bne.n	8002566 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800254e:	4b08      	ldr	r3, [pc, #32]	@ (8002570 <HAL_TIM_Base_MspInit+0x34>)
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	4a07      	ldr	r2, [pc, #28]	@ (8002570 <HAL_TIM_Base_MspInit+0x34>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	61d3      	str	r3, [r2, #28]
 800255a:	4b05      	ldr	r3, [pc, #20]	@ (8002570 <HAL_TIM_Base_MspInit+0x34>)
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002566:	bf00      	nop
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr
 8002570:	40021000 	.word	0x40021000

08002574 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a09      	ldr	r2, [pc, #36]	@ (80025a8 <HAL_TIM_PWM_MspInit+0x34>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d10b      	bne.n	800259e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002586:	4b09      	ldr	r3, [pc, #36]	@ (80025ac <HAL_TIM_PWM_MspInit+0x38>)
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	4a08      	ldr	r2, [pc, #32]	@ (80025ac <HAL_TIM_PWM_MspInit+0x38>)
 800258c:	f043 0302 	orr.w	r3, r3, #2
 8002590:	61d3      	str	r3, [r2, #28]
 8002592:	4b06      	ldr	r3, [pc, #24]	@ (80025ac <HAL_TIM_PWM_MspInit+0x38>)
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800259e:	bf00      	nop
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr
 80025a8:	40000400 	.word	0x40000400
 80025ac:	40021000 	.word	0x40021000

080025b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b088      	sub	sp, #32
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b8:	f107 0310 	add.w	r3, r7, #16
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025ce:	d118      	bne.n	8002602 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002644 <HAL_TIM_MspPostInit+0x94>)
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002644 <HAL_TIM_MspPostInit+0x94>)
 80025d6:	f043 0304 	orr.w	r3, r3, #4
 80025da:	6193      	str	r3, [r2, #24]
 80025dc:	4b19      	ldr	r3, [pc, #100]	@ (8002644 <HAL_TIM_MspPostInit+0x94>)
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80025e8:	2305      	movs	r3, #5
 80025ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ec:	2302      	movs	r3, #2
 80025ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f0:	2302      	movs	r3, #2
 80025f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f4:	f107 0310 	add.w	r3, r7, #16
 80025f8:	4619      	mov	r1, r3
 80025fa:	4813      	ldr	r0, [pc, #76]	@ (8002648 <HAL_TIM_MspPostInit+0x98>)
 80025fc:	f000 fa58 	bl	8002ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002600:	e01c      	b.n	800263c <HAL_TIM_MspPostInit+0x8c>
  else if(timHandle->Instance==TIM3)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a11      	ldr	r2, [pc, #68]	@ (800264c <HAL_TIM_MspPostInit+0x9c>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d117      	bne.n	800263c <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260c:	4b0d      	ldr	r3, [pc, #52]	@ (8002644 <HAL_TIM_MspPostInit+0x94>)
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	4a0c      	ldr	r2, [pc, #48]	@ (8002644 <HAL_TIM_MspPostInit+0x94>)
 8002612:	f043 0304 	orr.w	r3, r3, #4
 8002616:	6193      	str	r3, [r2, #24]
 8002618:	4b0a      	ldr	r3, [pc, #40]	@ (8002644 <HAL_TIM_MspPostInit+0x94>)
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002624:	2340      	movs	r3, #64	@ 0x40
 8002626:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002628:	2302      	movs	r3, #2
 800262a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262c:	2302      	movs	r3, #2
 800262e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002630:	f107 0310 	add.w	r3, r7, #16
 8002634:	4619      	mov	r1, r3
 8002636:	4804      	ldr	r0, [pc, #16]	@ (8002648 <HAL_TIM_MspPostInit+0x98>)
 8002638:	f000 fa3a 	bl	8002ab0 <HAL_GPIO_Init>
}
 800263c:	bf00      	nop
 800263e:	3720      	adds	r7, #32
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40021000 	.word	0x40021000
 8002648:	40010800 	.word	0x40010800
 800264c:	40000400 	.word	0x40000400

08002650 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002654:	4b11      	ldr	r3, [pc, #68]	@ (800269c <MX_USART1_UART_Init+0x4c>)
 8002656:	4a12      	ldr	r2, [pc, #72]	@ (80026a0 <MX_USART1_UART_Init+0x50>)
 8002658:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800265a:	4b10      	ldr	r3, [pc, #64]	@ (800269c <MX_USART1_UART_Init+0x4c>)
 800265c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002660:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002662:	4b0e      	ldr	r3, [pc, #56]	@ (800269c <MX_USART1_UART_Init+0x4c>)
 8002664:	2200      	movs	r2, #0
 8002666:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002668:	4b0c      	ldr	r3, [pc, #48]	@ (800269c <MX_USART1_UART_Init+0x4c>)
 800266a:	2200      	movs	r2, #0
 800266c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800266e:	4b0b      	ldr	r3, [pc, #44]	@ (800269c <MX_USART1_UART_Init+0x4c>)
 8002670:	2200      	movs	r2, #0
 8002672:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002674:	4b09      	ldr	r3, [pc, #36]	@ (800269c <MX_USART1_UART_Init+0x4c>)
 8002676:	220c      	movs	r2, #12
 8002678:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800267a:	4b08      	ldr	r3, [pc, #32]	@ (800269c <MX_USART1_UART_Init+0x4c>)
 800267c:	2200      	movs	r2, #0
 800267e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002680:	4b06      	ldr	r3, [pc, #24]	@ (800269c <MX_USART1_UART_Init+0x4c>)
 8002682:	2200      	movs	r2, #0
 8002684:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002686:	4805      	ldr	r0, [pc, #20]	@ (800269c <MX_USART1_UART_Init+0x4c>)
 8002688:	f002 ff72 	bl	8005570 <HAL_UART_Init>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002692:	f7ff fa97 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	2000073c 	.word	0x2000073c
 80026a0:	40013800 	.word	0x40013800

080026a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ac:	f107 0310 	add.w	r3, r7, #16
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a1c      	ldr	r2, [pc, #112]	@ (8002730 <HAL_UART_MspInit+0x8c>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d131      	bne.n	8002728 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002734 <HAL_UART_MspInit+0x90>)
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	4a1a      	ldr	r2, [pc, #104]	@ (8002734 <HAL_UART_MspInit+0x90>)
 80026ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026ce:	6193      	str	r3, [r2, #24]
 80026d0:	4b18      	ldr	r3, [pc, #96]	@ (8002734 <HAL_UART_MspInit+0x90>)
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026dc:	4b15      	ldr	r3, [pc, #84]	@ (8002734 <HAL_UART_MspInit+0x90>)
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	4a14      	ldr	r2, [pc, #80]	@ (8002734 <HAL_UART_MspInit+0x90>)
 80026e2:	f043 0304 	orr.w	r3, r3, #4
 80026e6:	6193      	str	r3, [r2, #24]
 80026e8:	4b12      	ldr	r3, [pc, #72]	@ (8002734 <HAL_UART_MspInit+0x90>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fa:	2302      	movs	r3, #2
 80026fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026fe:	2303      	movs	r3, #3
 8002700:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002702:	f107 0310 	add.w	r3, r7, #16
 8002706:	4619      	mov	r1, r3
 8002708:	480b      	ldr	r0, [pc, #44]	@ (8002738 <HAL_UART_MspInit+0x94>)
 800270a:	f000 f9d1 	bl	8002ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800270e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002712:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271c:	f107 0310 	add.w	r3, r7, #16
 8002720:	4619      	mov	r1, r3
 8002722:	4805      	ldr	r0, [pc, #20]	@ (8002738 <HAL_UART_MspInit+0x94>)
 8002724:	f000 f9c4 	bl	8002ab0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002728:	bf00      	nop
 800272a:	3720      	adds	r7, #32
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40013800 	.word	0x40013800
 8002734:	40021000 	.word	0x40021000
 8002738:	40010800 	.word	0x40010800

0800273c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800273c:	f7ff fe1e 	bl	800237c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002740:	480b      	ldr	r0, [pc, #44]	@ (8002770 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002742:	490c      	ldr	r1, [pc, #48]	@ (8002774 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002744:	4a0c      	ldr	r2, [pc, #48]	@ (8002778 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002748:	e002      	b.n	8002750 <LoopCopyDataInit>

0800274a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800274a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800274c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800274e:	3304      	adds	r3, #4

08002750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002754:	d3f9      	bcc.n	800274a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002756:	4a09      	ldr	r2, [pc, #36]	@ (800277c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002758:	4c09      	ldr	r4, [pc, #36]	@ (8002780 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800275a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800275c:	e001      	b.n	8002762 <LoopFillZerobss>

0800275e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800275e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002760:	3204      	adds	r2, #4

08002762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002764:	d3fb      	bcc.n	800275e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002766:	f003 ff1b 	bl	80065a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800276a:	f7fe ff65 	bl	8001638 <main>
  bx lr
 800276e:	4770      	bx	lr
  ldr r0, =_sdata
 8002770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002774:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002778:	0800a754 	.word	0x0800a754
  ldr r2, =_sbss
 800277c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002780:	200008d4 	.word	0x200008d4

08002784 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002784:	e7fe      	b.n	8002784 <ADC1_2_IRQHandler>
	...

08002788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800278c:	4b08      	ldr	r3, [pc, #32]	@ (80027b0 <HAL_Init+0x28>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a07      	ldr	r2, [pc, #28]	@ (80027b0 <HAL_Init+0x28>)
 8002792:	f043 0310 	orr.w	r3, r3, #16
 8002796:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002798:	2003      	movs	r0, #3
 800279a:	f000 f947 	bl	8002a2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800279e:	200f      	movs	r0, #15
 80027a0:	f000 f808 	bl	80027b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027a4:	f7ff fcca 	bl	800213c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40022000 	.word	0x40022000

080027b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027bc:	4b12      	ldr	r3, [pc, #72]	@ (8002808 <HAL_InitTick+0x54>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b12      	ldr	r3, [pc, #72]	@ (800280c <HAL_InitTick+0x58>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	4619      	mov	r1, r3
 80027c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 f95f 	bl	8002a96 <HAL_SYSTICK_Config>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e00e      	b.n	8002800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b0f      	cmp	r3, #15
 80027e6:	d80a      	bhi.n	80027fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027e8:	2200      	movs	r2, #0
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	f04f 30ff 	mov.w	r0, #4294967295
 80027f0:	f000 f927 	bl	8002a42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027f4:	4a06      	ldr	r2, [pc, #24]	@ (8002810 <HAL_InitTick+0x5c>)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	e000      	b.n	8002800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
}
 8002800:	4618      	mov	r0, r3
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	20000000 	.word	0x20000000
 800280c:	20000008 	.word	0x20000008
 8002810:	20000004 	.word	0x20000004

08002814 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002818:	4b05      	ldr	r3, [pc, #20]	@ (8002830 <HAL_IncTick+0x1c>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	461a      	mov	r2, r3
 800281e:	4b05      	ldr	r3, [pc, #20]	@ (8002834 <HAL_IncTick+0x20>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4413      	add	r3, r2
 8002824:	4a03      	ldr	r2, [pc, #12]	@ (8002834 <HAL_IncTick+0x20>)
 8002826:	6013      	str	r3, [r2, #0]
}
 8002828:	bf00      	nop
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	20000008 	.word	0x20000008
 8002834:	20000784 	.word	0x20000784

08002838 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return uwTick;
 800283c:	4b02      	ldr	r3, [pc, #8]	@ (8002848 <HAL_GetTick+0x10>)
 800283e:	681b      	ldr	r3, [r3, #0]
}
 8002840:	4618      	mov	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr
 8002848:	20000784 	.word	0x20000784

0800284c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002854:	f7ff fff0 	bl	8002838 <HAL_GetTick>
 8002858:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002864:	d005      	beq.n	8002872 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002866:	4b0a      	ldr	r3, [pc, #40]	@ (8002890 <HAL_Delay+0x44>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4413      	add	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002872:	bf00      	nop
 8002874:	f7ff ffe0 	bl	8002838 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	429a      	cmp	r2, r3
 8002882:	d8f7      	bhi.n	8002874 <HAL_Delay+0x28>
  {
  }
}
 8002884:	bf00      	nop
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000008 	.word	0x20000008

08002894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a4:	4b0c      	ldr	r3, [pc, #48]	@ (80028d8 <__NVIC_SetPriorityGrouping+0x44>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028b0:	4013      	ands	r3, r2
 80028b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028c6:	4a04      	ldr	r2, [pc, #16]	@ (80028d8 <__NVIC_SetPriorityGrouping+0x44>)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	60d3      	str	r3, [r2, #12]
}
 80028cc:	bf00      	nop
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028e0:	4b04      	ldr	r3, [pc, #16]	@ (80028f4 <__NVIC_GetPriorityGrouping+0x18>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	0a1b      	lsrs	r3, r3, #8
 80028e6:	f003 0307 	and.w	r3, r3, #7
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002906:	2b00      	cmp	r3, #0
 8002908:	db0b      	blt.n	8002922 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800290a:	79fb      	ldrb	r3, [r7, #7]
 800290c:	f003 021f 	and.w	r2, r3, #31
 8002910:	4906      	ldr	r1, [pc, #24]	@ (800292c <__NVIC_EnableIRQ+0x34>)
 8002912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002916:	095b      	lsrs	r3, r3, #5
 8002918:	2001      	movs	r0, #1
 800291a:	fa00 f202 	lsl.w	r2, r0, r2
 800291e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr
 800292c:	e000e100 	.word	0xe000e100

08002930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	6039      	str	r1, [r7, #0]
 800293a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800293c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002940:	2b00      	cmp	r3, #0
 8002942:	db0a      	blt.n	800295a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	b2da      	uxtb	r2, r3
 8002948:	490c      	ldr	r1, [pc, #48]	@ (800297c <__NVIC_SetPriority+0x4c>)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	0112      	lsls	r2, r2, #4
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	440b      	add	r3, r1
 8002954:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002958:	e00a      	b.n	8002970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	b2da      	uxtb	r2, r3
 800295e:	4908      	ldr	r1, [pc, #32]	@ (8002980 <__NVIC_SetPriority+0x50>)
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	3b04      	subs	r3, #4
 8002968:	0112      	lsls	r2, r2, #4
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	440b      	add	r3, r1
 800296e:	761a      	strb	r2, [r3, #24]
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	e000e100 	.word	0xe000e100
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002984:	b480      	push	{r7}
 8002986:	b089      	sub	sp, #36	@ 0x24
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f1c3 0307 	rsb	r3, r3, #7
 800299e:	2b04      	cmp	r3, #4
 80029a0:	bf28      	it	cs
 80029a2:	2304      	movcs	r3, #4
 80029a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	3304      	adds	r3, #4
 80029aa:	2b06      	cmp	r3, #6
 80029ac:	d902      	bls.n	80029b4 <NVIC_EncodePriority+0x30>
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3b03      	subs	r3, #3
 80029b2:	e000      	b.n	80029b6 <NVIC_EncodePriority+0x32>
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b8:	f04f 32ff 	mov.w	r2, #4294967295
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43da      	mvns	r2, r3
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	401a      	ands	r2, r3
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029cc:	f04f 31ff 	mov.w	r1, #4294967295
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	fa01 f303 	lsl.w	r3, r1, r3
 80029d6:	43d9      	mvns	r1, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029dc:	4313      	orrs	r3, r2
         );
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3724      	adds	r7, #36	@ 0x24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029f8:	d301      	bcc.n	80029fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029fa:	2301      	movs	r3, #1
 80029fc:	e00f      	b.n	8002a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002a28 <SysTick_Config+0x40>)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a06:	210f      	movs	r1, #15
 8002a08:	f04f 30ff 	mov.w	r0, #4294967295
 8002a0c:	f7ff ff90 	bl	8002930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a10:	4b05      	ldr	r3, [pc, #20]	@ (8002a28 <SysTick_Config+0x40>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a16:	4b04      	ldr	r3, [pc, #16]	@ (8002a28 <SysTick_Config+0x40>)
 8002a18:	2207      	movs	r2, #7
 8002a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	e000e010 	.word	0xe000e010

08002a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff ff2d 	bl	8002894 <__NVIC_SetPriorityGrouping>
}
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b086      	sub	sp, #24
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	4603      	mov	r3, r0
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	607a      	str	r2, [r7, #4]
 8002a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a54:	f7ff ff42 	bl	80028dc <__NVIC_GetPriorityGrouping>
 8002a58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	68b9      	ldr	r1, [r7, #8]
 8002a5e:	6978      	ldr	r0, [r7, #20]
 8002a60:	f7ff ff90 	bl	8002984 <NVIC_EncodePriority>
 8002a64:	4602      	mov	r2, r0
 8002a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff ff5f 	bl	8002930 <__NVIC_SetPriority>
}
 8002a72:	bf00      	nop
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	4603      	mov	r3, r0
 8002a82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff ff35 	bl	80028f8 <__NVIC_EnableIRQ>
}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7ff ffa2 	bl	80029e8 <SysTick_Config>
 8002aa4:	4603      	mov	r3, r0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b08b      	sub	sp, #44	@ 0x2c
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aba:	2300      	movs	r3, #0
 8002abc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ac2:	e169      	b.n	8002d98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	69fa      	ldr	r2, [r7, #28]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	f040 8158 	bne.w	8002d92 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	4a9a      	ldr	r2, [pc, #616]	@ (8002d50 <HAL_GPIO_Init+0x2a0>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d05e      	beq.n	8002baa <HAL_GPIO_Init+0xfa>
 8002aec:	4a98      	ldr	r2, [pc, #608]	@ (8002d50 <HAL_GPIO_Init+0x2a0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d875      	bhi.n	8002bde <HAL_GPIO_Init+0x12e>
 8002af2:	4a98      	ldr	r2, [pc, #608]	@ (8002d54 <HAL_GPIO_Init+0x2a4>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d058      	beq.n	8002baa <HAL_GPIO_Init+0xfa>
 8002af8:	4a96      	ldr	r2, [pc, #600]	@ (8002d54 <HAL_GPIO_Init+0x2a4>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d86f      	bhi.n	8002bde <HAL_GPIO_Init+0x12e>
 8002afe:	4a96      	ldr	r2, [pc, #600]	@ (8002d58 <HAL_GPIO_Init+0x2a8>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d052      	beq.n	8002baa <HAL_GPIO_Init+0xfa>
 8002b04:	4a94      	ldr	r2, [pc, #592]	@ (8002d58 <HAL_GPIO_Init+0x2a8>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d869      	bhi.n	8002bde <HAL_GPIO_Init+0x12e>
 8002b0a:	4a94      	ldr	r2, [pc, #592]	@ (8002d5c <HAL_GPIO_Init+0x2ac>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d04c      	beq.n	8002baa <HAL_GPIO_Init+0xfa>
 8002b10:	4a92      	ldr	r2, [pc, #584]	@ (8002d5c <HAL_GPIO_Init+0x2ac>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d863      	bhi.n	8002bde <HAL_GPIO_Init+0x12e>
 8002b16:	4a92      	ldr	r2, [pc, #584]	@ (8002d60 <HAL_GPIO_Init+0x2b0>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d046      	beq.n	8002baa <HAL_GPIO_Init+0xfa>
 8002b1c:	4a90      	ldr	r2, [pc, #576]	@ (8002d60 <HAL_GPIO_Init+0x2b0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d85d      	bhi.n	8002bde <HAL_GPIO_Init+0x12e>
 8002b22:	2b12      	cmp	r3, #18
 8002b24:	d82a      	bhi.n	8002b7c <HAL_GPIO_Init+0xcc>
 8002b26:	2b12      	cmp	r3, #18
 8002b28:	d859      	bhi.n	8002bde <HAL_GPIO_Init+0x12e>
 8002b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8002b30 <HAL_GPIO_Init+0x80>)
 8002b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b30:	08002bab 	.word	0x08002bab
 8002b34:	08002b85 	.word	0x08002b85
 8002b38:	08002b97 	.word	0x08002b97
 8002b3c:	08002bd9 	.word	0x08002bd9
 8002b40:	08002bdf 	.word	0x08002bdf
 8002b44:	08002bdf 	.word	0x08002bdf
 8002b48:	08002bdf 	.word	0x08002bdf
 8002b4c:	08002bdf 	.word	0x08002bdf
 8002b50:	08002bdf 	.word	0x08002bdf
 8002b54:	08002bdf 	.word	0x08002bdf
 8002b58:	08002bdf 	.word	0x08002bdf
 8002b5c:	08002bdf 	.word	0x08002bdf
 8002b60:	08002bdf 	.word	0x08002bdf
 8002b64:	08002bdf 	.word	0x08002bdf
 8002b68:	08002bdf 	.word	0x08002bdf
 8002b6c:	08002bdf 	.word	0x08002bdf
 8002b70:	08002bdf 	.word	0x08002bdf
 8002b74:	08002b8d 	.word	0x08002b8d
 8002b78:	08002ba1 	.word	0x08002ba1
 8002b7c:	4a79      	ldr	r2, [pc, #484]	@ (8002d64 <HAL_GPIO_Init+0x2b4>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d013      	beq.n	8002baa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b82:	e02c      	b.n	8002bde <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	623b      	str	r3, [r7, #32]
          break;
 8002b8a:	e029      	b.n	8002be0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	3304      	adds	r3, #4
 8002b92:	623b      	str	r3, [r7, #32]
          break;
 8002b94:	e024      	b.n	8002be0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	3308      	adds	r3, #8
 8002b9c:	623b      	str	r3, [r7, #32]
          break;
 8002b9e:	e01f      	b.n	8002be0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	330c      	adds	r3, #12
 8002ba6:	623b      	str	r3, [r7, #32]
          break;
 8002ba8:	e01a      	b.n	8002be0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d102      	bne.n	8002bb8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002bb2:	2304      	movs	r3, #4
 8002bb4:	623b      	str	r3, [r7, #32]
          break;
 8002bb6:	e013      	b.n	8002be0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d105      	bne.n	8002bcc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bc0:	2308      	movs	r3, #8
 8002bc2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	69fa      	ldr	r2, [r7, #28]
 8002bc8:	611a      	str	r2, [r3, #16]
          break;
 8002bca:	e009      	b.n	8002be0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bcc:	2308      	movs	r3, #8
 8002bce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69fa      	ldr	r2, [r7, #28]
 8002bd4:	615a      	str	r2, [r3, #20]
          break;
 8002bd6:	e003      	b.n	8002be0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	623b      	str	r3, [r7, #32]
          break;
 8002bdc:	e000      	b.n	8002be0 <HAL_GPIO_Init+0x130>
          break;
 8002bde:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	2bff      	cmp	r3, #255	@ 0xff
 8002be4:	d801      	bhi.n	8002bea <HAL_GPIO_Init+0x13a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	e001      	b.n	8002bee <HAL_GPIO_Init+0x13e>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3304      	adds	r3, #4
 8002bee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	2bff      	cmp	r3, #255	@ 0xff
 8002bf4:	d802      	bhi.n	8002bfc <HAL_GPIO_Init+0x14c>
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	e002      	b.n	8002c02 <HAL_GPIO_Init+0x152>
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfe:	3b08      	subs	r3, #8
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	210f      	movs	r1, #15
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	401a      	ands	r2, r3
 8002c14:	6a39      	ldr	r1, [r7, #32]
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 80b1 	beq.w	8002d92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c30:	4b4d      	ldr	r3, [pc, #308]	@ (8002d68 <HAL_GPIO_Init+0x2b8>)
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	4a4c      	ldr	r2, [pc, #304]	@ (8002d68 <HAL_GPIO_Init+0x2b8>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	6193      	str	r3, [r2, #24]
 8002c3c:	4b4a      	ldr	r3, [pc, #296]	@ (8002d68 <HAL_GPIO_Init+0x2b8>)
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c48:	4a48      	ldr	r2, [pc, #288]	@ (8002d6c <HAL_GPIO_Init+0x2bc>)
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4c:	089b      	lsrs	r3, r3, #2
 8002c4e:	3302      	adds	r3, #2
 8002c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	220f      	movs	r2, #15
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	43db      	mvns	r3, r3
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a40      	ldr	r2, [pc, #256]	@ (8002d70 <HAL_GPIO_Init+0x2c0>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d013      	beq.n	8002c9c <HAL_GPIO_Init+0x1ec>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a3f      	ldr	r2, [pc, #252]	@ (8002d74 <HAL_GPIO_Init+0x2c4>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d00d      	beq.n	8002c98 <HAL_GPIO_Init+0x1e8>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a3e      	ldr	r2, [pc, #248]	@ (8002d78 <HAL_GPIO_Init+0x2c8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d007      	beq.n	8002c94 <HAL_GPIO_Init+0x1e4>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a3d      	ldr	r2, [pc, #244]	@ (8002d7c <HAL_GPIO_Init+0x2cc>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d101      	bne.n	8002c90 <HAL_GPIO_Init+0x1e0>
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e006      	b.n	8002c9e <HAL_GPIO_Init+0x1ee>
 8002c90:	2304      	movs	r3, #4
 8002c92:	e004      	b.n	8002c9e <HAL_GPIO_Init+0x1ee>
 8002c94:	2302      	movs	r3, #2
 8002c96:	e002      	b.n	8002c9e <HAL_GPIO_Init+0x1ee>
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e000      	b.n	8002c9e <HAL_GPIO_Init+0x1ee>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ca0:	f002 0203 	and.w	r2, r2, #3
 8002ca4:	0092      	lsls	r2, r2, #2
 8002ca6:	4093      	lsls	r3, r2
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002cae:	492f      	ldr	r1, [pc, #188]	@ (8002d6c <HAL_GPIO_Init+0x2bc>)
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb2:	089b      	lsrs	r3, r3, #2
 8002cb4:	3302      	adds	r3, #2
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d006      	beq.n	8002cd6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002cc8:	4b2d      	ldr	r3, [pc, #180]	@ (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	492c      	ldr	r1, [pc, #176]	@ (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	608b      	str	r3, [r1, #8]
 8002cd4:	e006      	b.n	8002ce4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002cd6:	4b2a      	ldr	r3, [pc, #168]	@ (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	4928      	ldr	r1, [pc, #160]	@ (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d006      	beq.n	8002cfe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002cf0:	4b23      	ldr	r3, [pc, #140]	@ (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	4922      	ldr	r1, [pc, #136]	@ (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	60cb      	str	r3, [r1, #12]
 8002cfc:	e006      	b.n	8002d0c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002cfe:	4b20      	ldr	r3, [pc, #128]	@ (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	43db      	mvns	r3, r3
 8002d06:	491e      	ldr	r1, [pc, #120]	@ (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d006      	beq.n	8002d26 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d18:	4b19      	ldr	r3, [pc, #100]	@ (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	4918      	ldr	r1, [pc, #96]	@ (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	604b      	str	r3, [r1, #4]
 8002d24:	e006      	b.n	8002d34 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d26:	4b16      	ldr	r3, [pc, #88]	@ (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	4914      	ldr	r1, [pc, #80]	@ (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002d30:	4013      	ands	r3, r2
 8002d32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d021      	beq.n	8002d84 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d40:	4b0f      	ldr	r3, [pc, #60]	@ (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	490e      	ldr	r1, [pc, #56]	@ (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	600b      	str	r3, [r1, #0]
 8002d4c:	e021      	b.n	8002d92 <HAL_GPIO_Init+0x2e2>
 8002d4e:	bf00      	nop
 8002d50:	10320000 	.word	0x10320000
 8002d54:	10310000 	.word	0x10310000
 8002d58:	10220000 	.word	0x10220000
 8002d5c:	10210000 	.word	0x10210000
 8002d60:	10120000 	.word	0x10120000
 8002d64:	10110000 	.word	0x10110000
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	40010000 	.word	0x40010000
 8002d70:	40010800 	.word	0x40010800
 8002d74:	40010c00 	.word	0x40010c00
 8002d78:	40011000 	.word	0x40011000
 8002d7c:	40011400 	.word	0x40011400
 8002d80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d84:	4b0b      	ldr	r3, [pc, #44]	@ (8002db4 <HAL_GPIO_Init+0x304>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	4909      	ldr	r1, [pc, #36]	@ (8002db4 <HAL_GPIO_Init+0x304>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d94:	3301      	adds	r3, #1
 8002d96:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f47f ae8e 	bne.w	8002ac4 <HAL_GPIO_Init+0x14>
  }
}
 8002da8:	bf00      	nop
 8002daa:	bf00      	nop
 8002dac:	372c      	adds	r7, #44	@ 0x2c
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr
 8002db4:	40010400 	.word	0x40010400

08002db8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	887b      	ldrh	r3, [r7, #2]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	73fb      	strb	r3, [r7, #15]
 8002dd4:	e001      	b.n	8002dda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr

08002de6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	460b      	mov	r3, r1
 8002df0:	807b      	strh	r3, [r7, #2]
 8002df2:	4613      	mov	r3, r2
 8002df4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002df6:	787b      	ldrb	r3, [r7, #1]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dfc:	887a      	ldrh	r2, [r7, #2]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e02:	e003      	b.n	8002e0c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e04:	887b      	ldrh	r3, [r7, #2]
 8002e06:	041a      	lsls	r2, r3, #16
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	611a      	str	r2, [r3, #16]
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr
	...

08002e18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e12b      	b.n	8003082 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d106      	bne.n	8002e44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7fe fa2c 	bl	800129c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2224      	movs	r2, #36	@ 0x24
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0201 	bic.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e7c:	f001 fd5a 	bl	8004934 <HAL_RCC_GetPCLK1Freq>
 8002e80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	4a81      	ldr	r2, [pc, #516]	@ (800308c <HAL_I2C_Init+0x274>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d807      	bhi.n	8002e9c <HAL_I2C_Init+0x84>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4a80      	ldr	r2, [pc, #512]	@ (8003090 <HAL_I2C_Init+0x278>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	bf94      	ite	ls
 8002e94:	2301      	movls	r3, #1
 8002e96:	2300      	movhi	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	e006      	b.n	8002eaa <HAL_I2C_Init+0x92>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4a7d      	ldr	r2, [pc, #500]	@ (8003094 <HAL_I2C_Init+0x27c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	bf94      	ite	ls
 8002ea4:	2301      	movls	r3, #1
 8002ea6:	2300      	movhi	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e0e7      	b.n	8003082 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4a78      	ldr	r2, [pc, #480]	@ (8003098 <HAL_I2C_Init+0x280>)
 8002eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eba:	0c9b      	lsrs	r3, r3, #18
 8002ebc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	4a6a      	ldr	r2, [pc, #424]	@ (800308c <HAL_I2C_Init+0x274>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d802      	bhi.n	8002eec <HAL_I2C_Init+0xd4>
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	e009      	b.n	8002f00 <HAL_I2C_Init+0xe8>
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002ef2:	fb02 f303 	mul.w	r3, r2, r3
 8002ef6:	4a69      	ldr	r2, [pc, #420]	@ (800309c <HAL_I2C_Init+0x284>)
 8002ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8002efc:	099b      	lsrs	r3, r3, #6
 8002efe:	3301      	adds	r3, #1
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6812      	ldr	r2, [r2, #0]
 8002f04:	430b      	orrs	r3, r1
 8002f06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f12:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	495c      	ldr	r1, [pc, #368]	@ (800308c <HAL_I2C_Init+0x274>)
 8002f1c:	428b      	cmp	r3, r1
 8002f1e:	d819      	bhi.n	8002f54 <HAL_I2C_Init+0x13c>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	1e59      	subs	r1, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f2e:	1c59      	adds	r1, r3, #1
 8002f30:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f34:	400b      	ands	r3, r1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00a      	beq.n	8002f50 <HAL_I2C_Init+0x138>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	1e59      	subs	r1, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f48:	3301      	adds	r3, #1
 8002f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f4e:	e051      	b.n	8002ff4 <HAL_I2C_Init+0x1dc>
 8002f50:	2304      	movs	r3, #4
 8002f52:	e04f      	b.n	8002ff4 <HAL_I2C_Init+0x1dc>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d111      	bne.n	8002f80 <HAL_I2C_Init+0x168>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	1e58      	subs	r0, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6859      	ldr	r1, [r3, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	440b      	add	r3, r1
 8002f6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f6e:	3301      	adds	r3, #1
 8002f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	bf0c      	ite	eq
 8002f78:	2301      	moveq	r3, #1
 8002f7a:	2300      	movne	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	e012      	b.n	8002fa6 <HAL_I2C_Init+0x18e>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	1e58      	subs	r0, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6859      	ldr	r1, [r3, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	0099      	lsls	r1, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f96:	3301      	adds	r3, #1
 8002f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	bf0c      	ite	eq
 8002fa0:	2301      	moveq	r3, #1
 8002fa2:	2300      	movne	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_I2C_Init+0x196>
 8002faa:	2301      	movs	r3, #1
 8002fac:	e022      	b.n	8002ff4 <HAL_I2C_Init+0x1dc>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10e      	bne.n	8002fd4 <HAL_I2C_Init+0x1bc>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	1e58      	subs	r0, r3, #1
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6859      	ldr	r1, [r3, #4]
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	440b      	add	r3, r1
 8002fc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc8:	3301      	adds	r3, #1
 8002fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fd2:	e00f      	b.n	8002ff4 <HAL_I2C_Init+0x1dc>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	1e58      	subs	r0, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6859      	ldr	r1, [r3, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	0099      	lsls	r1, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fea:	3301      	adds	r3, #1
 8002fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	6809      	ldr	r1, [r1, #0]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69da      	ldr	r2, [r3, #28]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003022:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6911      	ldr	r1, [r2, #16]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	68d2      	ldr	r2, [r2, #12]
 800302e:	4311      	orrs	r1, r2
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	430b      	orrs	r3, r1
 8003036:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0201 	orr.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2220      	movs	r2, #32
 800306e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	000186a0 	.word	0x000186a0
 8003090:	001e847f 	.word	0x001e847f
 8003094:	003d08ff 	.word	0x003d08ff
 8003098:	431bde83 	.word	0x431bde83
 800309c:	10624dd3 	.word	0x10624dd3

080030a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b088      	sub	sp, #32
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	607a      	str	r2, [r7, #4]
 80030aa:	461a      	mov	r2, r3
 80030ac:	460b      	mov	r3, r1
 80030ae:	817b      	strh	r3, [r7, #10]
 80030b0:	4613      	mov	r3, r2
 80030b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030b4:	f7ff fbc0 	bl	8002838 <HAL_GetTick>
 80030b8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b20      	cmp	r3, #32
 80030c4:	f040 80e0 	bne.w	8003288 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	2319      	movs	r3, #25
 80030ce:	2201      	movs	r2, #1
 80030d0:	4970      	ldr	r1, [pc, #448]	@ (8003294 <HAL_I2C_Master_Transmit+0x1f4>)
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 fe2e 	bl	8003d34 <I2C_WaitOnFlagUntilTimeout>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80030de:	2302      	movs	r3, #2
 80030e0:	e0d3      	b.n	800328a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_I2C_Master_Transmit+0x50>
 80030ec:	2302      	movs	r3, #2
 80030ee:	e0cc      	b.n	800328a <HAL_I2C_Master_Transmit+0x1ea>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b01      	cmp	r3, #1
 8003104:	d007      	beq.n	8003116 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f042 0201 	orr.w	r2, r2, #1
 8003114:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003124:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2221      	movs	r2, #33	@ 0x21
 800312a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2210      	movs	r2, #16
 8003132:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	893a      	ldrh	r2, [r7, #8]
 8003146:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800314c:	b29a      	uxth	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4a50      	ldr	r2, [pc, #320]	@ (8003298 <HAL_I2C_Master_Transmit+0x1f8>)
 8003156:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003158:	8979      	ldrh	r1, [r7, #10]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	6a3a      	ldr	r2, [r7, #32]
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 fc02 	bl	8003968 <I2C_MasterRequestWrite>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e08d      	b.n	800328a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800316e:	2300      	movs	r3, #0
 8003170:	613b      	str	r3, [r7, #16]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	613b      	str	r3, [r7, #16]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	613b      	str	r3, [r7, #16]
 8003182:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003184:	e066      	b.n	8003254 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	6a39      	ldr	r1, [r7, #32]
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 feec 	bl	8003f68 <I2C_WaitOnTXEFlagUntilTimeout>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00d      	beq.n	80031b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319a:	2b04      	cmp	r3, #4
 800319c:	d107      	bne.n	80031ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e06b      	b.n	800328a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b6:	781a      	ldrb	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c2:	1c5a      	adds	r2, r3, #1
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d11b      	bne.n	8003228 <HAL_I2C_Master_Transmit+0x188>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d017      	beq.n	8003228 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fc:	781a      	ldrb	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003212:	b29b      	uxth	r3, r3
 8003214:	3b01      	subs	r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003220:	3b01      	subs	r3, #1
 8003222:	b29a      	uxth	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	6a39      	ldr	r1, [r7, #32]
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 fee3 	bl	8003ff8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00d      	beq.n	8003254 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323c:	2b04      	cmp	r3, #4
 800323e:	d107      	bne.n	8003250 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800324e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e01a      	b.n	800328a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003258:	2b00      	cmp	r3, #0
 800325a:	d194      	bne.n	8003186 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800326a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003284:	2300      	movs	r3, #0
 8003286:	e000      	b.n	800328a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003288:	2302      	movs	r3, #2
  }
}
 800328a:	4618      	mov	r0, r3
 800328c:	3718      	adds	r7, #24
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	00100002 	.word	0x00100002
 8003298:	ffff0000 	.word	0xffff0000

0800329c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b08c      	sub	sp, #48	@ 0x30
 80032a0:	af02      	add	r7, sp, #8
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	607a      	str	r2, [r7, #4]
 80032a6:	461a      	mov	r2, r3
 80032a8:	460b      	mov	r3, r1
 80032aa:	817b      	strh	r3, [r7, #10]
 80032ac:	4613      	mov	r3, r2
 80032ae:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032b4:	f7ff fac0 	bl	8002838 <HAL_GetTick>
 80032b8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b20      	cmp	r3, #32
 80032c4:	f040 824b 	bne.w	800375e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	2319      	movs	r3, #25
 80032ce:	2201      	movs	r2, #1
 80032d0:	497f      	ldr	r1, [pc, #508]	@ (80034d0 <HAL_I2C_Master_Receive+0x234>)
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 fd2e 	bl	8003d34 <I2C_WaitOnFlagUntilTimeout>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80032de:	2302      	movs	r3, #2
 80032e0:	e23e      	b.n	8003760 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d101      	bne.n	80032f0 <HAL_I2C_Master_Receive+0x54>
 80032ec:	2302      	movs	r3, #2
 80032ee:	e237      	b.n	8003760 <HAL_I2C_Master_Receive+0x4c4>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b01      	cmp	r3, #1
 8003304:	d007      	beq.n	8003316 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f042 0201 	orr.w	r2, r2, #1
 8003314:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003324:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2222      	movs	r2, #34	@ 0x22
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2210      	movs	r2, #16
 8003332:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	893a      	ldrh	r2, [r7, #8]
 8003346:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800334c:	b29a      	uxth	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	4a5f      	ldr	r2, [pc, #380]	@ (80034d4 <HAL_I2C_Master_Receive+0x238>)
 8003356:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003358:	8979      	ldrh	r1, [r7, #10]
 800335a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 fb84 	bl	8003a6c <I2C_MasterRequestRead>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e1f8      	b.n	8003760 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003372:	2b00      	cmp	r3, #0
 8003374:	d113      	bne.n	800339e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003376:	2300      	movs	r3, #0
 8003378:	61fb      	str	r3, [r7, #28]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	61fb      	str	r3, [r7, #28]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	e1cc      	b.n	8003738 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d11e      	bne.n	80033e4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033b4:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033b6:	b672      	cpsid	i
}
 80033b8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ba:	2300      	movs	r3, #0
 80033bc:	61bb      	str	r3, [r7, #24]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	61bb      	str	r3, [r7, #24]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	61bb      	str	r3, [r7, #24]
 80033ce:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80033e0:	b662      	cpsie	i
}
 80033e2:	e035      	b.n	8003450 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d11e      	bne.n	800342a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80033fc:	b672      	cpsid	i
}
 80033fe:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003424:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003426:	b662      	cpsie	i
}
 8003428:	e012      	b.n	8003450 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003438:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800343a:	2300      	movs	r3, #0
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003450:	e172      	b.n	8003738 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003456:	2b03      	cmp	r3, #3
 8003458:	f200 811f 	bhi.w	800369a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003460:	2b01      	cmp	r3, #1
 8003462:	d123      	bne.n	80034ac <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003466:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 fe0d 	bl	8004088 <I2C_WaitOnRXNEFlagUntilTimeout>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e173      	b.n	8003760 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691a      	ldr	r2, [r3, #16]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348a:	1c5a      	adds	r2, r3, #1
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003494:	3b01      	subs	r3, #1
 8003496:	b29a      	uxth	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	3b01      	subs	r3, #1
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80034aa:	e145      	b.n	8003738 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d152      	bne.n	800355a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ba:	2200      	movs	r2, #0
 80034bc:	4906      	ldr	r1, [pc, #24]	@ (80034d8 <HAL_I2C_Master_Receive+0x23c>)
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 fc38 	bl	8003d34 <I2C_WaitOnFlagUntilTimeout>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d008      	beq.n	80034dc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e148      	b.n	8003760 <HAL_I2C_Master_Receive+0x4c4>
 80034ce:	bf00      	nop
 80034d0:	00100002 	.word	0x00100002
 80034d4:	ffff0000 	.word	0xffff0000
 80034d8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80034dc:	b672      	cpsid	i
}
 80034de:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691a      	ldr	r2, [r3, #16]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800350c:	3b01      	subs	r3, #1
 800350e:	b29a      	uxth	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003518:	b29b      	uxth	r3, r3
 800351a:	3b01      	subs	r3, #1
 800351c:	b29a      	uxth	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003522:	b662      	cpsie	i
}
 8003524:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003538:	1c5a      	adds	r2, r3, #1
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003542:	3b01      	subs	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800354e:	b29b      	uxth	r3, r3
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003558:	e0ee      	b.n	8003738 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800355a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003560:	2200      	movs	r2, #0
 8003562:	4981      	ldr	r1, [pc, #516]	@ (8003768 <HAL_I2C_Master_Receive+0x4cc>)
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 fbe5 	bl	8003d34 <I2C_WaitOnFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e0f5      	b.n	8003760 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003582:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003584:	b672      	cpsid	i
}
 8003586:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691a      	ldr	r2, [r3, #16]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359a:	1c5a      	adds	r2, r3, #1
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80035ba:	4b6c      	ldr	r3, [pc, #432]	@ (800376c <HAL_I2C_Master_Receive+0x4d0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	08db      	lsrs	r3, r3, #3
 80035c0:	4a6b      	ldr	r2, [pc, #428]	@ (8003770 <HAL_I2C_Master_Receive+0x4d4>)
 80035c2:	fba2 2303 	umull	r2, r3, r2, r3
 80035c6:	0a1a      	lsrs	r2, r3, #8
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	00da      	lsls	r2, r3, #3
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d118      	bne.n	8003612 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fa:	f043 0220 	orr.w	r2, r3, #32
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003602:	b662      	cpsie	i
}
 8003604:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e0a6      	b.n	8003760 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b04      	cmp	r3, #4
 800361e:	d1d9      	bne.n	80035d4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800362e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691a      	ldr	r2, [r3, #16]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800364c:	3b01      	subs	r3, #1
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003658:	b29b      	uxth	r3, r3
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003662:	b662      	cpsie	i
}
 8003664:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003682:	3b01      	subs	r3, #1
 8003684:	b29a      	uxth	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003698:	e04e      	b.n	8003738 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800369a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800369c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 fcf2 	bl	8004088 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e058      	b.n	8003760 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f003 0304 	and.w	r3, r3, #4
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d124      	bne.n	8003738 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d107      	bne.n	8003706 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003704:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	691a      	ldr	r2, [r3, #16]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800373c:	2b00      	cmp	r3, #0
 800373e:	f47f ae88 	bne.w	8003452 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2220      	movs	r2, #32
 8003746:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	e000      	b.n	8003760 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800375e:	2302      	movs	r3, #2
  }
}
 8003760:	4618      	mov	r0, r3
 8003762:	3728      	adds	r7, #40	@ 0x28
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	00010004 	.word	0x00010004
 800376c:	20000000 	.word	0x20000000
 8003770:	14f8b589 	.word	0x14f8b589

08003774 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af02      	add	r7, sp, #8
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	4608      	mov	r0, r1
 800377e:	4611      	mov	r1, r2
 8003780:	461a      	mov	r2, r3
 8003782:	4603      	mov	r3, r0
 8003784:	817b      	strh	r3, [r7, #10]
 8003786:	460b      	mov	r3, r1
 8003788:	813b      	strh	r3, [r7, #8]
 800378a:	4613      	mov	r3, r2
 800378c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800378e:	f7ff f853 	bl	8002838 <HAL_GetTick>
 8003792:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b20      	cmp	r3, #32
 800379e:	f040 80d9 	bne.w	8003954 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	2319      	movs	r3, #25
 80037a8:	2201      	movs	r2, #1
 80037aa:	496d      	ldr	r1, [pc, #436]	@ (8003960 <HAL_I2C_Mem_Write+0x1ec>)
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 fac1 	bl	8003d34 <I2C_WaitOnFlagUntilTimeout>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80037b8:	2302      	movs	r3, #2
 80037ba:	e0cc      	b.n	8003956 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d101      	bne.n	80037ca <HAL_I2C_Mem_Write+0x56>
 80037c6:	2302      	movs	r3, #2
 80037c8:	e0c5      	b.n	8003956 <HAL_I2C_Mem_Write+0x1e2>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d007      	beq.n	80037f0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0201 	orr.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2221      	movs	r2, #33	@ 0x21
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2240      	movs	r2, #64	@ 0x40
 800380c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6a3a      	ldr	r2, [r7, #32]
 800381a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003820:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003826:	b29a      	uxth	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4a4d      	ldr	r2, [pc, #308]	@ (8003964 <HAL_I2C_Mem_Write+0x1f0>)
 8003830:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003832:	88f8      	ldrh	r0, [r7, #6]
 8003834:	893a      	ldrh	r2, [r7, #8]
 8003836:	8979      	ldrh	r1, [r7, #10]
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	9301      	str	r3, [sp, #4]
 800383c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	4603      	mov	r3, r0
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 f9e0 	bl	8003c08 <I2C_RequestMemoryWrite>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d052      	beq.n	80038f4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e081      	b.n	8003956 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 fb86 	bl	8003f68 <I2C_WaitOnTXEFlagUntilTimeout>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00d      	beq.n	800387e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003866:	2b04      	cmp	r3, #4
 8003868:	d107      	bne.n	800387a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003878:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e06b      	b.n	8003956 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003882:	781a      	ldrb	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d11b      	bne.n	80038f4 <HAL_I2C_Mem_Write+0x180>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d017      	beq.n	80038f4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c8:	781a      	ldrb	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d4:	1c5a      	adds	r2, r3, #1
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038de:	3b01      	subs	r3, #1
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1aa      	bne.n	8003852 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 fb79 	bl	8003ff8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00d      	beq.n	8003928 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003910:	2b04      	cmp	r3, #4
 8003912:	d107      	bne.n	8003924 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003922:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e016      	b.n	8003956 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003936:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	e000      	b.n	8003956 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003954:	2302      	movs	r3, #2
  }
}
 8003956:	4618      	mov	r0, r3
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	00100002 	.word	0x00100002
 8003964:	ffff0000 	.word	0xffff0000

08003968 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b088      	sub	sp, #32
 800396c:	af02      	add	r7, sp, #8
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	607a      	str	r2, [r7, #4]
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	460b      	mov	r3, r1
 8003976:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800397c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2b08      	cmp	r3, #8
 8003982:	d006      	beq.n	8003992 <I2C_MasterRequestWrite+0x2a>
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d003      	beq.n	8003992 <I2C_MasterRequestWrite+0x2a>
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003990:	d108      	bne.n	80039a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	e00b      	b.n	80039bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a8:	2b12      	cmp	r3, #18
 80039aa:	d107      	bne.n	80039bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 f9b3 	bl	8003d34 <I2C_WaitOnFlagUntilTimeout>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00d      	beq.n	80039f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039e2:	d103      	bne.n	80039ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e035      	b.n	8003a5c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039f8:	d108      	bne.n	8003a0c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039fa:	897b      	ldrh	r3, [r7, #10]
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	461a      	mov	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a08:	611a      	str	r2, [r3, #16]
 8003a0a:	e01b      	b.n	8003a44 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a0c:	897b      	ldrh	r3, [r7, #10]
 8003a0e:	11db      	asrs	r3, r3, #7
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	f003 0306 	and.w	r3, r3, #6
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	f063 030f 	orn	r3, r3, #15
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	490e      	ldr	r1, [pc, #56]	@ (8003a64 <I2C_MasterRequestWrite+0xfc>)
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f9fc 	bl	8003e28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e010      	b.n	8003a5c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a3a:	897b      	ldrh	r3, [r7, #10]
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	4907      	ldr	r1, [pc, #28]	@ (8003a68 <I2C_MasterRequestWrite+0x100>)
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 f9ec 	bl	8003e28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e000      	b.n	8003a5c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	00010008 	.word	0x00010008
 8003a68:	00010002 	.word	0x00010002

08003a6c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b088      	sub	sp, #32
 8003a70:	af02      	add	r7, sp, #8
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	607a      	str	r2, [r7, #4]
 8003a76:	603b      	str	r3, [r7, #0]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a80:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a90:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2b08      	cmp	r3, #8
 8003a96:	d006      	beq.n	8003aa6 <I2C_MasterRequestRead+0x3a>
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d003      	beq.n	8003aa6 <I2C_MasterRequestRead+0x3a>
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003aa4:	d108      	bne.n	8003ab8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	e00b      	b.n	8003ad0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003abc:	2b11      	cmp	r3, #17
 8003abe:	d107      	bne.n	8003ad0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ace:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 f929 	bl	8003d34 <I2C_WaitOnFlagUntilTimeout>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00d      	beq.n	8003b04 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003af6:	d103      	bne.n	8003b00 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003afe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e079      	b.n	8003bf8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b0c:	d108      	bne.n	8003b20 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b0e:	897b      	ldrh	r3, [r7, #10]
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	f043 0301 	orr.w	r3, r3, #1
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	611a      	str	r2, [r3, #16]
 8003b1e:	e05f      	b.n	8003be0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b20:	897b      	ldrh	r3, [r7, #10]
 8003b22:	11db      	asrs	r3, r3, #7
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	f003 0306 	and.w	r3, r3, #6
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	f063 030f 	orn	r3, r3, #15
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	4930      	ldr	r1, [pc, #192]	@ (8003c00 <I2C_MasterRequestRead+0x194>)
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 f972 	bl	8003e28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e054      	b.n	8003bf8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b4e:	897b      	ldrh	r3, [r7, #10]
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	4929      	ldr	r1, [pc, #164]	@ (8003c04 <I2C_MasterRequestRead+0x198>)
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 f962 	bl	8003e28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e044      	b.n	8003bf8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b6e:	2300      	movs	r3, #0
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	613b      	str	r3, [r7, #16]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	613b      	str	r3, [r7, #16]
 8003b82:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b92:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 f8c7 	bl	8003d34 <I2C_WaitOnFlagUntilTimeout>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00d      	beq.n	8003bc8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bba:	d103      	bne.n	8003bc4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bc2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e017      	b.n	8003bf8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003bc8:	897b      	ldrh	r3, [r7, #10]
 8003bca:	11db      	asrs	r3, r3, #7
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	f003 0306 	and.w	r3, r3, #6
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	f063 030e 	orn	r3, r3, #14
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	4907      	ldr	r1, [pc, #28]	@ (8003c04 <I2C_MasterRequestRead+0x198>)
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 f91e 	bl	8003e28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e000      	b.n	8003bf8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	00010008 	.word	0x00010008
 8003c04:	00010002 	.word	0x00010002

08003c08 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af02      	add	r7, sp, #8
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	4608      	mov	r0, r1
 8003c12:	4611      	mov	r1, r2
 8003c14:	461a      	mov	r2, r3
 8003c16:	4603      	mov	r3, r0
 8003c18:	817b      	strh	r3, [r7, #10]
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	813b      	strh	r3, [r7, #8]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 f878 	bl	8003d34 <I2C_WaitOnFlagUntilTimeout>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00d      	beq.n	8003c66 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c58:	d103      	bne.n	8003c62 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c60:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e05f      	b.n	8003d26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c66:	897b      	ldrh	r3, [r7, #10]
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c78:	6a3a      	ldr	r2, [r7, #32]
 8003c7a:	492d      	ldr	r1, [pc, #180]	@ (8003d30 <I2C_RequestMemoryWrite+0x128>)
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 f8d3 	bl	8003e28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e04c      	b.n	8003d26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca4:	6a39      	ldr	r1, [r7, #32]
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 f95e 	bl	8003f68 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00d      	beq.n	8003cce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d107      	bne.n	8003cca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e02b      	b.n	8003d26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cce:	88fb      	ldrh	r3, [r7, #6]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d105      	bne.n	8003ce0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cd4:	893b      	ldrh	r3, [r7, #8]
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	611a      	str	r2, [r3, #16]
 8003cde:	e021      	b.n	8003d24 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ce0:	893b      	ldrh	r3, [r7, #8]
 8003ce2:	0a1b      	lsrs	r3, r3, #8
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	b2da      	uxtb	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cf0:	6a39      	ldr	r1, [r7, #32]
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 f938 	bl	8003f68 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00d      	beq.n	8003d1a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d107      	bne.n	8003d16 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e005      	b.n	8003d26 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d1a:	893b      	ldrh	r3, [r7, #8]
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	00010002 	.word	0x00010002

08003d34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	603b      	str	r3, [r7, #0]
 8003d40:	4613      	mov	r3, r2
 8003d42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d44:	e048      	b.n	8003dd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4c:	d044      	beq.n	8003dd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4e:	f7fe fd73 	bl	8002838 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d302      	bcc.n	8003d64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d139      	bne.n	8003dd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	0c1b      	lsrs	r3, r3, #16
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d10d      	bne.n	8003d8a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	43da      	mvns	r2, r3
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	bf0c      	ite	eq
 8003d80:	2301      	moveq	r3, #1
 8003d82:	2300      	movne	r3, #0
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	461a      	mov	r2, r3
 8003d88:	e00c      	b.n	8003da4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	43da      	mvns	r2, r3
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	4013      	ands	r3, r2
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	bf0c      	ite	eq
 8003d9c:	2301      	moveq	r3, #1
 8003d9e:	2300      	movne	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	461a      	mov	r2, r3
 8003da4:	79fb      	ldrb	r3, [r7, #7]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d116      	bne.n	8003dd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc4:	f043 0220 	orr.w	r2, r3, #32
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e023      	b.n	8003e20 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	0c1b      	lsrs	r3, r3, #16
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d10d      	bne.n	8003dfe <I2C_WaitOnFlagUntilTimeout+0xca>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	43da      	mvns	r2, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	4013      	ands	r3, r2
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	bf0c      	ite	eq
 8003df4:	2301      	moveq	r3, #1
 8003df6:	2300      	movne	r3, #0
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	e00c      	b.n	8003e18 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	43da      	mvns	r2, r3
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	bf0c      	ite	eq
 8003e10:	2301      	moveq	r3, #1
 8003e12:	2300      	movne	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	461a      	mov	r2, r3
 8003e18:	79fb      	ldrb	r3, [r7, #7]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d093      	beq.n	8003d46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
 8003e34:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e36:	e071      	b.n	8003f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e46:	d123      	bne.n	8003e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e56:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7c:	f043 0204 	orr.w	r2, r3, #4
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e067      	b.n	8003f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e96:	d041      	beq.n	8003f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e98:	f7fe fcce 	bl	8002838 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d302      	bcc.n	8003eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d136      	bne.n	8003f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	0c1b      	lsrs	r3, r3, #16
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d10c      	bne.n	8003ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	43da      	mvns	r2, r3
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	bf14      	ite	ne
 8003eca:	2301      	movne	r3, #1
 8003ecc:	2300      	moveq	r3, #0
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	e00b      	b.n	8003eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	43da      	mvns	r2, r3
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	4013      	ands	r3, r2
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	bf14      	ite	ne
 8003ee4:	2301      	movne	r3, #1
 8003ee6:	2300      	moveq	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d016      	beq.n	8003f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f08:	f043 0220 	orr.w	r2, r3, #32
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e021      	b.n	8003f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	0c1b      	lsrs	r3, r3, #16
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d10c      	bne.n	8003f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	43da      	mvns	r2, r3
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	4013      	ands	r3, r2
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	bf14      	ite	ne
 8003f38:	2301      	movne	r3, #1
 8003f3a:	2300      	moveq	r3, #0
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	e00b      	b.n	8003f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	43da      	mvns	r2, r3
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	bf14      	ite	ne
 8003f52:	2301      	movne	r3, #1
 8003f54:	2300      	moveq	r3, #0
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f47f af6d 	bne.w	8003e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f74:	e034      	b.n	8003fe0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 f8e3 	bl	8004142 <I2C_IsAcknowledgeFailed>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e034      	b.n	8003ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8c:	d028      	beq.n	8003fe0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f8e:	f7fe fc53 	bl	8002838 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d302      	bcc.n	8003fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d11d      	bne.n	8003fe0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fae:	2b80      	cmp	r3, #128	@ 0x80
 8003fb0:	d016      	beq.n	8003fe0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fcc:	f043 0220 	orr.w	r2, r3, #32
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e007      	b.n	8003ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fea:	2b80      	cmp	r3, #128	@ 0x80
 8003fec:	d1c3      	bne.n	8003f76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004004:	e034      	b.n	8004070 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 f89b 	bl	8004142 <I2C_IsAcknowledgeFailed>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e034      	b.n	8004080 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401c:	d028      	beq.n	8004070 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800401e:	f7fe fc0b 	bl	8002838 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	429a      	cmp	r2, r3
 800402c:	d302      	bcc.n	8004034 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d11d      	bne.n	8004070 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	f003 0304 	and.w	r3, r3, #4
 800403e:	2b04      	cmp	r3, #4
 8004040:	d016      	beq.n	8004070 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2220      	movs	r2, #32
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405c:	f043 0220 	orr.w	r2, r3, #32
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e007      	b.n	8004080 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	f003 0304 	and.w	r3, r3, #4
 800407a:	2b04      	cmp	r3, #4
 800407c:	d1c3      	bne.n	8004006 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004094:	e049      	b.n	800412a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	f003 0310 	and.w	r3, r3, #16
 80040a0:	2b10      	cmp	r3, #16
 80040a2:	d119      	bne.n	80040d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f06f 0210 	mvn.w	r2, #16
 80040ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e030      	b.n	800413a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040d8:	f7fe fbae 	bl	8002838 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d302      	bcc.n	80040ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d11d      	bne.n	800412a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f8:	2b40      	cmp	r3, #64	@ 0x40
 80040fa:	d016      	beq.n	800412a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2220      	movs	r2, #32
 8004106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004116:	f043 0220 	orr.w	r2, r3, #32
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e007      	b.n	800413a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004134:	2b40      	cmp	r3, #64	@ 0x40
 8004136:	d1ae      	bne.n	8004096 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004154:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004158:	d11b      	bne.n	8004192 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004162:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2220      	movs	r2, #32
 800416e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417e:	f043 0204 	orr.w	r2, r3, #4
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e000      	b.n	8004194 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	bc80      	pop	{r7}
 800419c:	4770      	bx	lr
	...

080041a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e272      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 8087 	beq.w	80042ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041c0:	4b92      	ldr	r3, [pc, #584]	@ (800440c <HAL_RCC_OscConfig+0x26c>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f003 030c 	and.w	r3, r3, #12
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d00c      	beq.n	80041e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041cc:	4b8f      	ldr	r3, [pc, #572]	@ (800440c <HAL_RCC_OscConfig+0x26c>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f003 030c 	and.w	r3, r3, #12
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d112      	bne.n	80041fe <HAL_RCC_OscConfig+0x5e>
 80041d8:	4b8c      	ldr	r3, [pc, #560]	@ (800440c <HAL_RCC_OscConfig+0x26c>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041e4:	d10b      	bne.n	80041fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e6:	4b89      	ldr	r3, [pc, #548]	@ (800440c <HAL_RCC_OscConfig+0x26c>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d06c      	beq.n	80042cc <HAL_RCC_OscConfig+0x12c>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d168      	bne.n	80042cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e24c      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004206:	d106      	bne.n	8004216 <HAL_RCC_OscConfig+0x76>
 8004208:	4b80      	ldr	r3, [pc, #512]	@ (800440c <HAL_RCC_OscConfig+0x26c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a7f      	ldr	r2, [pc, #508]	@ (800440c <HAL_RCC_OscConfig+0x26c>)
 800420e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004212:	6013      	str	r3, [r2, #0]
 8004214:	e02e      	b.n	8004274 <HAL_RCC_OscConfig+0xd4>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10c      	bne.n	8004238 <HAL_RCC_OscConfig+0x98>
 800421e:	4b7b      	ldr	r3, [pc, #492]	@ (800440c <HAL_RCC_OscConfig+0x26c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a7a      	ldr	r2, [pc, #488]	@ (800440c <HAL_RCC_OscConfig+0x26c>)
 8004224:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	4b78      	ldr	r3, [pc, #480]	@ (800440c <HAL_RCC_OscConfig+0x26c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a77      	ldr	r2, [pc, #476]	@ (800440c <HAL_RCC_OscConfig+0x26c>)
 8004230:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	e01d      	b.n	8004274 <HAL_RCC_OscConfig+0xd4>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004240:	d10c      	bne.n	800425c <HAL_RCC_OscConfig+0xbc>
 8004242:	4b72      	ldr	r3, [pc, #456]	@ (800440c <HAL_RCC_OscConfig+0x26c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a71      	ldr	r2, [pc, #452]	@ (800440c <HAL_RCC_OscConfig+0x26c>)
 8004248:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800424c:	6013      	str	r3, [r2, #0]
 800424e:	4b6f      	ldr	r3, [pc, #444]	@ (800440c <HAL_RCC_OscConfig+0x26c>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a6e      	ldr	r2, [pc, #440]	@ (800440c <HAL_RCC_OscConfig+0x26c>)
 8004254:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	e00b      	b.n	8004274 <HAL_RCC_OscConfig+0xd4>
 800425c:	4b6b      	ldr	r3, [pc, #428]	@ (800440c <HAL_RCC_OscConfig+0x26c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a6a      	ldr	r2, [pc, #424]	@ (800440c <HAL_RCC_OscConfig+0x26c>)
 8004262:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004266:	6013      	str	r3, [r2, #0]
 8004268:	4b68      	ldr	r3, [pc, #416]	@ (800440c <HAL_RCC_OscConfig+0x26c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a67      	ldr	r2, [pc, #412]	@ (800440c <HAL_RCC_OscConfig+0x26c>)
 800426e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004272:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d013      	beq.n	80042a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427c:	f7fe fadc 	bl	8002838 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004284:	f7fe fad8 	bl	8002838 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b64      	cmp	r3, #100	@ 0x64
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e200      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004296:	4b5d      	ldr	r3, [pc, #372]	@ (800440c <HAL_RCC_OscConfig+0x26c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0f0      	beq.n	8004284 <HAL_RCC_OscConfig+0xe4>
 80042a2:	e014      	b.n	80042ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a4:	f7fe fac8 	bl	8002838 <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042ac:	f7fe fac4 	bl	8002838 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b64      	cmp	r3, #100	@ 0x64
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e1ec      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042be:	4b53      	ldr	r3, [pc, #332]	@ (800440c <HAL_RCC_OscConfig+0x26c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1f0      	bne.n	80042ac <HAL_RCC_OscConfig+0x10c>
 80042ca:	e000      	b.n	80042ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d063      	beq.n	80043a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042da:	4b4c      	ldr	r3, [pc, #304]	@ (800440c <HAL_RCC_OscConfig+0x26c>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f003 030c 	and.w	r3, r3, #12
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00b      	beq.n	80042fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80042e6:	4b49      	ldr	r3, [pc, #292]	@ (800440c <HAL_RCC_OscConfig+0x26c>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f003 030c 	and.w	r3, r3, #12
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d11c      	bne.n	800432c <HAL_RCC_OscConfig+0x18c>
 80042f2:	4b46      	ldr	r3, [pc, #280]	@ (800440c <HAL_RCC_OscConfig+0x26c>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d116      	bne.n	800432c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042fe:	4b43      	ldr	r3, [pc, #268]	@ (800440c <HAL_RCC_OscConfig+0x26c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d005      	beq.n	8004316 <HAL_RCC_OscConfig+0x176>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d001      	beq.n	8004316 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e1c0      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004316:	4b3d      	ldr	r3, [pc, #244]	@ (800440c <HAL_RCC_OscConfig+0x26c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	4939      	ldr	r1, [pc, #228]	@ (800440c <HAL_RCC_OscConfig+0x26c>)
 8004326:	4313      	orrs	r3, r2
 8004328:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800432a:	e03a      	b.n	80043a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d020      	beq.n	8004376 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004334:	4b36      	ldr	r3, [pc, #216]	@ (8004410 <HAL_RCC_OscConfig+0x270>)
 8004336:	2201      	movs	r2, #1
 8004338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433a:	f7fe fa7d 	bl	8002838 <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004342:	f7fe fa79 	bl	8002838 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e1a1      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004354:	4b2d      	ldr	r3, [pc, #180]	@ (800440c <HAL_RCC_OscConfig+0x26c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0f0      	beq.n	8004342 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004360:	4b2a      	ldr	r3, [pc, #168]	@ (800440c <HAL_RCC_OscConfig+0x26c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	4927      	ldr	r1, [pc, #156]	@ (800440c <HAL_RCC_OscConfig+0x26c>)
 8004370:	4313      	orrs	r3, r2
 8004372:	600b      	str	r3, [r1, #0]
 8004374:	e015      	b.n	80043a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004376:	4b26      	ldr	r3, [pc, #152]	@ (8004410 <HAL_RCC_OscConfig+0x270>)
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437c:	f7fe fa5c 	bl	8002838 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004384:	f7fe fa58 	bl	8002838 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e180      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004396:	4b1d      	ldr	r3, [pc, #116]	@ (800440c <HAL_RCC_OscConfig+0x26c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1f0      	bne.n	8004384 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0308 	and.w	r3, r3, #8
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d03a      	beq.n	8004424 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d019      	beq.n	80043ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043b6:	4b17      	ldr	r3, [pc, #92]	@ (8004414 <HAL_RCC_OscConfig+0x274>)
 80043b8:	2201      	movs	r2, #1
 80043ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043bc:	f7fe fa3c 	bl	8002838 <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043c4:	f7fe fa38 	bl	8002838 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e160      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d6:	4b0d      	ldr	r3, [pc, #52]	@ (800440c <HAL_RCC_OscConfig+0x26c>)
 80043d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0f0      	beq.n	80043c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80043e2:	2001      	movs	r0, #1
 80043e4:	f000 face 	bl	8004984 <RCC_Delay>
 80043e8:	e01c      	b.n	8004424 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004414 <HAL_RCC_OscConfig+0x274>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043f0:	f7fe fa22 	bl	8002838 <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f6:	e00f      	b.n	8004418 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043f8:	f7fe fa1e 	bl	8002838 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d908      	bls.n	8004418 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e146      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>
 800440a:	bf00      	nop
 800440c:	40021000 	.word	0x40021000
 8004410:	42420000 	.word	0x42420000
 8004414:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004418:	4b92      	ldr	r3, [pc, #584]	@ (8004664 <HAL_RCC_OscConfig+0x4c4>)
 800441a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1e9      	bne.n	80043f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 80a6 	beq.w	800457e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004432:	2300      	movs	r3, #0
 8004434:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004436:	4b8b      	ldr	r3, [pc, #556]	@ (8004664 <HAL_RCC_OscConfig+0x4c4>)
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10d      	bne.n	800445e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004442:	4b88      	ldr	r3, [pc, #544]	@ (8004664 <HAL_RCC_OscConfig+0x4c4>)
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	4a87      	ldr	r2, [pc, #540]	@ (8004664 <HAL_RCC_OscConfig+0x4c4>)
 8004448:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800444c:	61d3      	str	r3, [r2, #28]
 800444e:	4b85      	ldr	r3, [pc, #532]	@ (8004664 <HAL_RCC_OscConfig+0x4c4>)
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004456:	60bb      	str	r3, [r7, #8]
 8004458:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800445a:	2301      	movs	r3, #1
 800445c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800445e:	4b82      	ldr	r3, [pc, #520]	@ (8004668 <HAL_RCC_OscConfig+0x4c8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004466:	2b00      	cmp	r3, #0
 8004468:	d118      	bne.n	800449c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800446a:	4b7f      	ldr	r3, [pc, #508]	@ (8004668 <HAL_RCC_OscConfig+0x4c8>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a7e      	ldr	r2, [pc, #504]	@ (8004668 <HAL_RCC_OscConfig+0x4c8>)
 8004470:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004474:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004476:	f7fe f9df 	bl	8002838 <HAL_GetTick>
 800447a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800447c:	e008      	b.n	8004490 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800447e:	f7fe f9db 	bl	8002838 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b64      	cmp	r3, #100	@ 0x64
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e103      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004490:	4b75      	ldr	r3, [pc, #468]	@ (8004668 <HAL_RCC_OscConfig+0x4c8>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0f0      	beq.n	800447e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d106      	bne.n	80044b2 <HAL_RCC_OscConfig+0x312>
 80044a4:	4b6f      	ldr	r3, [pc, #444]	@ (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	4a6e      	ldr	r2, [pc, #440]	@ (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80044aa:	f043 0301 	orr.w	r3, r3, #1
 80044ae:	6213      	str	r3, [r2, #32]
 80044b0:	e02d      	b.n	800450e <HAL_RCC_OscConfig+0x36e>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10c      	bne.n	80044d4 <HAL_RCC_OscConfig+0x334>
 80044ba:	4b6a      	ldr	r3, [pc, #424]	@ (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	4a69      	ldr	r2, [pc, #420]	@ (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80044c0:	f023 0301 	bic.w	r3, r3, #1
 80044c4:	6213      	str	r3, [r2, #32]
 80044c6:	4b67      	ldr	r3, [pc, #412]	@ (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	4a66      	ldr	r2, [pc, #408]	@ (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80044cc:	f023 0304 	bic.w	r3, r3, #4
 80044d0:	6213      	str	r3, [r2, #32]
 80044d2:	e01c      	b.n	800450e <HAL_RCC_OscConfig+0x36e>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	2b05      	cmp	r3, #5
 80044da:	d10c      	bne.n	80044f6 <HAL_RCC_OscConfig+0x356>
 80044dc:	4b61      	ldr	r3, [pc, #388]	@ (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	4a60      	ldr	r2, [pc, #384]	@ (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80044e2:	f043 0304 	orr.w	r3, r3, #4
 80044e6:	6213      	str	r3, [r2, #32]
 80044e8:	4b5e      	ldr	r3, [pc, #376]	@ (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	4a5d      	ldr	r2, [pc, #372]	@ (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	6213      	str	r3, [r2, #32]
 80044f4:	e00b      	b.n	800450e <HAL_RCC_OscConfig+0x36e>
 80044f6:	4b5b      	ldr	r3, [pc, #364]	@ (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	4a5a      	ldr	r2, [pc, #360]	@ (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80044fc:	f023 0301 	bic.w	r3, r3, #1
 8004500:	6213      	str	r3, [r2, #32]
 8004502:	4b58      	ldr	r3, [pc, #352]	@ (8004664 <HAL_RCC_OscConfig+0x4c4>)
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	4a57      	ldr	r2, [pc, #348]	@ (8004664 <HAL_RCC_OscConfig+0x4c4>)
 8004508:	f023 0304 	bic.w	r3, r3, #4
 800450c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d015      	beq.n	8004542 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004516:	f7fe f98f 	bl	8002838 <HAL_GetTick>
 800451a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451c:	e00a      	b.n	8004534 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800451e:	f7fe f98b 	bl	8002838 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	f241 3288 	movw	r2, #5000	@ 0x1388
 800452c:	4293      	cmp	r3, r2
 800452e:	d901      	bls.n	8004534 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e0b1      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004534:	4b4b      	ldr	r3, [pc, #300]	@ (8004664 <HAL_RCC_OscConfig+0x4c4>)
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0ee      	beq.n	800451e <HAL_RCC_OscConfig+0x37e>
 8004540:	e014      	b.n	800456c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004542:	f7fe f979 	bl	8002838 <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004548:	e00a      	b.n	8004560 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800454a:	f7fe f975 	bl	8002838 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004558:	4293      	cmp	r3, r2
 800455a:	d901      	bls.n	8004560 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e09b      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004560:	4b40      	ldr	r3, [pc, #256]	@ (8004664 <HAL_RCC_OscConfig+0x4c4>)
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1ee      	bne.n	800454a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800456c:	7dfb      	ldrb	r3, [r7, #23]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d105      	bne.n	800457e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004572:	4b3c      	ldr	r3, [pc, #240]	@ (8004664 <HAL_RCC_OscConfig+0x4c4>)
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	4a3b      	ldr	r2, [pc, #236]	@ (8004664 <HAL_RCC_OscConfig+0x4c4>)
 8004578:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800457c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 8087 	beq.w	8004696 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004588:	4b36      	ldr	r3, [pc, #216]	@ (8004664 <HAL_RCC_OscConfig+0x4c4>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f003 030c 	and.w	r3, r3, #12
 8004590:	2b08      	cmp	r3, #8
 8004592:	d061      	beq.n	8004658 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	2b02      	cmp	r3, #2
 800459a:	d146      	bne.n	800462a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800459c:	4b33      	ldr	r3, [pc, #204]	@ (800466c <HAL_RCC_OscConfig+0x4cc>)
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a2:	f7fe f949 	bl	8002838 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045aa:	f7fe f945 	bl	8002838 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e06d      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045bc:	4b29      	ldr	r3, [pc, #164]	@ (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1f0      	bne.n	80045aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045d0:	d108      	bne.n	80045e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045d2:	4b24      	ldr	r3, [pc, #144]	@ (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	4921      	ldr	r1, [pc, #132]	@ (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045e4:	4b1f      	ldr	r3, [pc, #124]	@ (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a19      	ldr	r1, [r3, #32]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f4:	430b      	orrs	r3, r1
 80045f6:	491b      	ldr	r1, [pc, #108]	@ (8004664 <HAL_RCC_OscConfig+0x4c4>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045fc:	4b1b      	ldr	r3, [pc, #108]	@ (800466c <HAL_RCC_OscConfig+0x4cc>)
 80045fe:	2201      	movs	r2, #1
 8004600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004602:	f7fe f919 	bl	8002838 <HAL_GetTick>
 8004606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004608:	e008      	b.n	800461c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800460a:	f7fe f915 	bl	8002838 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d901      	bls.n	800461c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e03d      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800461c:	4b11      	ldr	r3, [pc, #68]	@ (8004664 <HAL_RCC_OscConfig+0x4c4>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0f0      	beq.n	800460a <HAL_RCC_OscConfig+0x46a>
 8004628:	e035      	b.n	8004696 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800462a:	4b10      	ldr	r3, [pc, #64]	@ (800466c <HAL_RCC_OscConfig+0x4cc>)
 800462c:	2200      	movs	r2, #0
 800462e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004630:	f7fe f902 	bl	8002838 <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004638:	f7fe f8fe 	bl	8002838 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e026      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800464a:	4b06      	ldr	r3, [pc, #24]	@ (8004664 <HAL_RCC_OscConfig+0x4c4>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1f0      	bne.n	8004638 <HAL_RCC_OscConfig+0x498>
 8004656:	e01e      	b.n	8004696 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d107      	bne.n	8004670 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e019      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>
 8004664:	40021000 	.word	0x40021000
 8004668:	40007000 	.word	0x40007000
 800466c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004670:	4b0b      	ldr	r3, [pc, #44]	@ (80046a0 <HAL_RCC_OscConfig+0x500>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	429a      	cmp	r2, r3
 8004682:	d106      	bne.n	8004692 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800468e:	429a      	cmp	r2, r3
 8004690:	d001      	beq.n	8004696 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e000      	b.n	8004698 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40021000 	.word	0x40021000

080046a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e0d0      	b.n	800485a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046b8:	4b6a      	ldr	r3, [pc, #424]	@ (8004864 <HAL_RCC_ClockConfig+0x1c0>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0307 	and.w	r3, r3, #7
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d910      	bls.n	80046e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c6:	4b67      	ldr	r3, [pc, #412]	@ (8004864 <HAL_RCC_ClockConfig+0x1c0>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f023 0207 	bic.w	r2, r3, #7
 80046ce:	4965      	ldr	r1, [pc, #404]	@ (8004864 <HAL_RCC_ClockConfig+0x1c0>)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d6:	4b63      	ldr	r3, [pc, #396]	@ (8004864 <HAL_RCC_ClockConfig+0x1c0>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0307 	and.w	r3, r3, #7
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d001      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e0b8      	b.n	800485a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d020      	beq.n	8004736 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d005      	beq.n	800470c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004700:	4b59      	ldr	r3, [pc, #356]	@ (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	4a58      	ldr	r2, [pc, #352]	@ (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 8004706:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800470a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0308 	and.w	r3, r3, #8
 8004714:	2b00      	cmp	r3, #0
 8004716:	d005      	beq.n	8004724 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004718:	4b53      	ldr	r3, [pc, #332]	@ (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	4a52      	ldr	r2, [pc, #328]	@ (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 800471e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004722:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004724:	4b50      	ldr	r3, [pc, #320]	@ (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	494d      	ldr	r1, [pc, #308]	@ (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 8004732:	4313      	orrs	r3, r2
 8004734:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d040      	beq.n	80047c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d107      	bne.n	800475a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800474a:	4b47      	ldr	r3, [pc, #284]	@ (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d115      	bne.n	8004782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e07f      	b.n	800485a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2b02      	cmp	r3, #2
 8004760:	d107      	bne.n	8004772 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004762:	4b41      	ldr	r3, [pc, #260]	@ (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d109      	bne.n	8004782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e073      	b.n	800485a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004772:	4b3d      	ldr	r3, [pc, #244]	@ (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e06b      	b.n	800485a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004782:	4b39      	ldr	r3, [pc, #228]	@ (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f023 0203 	bic.w	r2, r3, #3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	4936      	ldr	r1, [pc, #216]	@ (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 8004790:	4313      	orrs	r3, r2
 8004792:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004794:	f7fe f850 	bl	8002838 <HAL_GetTick>
 8004798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800479a:	e00a      	b.n	80047b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800479c:	f7fe f84c 	bl	8002838 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e053      	b.n	800485a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047b2:	4b2d      	ldr	r3, [pc, #180]	@ (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f003 020c 	and.w	r2, r3, #12
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d1eb      	bne.n	800479c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047c4:	4b27      	ldr	r3, [pc, #156]	@ (8004864 <HAL_RCC_ClockConfig+0x1c0>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d210      	bcs.n	80047f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047d2:	4b24      	ldr	r3, [pc, #144]	@ (8004864 <HAL_RCC_ClockConfig+0x1c0>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f023 0207 	bic.w	r2, r3, #7
 80047da:	4922      	ldr	r1, [pc, #136]	@ (8004864 <HAL_RCC_ClockConfig+0x1c0>)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	4313      	orrs	r3, r2
 80047e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047e2:	4b20      	ldr	r3, [pc, #128]	@ (8004864 <HAL_RCC_ClockConfig+0x1c0>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0307 	and.w	r3, r3, #7
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d001      	beq.n	80047f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e032      	b.n	800485a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d008      	beq.n	8004812 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004800:	4b19      	ldr	r3, [pc, #100]	@ (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	4916      	ldr	r1, [pc, #88]	@ (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 800480e:	4313      	orrs	r3, r2
 8004810:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0308 	and.w	r3, r3, #8
 800481a:	2b00      	cmp	r3, #0
 800481c:	d009      	beq.n	8004832 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800481e:	4b12      	ldr	r3, [pc, #72]	@ (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	490e      	ldr	r1, [pc, #56]	@ (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 800482e:	4313      	orrs	r3, r2
 8004830:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004832:	f000 f821 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 8004836:	4602      	mov	r2, r0
 8004838:	4b0b      	ldr	r3, [pc, #44]	@ (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	091b      	lsrs	r3, r3, #4
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	490a      	ldr	r1, [pc, #40]	@ (800486c <HAL_RCC_ClockConfig+0x1c8>)
 8004844:	5ccb      	ldrb	r3, [r1, r3]
 8004846:	fa22 f303 	lsr.w	r3, r2, r3
 800484a:	4a09      	ldr	r2, [pc, #36]	@ (8004870 <HAL_RCC_ClockConfig+0x1cc>)
 800484c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800484e:	4b09      	ldr	r3, [pc, #36]	@ (8004874 <HAL_RCC_ClockConfig+0x1d0>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f7fd ffae 	bl	80027b4 <HAL_InitTick>

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	40022000 	.word	0x40022000
 8004868:	40021000 	.word	0x40021000
 800486c:	0800a3a4 	.word	0x0800a3a4
 8004870:	20000000 	.word	0x20000000
 8004874:	20000004 	.word	0x20000004

08004878 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800487e:	2300      	movs	r3, #0
 8004880:	60fb      	str	r3, [r7, #12]
 8004882:	2300      	movs	r3, #0
 8004884:	60bb      	str	r3, [r7, #8]
 8004886:	2300      	movs	r3, #0
 8004888:	617b      	str	r3, [r7, #20]
 800488a:	2300      	movs	r3, #0
 800488c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800488e:	2300      	movs	r3, #0
 8004890:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004892:	4b1e      	ldr	r3, [pc, #120]	@ (800490c <HAL_RCC_GetSysClockFreq+0x94>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f003 030c 	and.w	r3, r3, #12
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d002      	beq.n	80048a8 <HAL_RCC_GetSysClockFreq+0x30>
 80048a2:	2b08      	cmp	r3, #8
 80048a4:	d003      	beq.n	80048ae <HAL_RCC_GetSysClockFreq+0x36>
 80048a6:	e027      	b.n	80048f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80048a8:	4b19      	ldr	r3, [pc, #100]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x98>)
 80048aa:	613b      	str	r3, [r7, #16]
      break;
 80048ac:	e027      	b.n	80048fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	0c9b      	lsrs	r3, r3, #18
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	4a17      	ldr	r2, [pc, #92]	@ (8004914 <HAL_RCC_GetSysClockFreq+0x9c>)
 80048b8:	5cd3      	ldrb	r3, [r2, r3]
 80048ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d010      	beq.n	80048e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048c6:	4b11      	ldr	r3, [pc, #68]	@ (800490c <HAL_RCC_GetSysClockFreq+0x94>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	0c5b      	lsrs	r3, r3, #17
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	4a11      	ldr	r2, [pc, #68]	@ (8004918 <HAL_RCC_GetSysClockFreq+0xa0>)
 80048d2:	5cd3      	ldrb	r3, [r2, r3]
 80048d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x98>)
 80048da:	fb03 f202 	mul.w	r2, r3, r2
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e4:	617b      	str	r3, [r7, #20]
 80048e6:	e004      	b.n	80048f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a0c      	ldr	r2, [pc, #48]	@ (800491c <HAL_RCC_GetSysClockFreq+0xa4>)
 80048ec:	fb02 f303 	mul.w	r3, r2, r3
 80048f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	613b      	str	r3, [r7, #16]
      break;
 80048f6:	e002      	b.n	80048fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048f8:	4b05      	ldr	r3, [pc, #20]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x98>)
 80048fa:	613b      	str	r3, [r7, #16]
      break;
 80048fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048fe:	693b      	ldr	r3, [r7, #16]
}
 8004900:	4618      	mov	r0, r3
 8004902:	371c      	adds	r7, #28
 8004904:	46bd      	mov	sp, r7
 8004906:	bc80      	pop	{r7}
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	40021000 	.word	0x40021000
 8004910:	007a1200 	.word	0x007a1200
 8004914:	0800a3bc 	.word	0x0800a3bc
 8004918:	0800a3cc 	.word	0x0800a3cc
 800491c:	003d0900 	.word	0x003d0900

08004920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004924:	4b02      	ldr	r3, [pc, #8]	@ (8004930 <HAL_RCC_GetHCLKFreq+0x10>)
 8004926:	681b      	ldr	r3, [r3, #0]
}
 8004928:	4618      	mov	r0, r3
 800492a:	46bd      	mov	sp, r7
 800492c:	bc80      	pop	{r7}
 800492e:	4770      	bx	lr
 8004930:	20000000 	.word	0x20000000

08004934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004938:	f7ff fff2 	bl	8004920 <HAL_RCC_GetHCLKFreq>
 800493c:	4602      	mov	r2, r0
 800493e:	4b05      	ldr	r3, [pc, #20]	@ (8004954 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	0a1b      	lsrs	r3, r3, #8
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	4903      	ldr	r1, [pc, #12]	@ (8004958 <HAL_RCC_GetPCLK1Freq+0x24>)
 800494a:	5ccb      	ldrb	r3, [r1, r3]
 800494c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004950:	4618      	mov	r0, r3
 8004952:	bd80      	pop	{r7, pc}
 8004954:	40021000 	.word	0x40021000
 8004958:	0800a3b4 	.word	0x0800a3b4

0800495c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004960:	f7ff ffde 	bl	8004920 <HAL_RCC_GetHCLKFreq>
 8004964:	4602      	mov	r2, r0
 8004966:	4b05      	ldr	r3, [pc, #20]	@ (800497c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	0adb      	lsrs	r3, r3, #11
 800496c:	f003 0307 	and.w	r3, r3, #7
 8004970:	4903      	ldr	r1, [pc, #12]	@ (8004980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004972:	5ccb      	ldrb	r3, [r1, r3]
 8004974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004978:	4618      	mov	r0, r3
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40021000 	.word	0x40021000
 8004980:	0800a3b4 	.word	0x0800a3b4

08004984 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800498c:	4b0a      	ldr	r3, [pc, #40]	@ (80049b8 <RCC_Delay+0x34>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a0a      	ldr	r2, [pc, #40]	@ (80049bc <RCC_Delay+0x38>)
 8004992:	fba2 2303 	umull	r2, r3, r2, r3
 8004996:	0a5b      	lsrs	r3, r3, #9
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	fb02 f303 	mul.w	r3, r2, r3
 800499e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80049a0:	bf00      	nop
  }
  while (Delay --);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	1e5a      	subs	r2, r3, #1
 80049a6:	60fa      	str	r2, [r7, #12]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1f9      	bne.n	80049a0 <RCC_Delay+0x1c>
}
 80049ac:	bf00      	nop
 80049ae:	bf00      	nop
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr
 80049b8:	20000000 	.word	0x20000000
 80049bc:	10624dd3 	.word	0x10624dd3

080049c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e041      	b.n	8004a56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d106      	bne.n	80049ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7fd fda8 	bl	800253c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2202      	movs	r2, #2
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3304      	adds	r3, #4
 80049fc:	4619      	mov	r1, r3
 80049fe:	4610      	mov	r0, r2
 8004a00:	f000 faa8 	bl	8004f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b082      	sub	sp, #8
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e041      	b.n	8004af4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d106      	bne.n	8004a8a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7fd fd75 	bl	8002574 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3304      	adds	r3, #4
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	f000 fa59 	bl	8004f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d109      	bne.n	8004b20 <HAL_TIM_PWM_Start+0x24>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	bf14      	ite	ne
 8004b18:	2301      	movne	r3, #1
 8004b1a:	2300      	moveq	r3, #0
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	e022      	b.n	8004b66 <HAL_TIM_PWM_Start+0x6a>
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d109      	bne.n	8004b3a <HAL_TIM_PWM_Start+0x3e>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	bf14      	ite	ne
 8004b32:	2301      	movne	r3, #1
 8004b34:	2300      	moveq	r3, #0
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	e015      	b.n	8004b66 <HAL_TIM_PWM_Start+0x6a>
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d109      	bne.n	8004b54 <HAL_TIM_PWM_Start+0x58>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	bf14      	ite	ne
 8004b4c:	2301      	movne	r3, #1
 8004b4e:	2300      	moveq	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	e008      	b.n	8004b66 <HAL_TIM_PWM_Start+0x6a>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	bf14      	ite	ne
 8004b60:	2301      	movne	r3, #1
 8004b62:	2300      	moveq	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e05e      	b.n	8004c2c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d104      	bne.n	8004b7e <HAL_TIM_PWM_Start+0x82>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b7c:	e013      	b.n	8004ba6 <HAL_TIM_PWM_Start+0xaa>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b04      	cmp	r3, #4
 8004b82:	d104      	bne.n	8004b8e <HAL_TIM_PWM_Start+0x92>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b8c:	e00b      	b.n	8004ba6 <HAL_TIM_PWM_Start+0xaa>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d104      	bne.n	8004b9e <HAL_TIM_PWM_Start+0xa2>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b9c:	e003      	b.n	8004ba6 <HAL_TIM_PWM_Start+0xaa>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2201      	movs	r2, #1
 8004bac:	6839      	ldr	r1, [r7, #0]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 fc5c 	bl	800546c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a1e      	ldr	r2, [pc, #120]	@ (8004c34 <HAL_TIM_PWM_Start+0x138>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d107      	bne.n	8004bce <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004bcc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a18      	ldr	r2, [pc, #96]	@ (8004c34 <HAL_TIM_PWM_Start+0x138>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d00e      	beq.n	8004bf6 <HAL_TIM_PWM_Start+0xfa>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004be0:	d009      	beq.n	8004bf6 <HAL_TIM_PWM_Start+0xfa>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a14      	ldr	r2, [pc, #80]	@ (8004c38 <HAL_TIM_PWM_Start+0x13c>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d004      	beq.n	8004bf6 <HAL_TIM_PWM_Start+0xfa>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a12      	ldr	r2, [pc, #72]	@ (8004c3c <HAL_TIM_PWM_Start+0x140>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d111      	bne.n	8004c1a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f003 0307 	and.w	r3, r3, #7
 8004c00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2b06      	cmp	r3, #6
 8004c06:	d010      	beq.n	8004c2a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0201 	orr.w	r2, r2, #1
 8004c16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c18:	e007      	b.n	8004c2a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f042 0201 	orr.w	r2, r2, #1
 8004c28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40012c00 	.word	0x40012c00
 8004c38:	40000400 	.word	0x40000400
 8004c3c:	40000800 	.word	0x40000800

08004c40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d101      	bne.n	8004c5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	e0ae      	b.n	8004dbc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b0c      	cmp	r3, #12
 8004c6a:	f200 809f 	bhi.w	8004dac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c74:	08004ca9 	.word	0x08004ca9
 8004c78:	08004dad 	.word	0x08004dad
 8004c7c:	08004dad 	.word	0x08004dad
 8004c80:	08004dad 	.word	0x08004dad
 8004c84:	08004ce9 	.word	0x08004ce9
 8004c88:	08004dad 	.word	0x08004dad
 8004c8c:	08004dad 	.word	0x08004dad
 8004c90:	08004dad 	.word	0x08004dad
 8004c94:	08004d2b 	.word	0x08004d2b
 8004c98:	08004dad 	.word	0x08004dad
 8004c9c:	08004dad 	.word	0x08004dad
 8004ca0:	08004dad 	.word	0x08004dad
 8004ca4:	08004d6b 	.word	0x08004d6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68b9      	ldr	r1, [r7, #8]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 f9be 	bl	8005030 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699a      	ldr	r2, [r3, #24]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0208 	orr.w	r2, r2, #8
 8004cc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699a      	ldr	r2, [r3, #24]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 0204 	bic.w	r2, r2, #4
 8004cd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6999      	ldr	r1, [r3, #24]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	691a      	ldr	r2, [r3, #16]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	619a      	str	r2, [r3, #24]
      break;
 8004ce6:	e064      	b.n	8004db2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68b9      	ldr	r1, [r7, #8]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 fa04 	bl	80050fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	699a      	ldr	r2, [r3, #24]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	699a      	ldr	r2, [r3, #24]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6999      	ldr	r1, [r3, #24]
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	021a      	lsls	r2, r3, #8
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	619a      	str	r2, [r3, #24]
      break;
 8004d28:	e043      	b.n	8004db2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68b9      	ldr	r1, [r7, #8]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 fa4d 	bl	80051d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69da      	ldr	r2, [r3, #28]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f042 0208 	orr.w	r2, r2, #8
 8004d44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69da      	ldr	r2, [r3, #28]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0204 	bic.w	r2, r2, #4
 8004d54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69d9      	ldr	r1, [r3, #28]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	691a      	ldr	r2, [r3, #16]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	61da      	str	r2, [r3, #28]
      break;
 8004d68:	e023      	b.n	8004db2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68b9      	ldr	r1, [r7, #8]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 fa97 	bl	80052a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	69da      	ldr	r2, [r3, #28]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	69da      	ldr	r2, [r3, #28]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69d9      	ldr	r1, [r3, #28]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	021a      	lsls	r2, r3, #8
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	61da      	str	r2, [r3, #28]
      break;
 8004daa:	e002      	b.n	8004db2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	75fb      	strb	r3, [r7, #23]
      break;
 8004db0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3718      	adds	r7, #24
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d101      	bne.n	8004de0 <HAL_TIM_ConfigClockSource+0x1c>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	e0b4      	b.n	8004f4a <HAL_TIM_ConfigClockSource+0x186>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004dfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e18:	d03e      	beq.n	8004e98 <HAL_TIM_ConfigClockSource+0xd4>
 8004e1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e1e:	f200 8087 	bhi.w	8004f30 <HAL_TIM_ConfigClockSource+0x16c>
 8004e22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e26:	f000 8086 	beq.w	8004f36 <HAL_TIM_ConfigClockSource+0x172>
 8004e2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e2e:	d87f      	bhi.n	8004f30 <HAL_TIM_ConfigClockSource+0x16c>
 8004e30:	2b70      	cmp	r3, #112	@ 0x70
 8004e32:	d01a      	beq.n	8004e6a <HAL_TIM_ConfigClockSource+0xa6>
 8004e34:	2b70      	cmp	r3, #112	@ 0x70
 8004e36:	d87b      	bhi.n	8004f30 <HAL_TIM_ConfigClockSource+0x16c>
 8004e38:	2b60      	cmp	r3, #96	@ 0x60
 8004e3a:	d050      	beq.n	8004ede <HAL_TIM_ConfigClockSource+0x11a>
 8004e3c:	2b60      	cmp	r3, #96	@ 0x60
 8004e3e:	d877      	bhi.n	8004f30 <HAL_TIM_ConfigClockSource+0x16c>
 8004e40:	2b50      	cmp	r3, #80	@ 0x50
 8004e42:	d03c      	beq.n	8004ebe <HAL_TIM_ConfigClockSource+0xfa>
 8004e44:	2b50      	cmp	r3, #80	@ 0x50
 8004e46:	d873      	bhi.n	8004f30 <HAL_TIM_ConfigClockSource+0x16c>
 8004e48:	2b40      	cmp	r3, #64	@ 0x40
 8004e4a:	d058      	beq.n	8004efe <HAL_TIM_ConfigClockSource+0x13a>
 8004e4c:	2b40      	cmp	r3, #64	@ 0x40
 8004e4e:	d86f      	bhi.n	8004f30 <HAL_TIM_ConfigClockSource+0x16c>
 8004e50:	2b30      	cmp	r3, #48	@ 0x30
 8004e52:	d064      	beq.n	8004f1e <HAL_TIM_ConfigClockSource+0x15a>
 8004e54:	2b30      	cmp	r3, #48	@ 0x30
 8004e56:	d86b      	bhi.n	8004f30 <HAL_TIM_ConfigClockSource+0x16c>
 8004e58:	2b20      	cmp	r3, #32
 8004e5a:	d060      	beq.n	8004f1e <HAL_TIM_ConfigClockSource+0x15a>
 8004e5c:	2b20      	cmp	r3, #32
 8004e5e:	d867      	bhi.n	8004f30 <HAL_TIM_ConfigClockSource+0x16c>
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d05c      	beq.n	8004f1e <HAL_TIM_ConfigClockSource+0x15a>
 8004e64:	2b10      	cmp	r3, #16
 8004e66:	d05a      	beq.n	8004f1e <HAL_TIM_ConfigClockSource+0x15a>
 8004e68:	e062      	b.n	8004f30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e7a:	f000 fad8 	bl	800542e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	609a      	str	r2, [r3, #8]
      break;
 8004e96:	e04f      	b.n	8004f38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ea8:	f000 fac1 	bl	800542e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689a      	ldr	r2, [r3, #8]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004eba:	609a      	str	r2, [r3, #8]
      break;
 8004ebc:	e03c      	b.n	8004f38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eca:	461a      	mov	r2, r3
 8004ecc:	f000 fa38 	bl	8005340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2150      	movs	r1, #80	@ 0x50
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 fa8f 	bl	80053fa <TIM_ITRx_SetConfig>
      break;
 8004edc:	e02c      	b.n	8004f38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eea:	461a      	mov	r2, r3
 8004eec:	f000 fa56 	bl	800539c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2160      	movs	r1, #96	@ 0x60
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 fa7f 	bl	80053fa <TIM_ITRx_SetConfig>
      break;
 8004efc:	e01c      	b.n	8004f38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	f000 fa18 	bl	8005340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2140      	movs	r1, #64	@ 0x40
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 fa6f 	bl	80053fa <TIM_ITRx_SetConfig>
      break;
 8004f1c:	e00c      	b.n	8004f38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4619      	mov	r1, r3
 8004f28:	4610      	mov	r0, r2
 8004f2a:	f000 fa66 	bl	80053fa <TIM_ITRx_SetConfig>
      break;
 8004f2e:	e003      	b.n	8004f38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	73fb      	strb	r3, [r7, #15]
      break;
 8004f34:	e000      	b.n	8004f38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
	...

08004f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a2f      	ldr	r2, [pc, #188]	@ (8005024 <TIM_Base_SetConfig+0xd0>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d00b      	beq.n	8004f84 <TIM_Base_SetConfig+0x30>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f72:	d007      	beq.n	8004f84 <TIM_Base_SetConfig+0x30>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a2c      	ldr	r2, [pc, #176]	@ (8005028 <TIM_Base_SetConfig+0xd4>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d003      	beq.n	8004f84 <TIM_Base_SetConfig+0x30>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a2b      	ldr	r2, [pc, #172]	@ (800502c <TIM_Base_SetConfig+0xd8>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d108      	bne.n	8004f96 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a22      	ldr	r2, [pc, #136]	@ (8005024 <TIM_Base_SetConfig+0xd0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d00b      	beq.n	8004fb6 <TIM_Base_SetConfig+0x62>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fa4:	d007      	beq.n	8004fb6 <TIM_Base_SetConfig+0x62>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a1f      	ldr	r2, [pc, #124]	@ (8005028 <TIM_Base_SetConfig+0xd4>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d003      	beq.n	8004fb6 <TIM_Base_SetConfig+0x62>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a1e      	ldr	r2, [pc, #120]	@ (800502c <TIM_Base_SetConfig+0xd8>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d108      	bne.n	8004fc8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	689a      	ldr	r2, [r3, #8]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a0d      	ldr	r2, [pc, #52]	@ (8005024 <TIM_Base_SetConfig+0xd0>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d103      	bne.n	8004ffc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	691a      	ldr	r2, [r3, #16]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d005      	beq.n	800501a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	f023 0201 	bic.w	r2, r3, #1
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	611a      	str	r2, [r3, #16]
  }
}
 800501a:	bf00      	nop
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	bc80      	pop	{r7}
 8005022:	4770      	bx	lr
 8005024:	40012c00 	.word	0x40012c00
 8005028:	40000400 	.word	0x40000400
 800502c:	40000800 	.word	0x40000800

08005030 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	f023 0201 	bic.w	r2, r3, #1
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800505e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f023 0303 	bic.w	r3, r3, #3
 8005066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	4313      	orrs	r3, r2
 8005070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f023 0302 	bic.w	r3, r3, #2
 8005078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	4313      	orrs	r3, r2
 8005082:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a1c      	ldr	r2, [pc, #112]	@ (80050f8 <TIM_OC1_SetConfig+0xc8>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d10c      	bne.n	80050a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f023 0308 	bic.w	r3, r3, #8
 8005092:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	4313      	orrs	r3, r2
 800509c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f023 0304 	bic.w	r3, r3, #4
 80050a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a13      	ldr	r2, [pc, #76]	@ (80050f8 <TIM_OC1_SetConfig+0xc8>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d111      	bne.n	80050d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	621a      	str	r2, [r3, #32]
}
 80050ec:	bf00      	nop
 80050ee:	371c      	adds	r7, #28
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bc80      	pop	{r7}
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	40012c00 	.word	0x40012c00

080050fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	f023 0210 	bic.w	r2, r3, #16
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800512a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	021b      	lsls	r3, r3, #8
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f023 0320 	bic.w	r3, r3, #32
 8005146:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	011b      	lsls	r3, r3, #4
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	4313      	orrs	r3, r2
 8005152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a1d      	ldr	r2, [pc, #116]	@ (80051cc <TIM_OC2_SetConfig+0xd0>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d10d      	bne.n	8005178 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	011b      	lsls	r3, r3, #4
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	4313      	orrs	r3, r2
 800516e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005176:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a14      	ldr	r2, [pc, #80]	@ (80051cc <TIM_OC2_SetConfig+0xd0>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d113      	bne.n	80051a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005186:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800518e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	695b      	ldr	r3, [r3, #20]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	4313      	orrs	r3, r2
 800519a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	621a      	str	r2, [r3, #32]
}
 80051c2:	bf00      	nop
 80051c4:	371c      	adds	r7, #28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr
 80051cc:	40012c00 	.word	0x40012c00

080051d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 0303 	bic.w	r3, r3, #3
 8005206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	4313      	orrs	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	021b      	lsls	r3, r3, #8
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	4313      	orrs	r3, r2
 8005224:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a1d      	ldr	r2, [pc, #116]	@ (80052a0 <TIM_OC3_SetConfig+0xd0>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d10d      	bne.n	800524a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005234:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	021b      	lsls	r3, r3, #8
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	4313      	orrs	r3, r2
 8005240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a14      	ldr	r2, [pc, #80]	@ (80052a0 <TIM_OC3_SetConfig+0xd0>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d113      	bne.n	800527a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005258:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005260:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	4313      	orrs	r3, r2
 800526c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	011b      	lsls	r3, r3, #4
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	4313      	orrs	r3, r2
 8005278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	621a      	str	r2, [r3, #32]
}
 8005294:	bf00      	nop
 8005296:	371c      	adds	r7, #28
 8005298:	46bd      	mov	sp, r7
 800529a:	bc80      	pop	{r7}
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	40012c00 	.word	0x40012c00

080052a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	021b      	lsls	r3, r3, #8
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	031b      	lsls	r3, r3, #12
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a0f      	ldr	r2, [pc, #60]	@ (800533c <TIM_OC4_SetConfig+0x98>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d109      	bne.n	8005318 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800530a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	019b      	lsls	r3, r3, #6
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	4313      	orrs	r3, r2
 8005316:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	621a      	str	r2, [r3, #32]
}
 8005332:	bf00      	nop
 8005334:	371c      	adds	r7, #28
 8005336:	46bd      	mov	sp, r7
 8005338:	bc80      	pop	{r7}
 800533a:	4770      	bx	lr
 800533c:	40012c00 	.word	0x40012c00

08005340 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	f023 0201 	bic.w	r2, r3, #1
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800536a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	011b      	lsls	r3, r3, #4
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	4313      	orrs	r3, r2
 8005374:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f023 030a 	bic.w	r3, r3, #10
 800537c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	4313      	orrs	r3, r2
 8005384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	621a      	str	r2, [r3, #32]
}
 8005392:	bf00      	nop
 8005394:	371c      	adds	r7, #28
 8005396:	46bd      	mov	sp, r7
 8005398:	bc80      	pop	{r7}
 800539a:	4770      	bx	lr

0800539c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	f023 0210 	bic.w	r2, r3, #16
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80053c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	031b      	lsls	r3, r3, #12
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80053d8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	011b      	lsls	r3, r3, #4
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	621a      	str	r2, [r3, #32]
}
 80053f0:	bf00      	nop
 80053f2:	371c      	adds	r7, #28
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bc80      	pop	{r7}
 80053f8:	4770      	bx	lr

080053fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b085      	sub	sp, #20
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
 8005402:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005410:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	f043 0307 	orr.w	r3, r3, #7
 800541c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	609a      	str	r2, [r3, #8]
}
 8005424:	bf00      	nop
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	bc80      	pop	{r7}
 800542c:	4770      	bx	lr

0800542e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800542e:	b480      	push	{r7}
 8005430:	b087      	sub	sp, #28
 8005432:	af00      	add	r7, sp, #0
 8005434:	60f8      	str	r0, [r7, #12]
 8005436:	60b9      	str	r1, [r7, #8]
 8005438:	607a      	str	r2, [r7, #4]
 800543a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005448:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	021a      	lsls	r2, r3, #8
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	431a      	orrs	r2, r3
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	4313      	orrs	r3, r2
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	4313      	orrs	r3, r2
 800545a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	609a      	str	r2, [r3, #8]
}
 8005462:	bf00      	nop
 8005464:	371c      	adds	r7, #28
 8005466:	46bd      	mov	sp, r7
 8005468:	bc80      	pop	{r7}
 800546a:	4770      	bx	lr

0800546c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800546c:	b480      	push	{r7}
 800546e:	b087      	sub	sp, #28
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f003 031f 	and.w	r3, r3, #31
 800547e:	2201      	movs	r2, #1
 8005480:	fa02 f303 	lsl.w	r3, r2, r3
 8005484:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6a1a      	ldr	r2, [r3, #32]
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	43db      	mvns	r3, r3
 800548e:	401a      	ands	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6a1a      	ldr	r2, [r3, #32]
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	f003 031f 	and.w	r3, r3, #31
 800549e:	6879      	ldr	r1, [r7, #4]
 80054a0:	fa01 f303 	lsl.w	r3, r1, r3
 80054a4:	431a      	orrs	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	621a      	str	r2, [r3, #32]
}
 80054aa:	bf00      	nop
 80054ac:	371c      	adds	r7, #28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bc80      	pop	{r7}
 80054b2:	4770      	bx	lr

080054b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d101      	bne.n	80054cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054c8:	2302      	movs	r3, #2
 80054ca:	e046      	b.n	800555a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a16      	ldr	r2, [pc, #88]	@ (8005564 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d00e      	beq.n	800552e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005518:	d009      	beq.n	800552e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a12      	ldr	r2, [pc, #72]	@ (8005568 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d004      	beq.n	800552e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a10      	ldr	r2, [pc, #64]	@ (800556c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d10c      	bne.n	8005548 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005534:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	4313      	orrs	r3, r2
 800553e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	bc80      	pop	{r7}
 8005562:	4770      	bx	lr
 8005564:	40012c00 	.word	0x40012c00
 8005568:	40000400 	.word	0x40000400
 800556c:	40000800 	.word	0x40000800

08005570 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e042      	b.n	8005608 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d106      	bne.n	800559c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7fd f884 	bl	80026a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2224      	movs	r2, #36	@ 0x24
 80055a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68da      	ldr	r2, [r3, #12]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f971 	bl	800589c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	691a      	ldr	r2, [r3, #16]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	695a      	ldr	r2, [r3, #20]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68da      	ldr	r2, [r3, #12]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2220      	movs	r2, #32
 80055f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2220      	movs	r2, #32
 80055fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b08a      	sub	sp, #40	@ 0x28
 8005614:	af02      	add	r7, sp, #8
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	4613      	mov	r3, r2
 800561e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005620:	2300      	movs	r3, #0
 8005622:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b20      	cmp	r3, #32
 800562e:	d175      	bne.n	800571c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d002      	beq.n	800563c <HAL_UART_Transmit+0x2c>
 8005636:	88fb      	ldrh	r3, [r7, #6]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d101      	bne.n	8005640 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e06e      	b.n	800571e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2221      	movs	r2, #33	@ 0x21
 800564a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800564e:	f7fd f8f3 	bl	8002838 <HAL_GetTick>
 8005652:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	88fa      	ldrh	r2, [r7, #6]
 8005658:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	88fa      	ldrh	r2, [r7, #6]
 800565e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005668:	d108      	bne.n	800567c <HAL_UART_Transmit+0x6c>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d104      	bne.n	800567c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005672:	2300      	movs	r3, #0
 8005674:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	61bb      	str	r3, [r7, #24]
 800567a:	e003      	b.n	8005684 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005680:	2300      	movs	r3, #0
 8005682:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005684:	e02e      	b.n	80056e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2200      	movs	r2, #0
 800568e:	2180      	movs	r1, #128	@ 0x80
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f000 f848 	bl	8005726 <UART_WaitOnFlagUntilTimeout>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d005      	beq.n	80056a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2220      	movs	r2, #32
 80056a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e03a      	b.n	800571e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10b      	bne.n	80056c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	461a      	mov	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	3302      	adds	r3, #2
 80056c2:	61bb      	str	r3, [r7, #24]
 80056c4:	e007      	b.n	80056d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	781a      	ldrb	r2, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	3301      	adds	r3, #1
 80056d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056da:	b29b      	uxth	r3, r3
 80056dc:	3b01      	subs	r3, #1
 80056de:	b29a      	uxth	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1cb      	bne.n	8005686 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2200      	movs	r2, #0
 80056f6:	2140      	movs	r1, #64	@ 0x40
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 f814 	bl	8005726 <UART_WaitOnFlagUntilTimeout>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d005      	beq.n	8005710 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2220      	movs	r2, #32
 8005708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e006      	b.n	800571e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2220      	movs	r2, #32
 8005714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005718:	2300      	movs	r3, #0
 800571a:	e000      	b.n	800571e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800571c:	2302      	movs	r3, #2
  }
}
 800571e:	4618      	mov	r0, r3
 8005720:	3720      	adds	r7, #32
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b086      	sub	sp, #24
 800572a:	af00      	add	r7, sp, #0
 800572c:	60f8      	str	r0, [r7, #12]
 800572e:	60b9      	str	r1, [r7, #8]
 8005730:	603b      	str	r3, [r7, #0]
 8005732:	4613      	mov	r3, r2
 8005734:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005736:	e03b      	b.n	80057b0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573e:	d037      	beq.n	80057b0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005740:	f7fd f87a 	bl	8002838 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	6a3a      	ldr	r2, [r7, #32]
 800574c:	429a      	cmp	r2, r3
 800574e:	d302      	bcc.n	8005756 <UART_WaitOnFlagUntilTimeout+0x30>
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e03a      	b.n	80057d0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f003 0304 	and.w	r3, r3, #4
 8005764:	2b00      	cmp	r3, #0
 8005766:	d023      	beq.n	80057b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	2b80      	cmp	r3, #128	@ 0x80
 800576c:	d020      	beq.n	80057b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	2b40      	cmp	r3, #64	@ 0x40
 8005772:	d01d      	beq.n	80057b0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0308 	and.w	r3, r3, #8
 800577e:	2b08      	cmp	r3, #8
 8005780:	d116      	bne.n	80057b0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005782:	2300      	movs	r3, #0
 8005784:	617b      	str	r3, [r7, #20]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	617b      	str	r3, [r7, #20]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	617b      	str	r3, [r7, #20]
 8005796:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f000 f81d 	bl	80057d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2208      	movs	r2, #8
 80057a2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e00f      	b.n	80057d0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	4013      	ands	r3, r2
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	429a      	cmp	r2, r3
 80057be:	bf0c      	ite	eq
 80057c0:	2301      	moveq	r3, #1
 80057c2:	2300      	movne	r3, #0
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	461a      	mov	r2, r3
 80057c8:	79fb      	ldrb	r3, [r7, #7]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d0b4      	beq.n	8005738 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3718      	adds	r7, #24
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057d8:	b480      	push	{r7}
 80057da:	b095      	sub	sp, #84	@ 0x54
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	330c      	adds	r3, #12
 80057e6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ea:	e853 3f00 	ldrex	r3, [r3]
 80057ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	330c      	adds	r3, #12
 80057fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005800:	643a      	str	r2, [r7, #64]	@ 0x40
 8005802:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005804:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005806:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005808:	e841 2300 	strex	r3, r2, [r1]
 800580c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800580e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1e5      	bne.n	80057e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	3314      	adds	r3, #20
 800581a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	e853 3f00 	ldrex	r3, [r3]
 8005822:	61fb      	str	r3, [r7, #28]
   return(result);
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	f023 0301 	bic.w	r3, r3, #1
 800582a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	3314      	adds	r3, #20
 8005832:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005834:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005836:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005838:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800583a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800583c:	e841 2300 	strex	r3, r2, [r1]
 8005840:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1e5      	bne.n	8005814 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584c:	2b01      	cmp	r3, #1
 800584e:	d119      	bne.n	8005884 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	330c      	adds	r3, #12
 8005856:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	e853 3f00 	ldrex	r3, [r3]
 800585e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f023 0310 	bic.w	r3, r3, #16
 8005866:	647b      	str	r3, [r7, #68]	@ 0x44
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	330c      	adds	r3, #12
 800586e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005870:	61ba      	str	r2, [r7, #24]
 8005872:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005874:	6979      	ldr	r1, [r7, #20]
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	e841 2300 	strex	r3, r2, [r1]
 800587c:	613b      	str	r3, [r7, #16]
   return(result);
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1e5      	bne.n	8005850 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2220      	movs	r2, #32
 8005888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005892:	bf00      	nop
 8005894:	3754      	adds	r7, #84	@ 0x54
 8005896:	46bd      	mov	sp, r7
 8005898:	bc80      	pop	{r7}
 800589a:	4770      	bx	lr

0800589c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68da      	ldr	r2, [r3, #12]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	431a      	orrs	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80058d6:	f023 030c 	bic.w	r3, r3, #12
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	6812      	ldr	r2, [r2, #0]
 80058de:	68b9      	ldr	r1, [r7, #8]
 80058e0:	430b      	orrs	r3, r1
 80058e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	699a      	ldr	r2, [r3, #24]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a2c      	ldr	r2, [pc, #176]	@ (80059b0 <UART_SetConfig+0x114>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d103      	bne.n	800590c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005904:	f7ff f82a 	bl	800495c <HAL_RCC_GetPCLK2Freq>
 8005908:	60f8      	str	r0, [r7, #12]
 800590a:	e002      	b.n	8005912 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800590c:	f7ff f812 	bl	8004934 <HAL_RCC_GetPCLK1Freq>
 8005910:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	4613      	mov	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4413      	add	r3, r2
 800591a:	009a      	lsls	r2, r3, #2
 800591c:	441a      	add	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	fbb2 f3f3 	udiv	r3, r2, r3
 8005928:	4a22      	ldr	r2, [pc, #136]	@ (80059b4 <UART_SetConfig+0x118>)
 800592a:	fba2 2303 	umull	r2, r3, r2, r3
 800592e:	095b      	lsrs	r3, r3, #5
 8005930:	0119      	lsls	r1, r3, #4
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	4613      	mov	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	009a      	lsls	r2, r3, #2
 800593c:	441a      	add	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	fbb2 f2f3 	udiv	r2, r2, r3
 8005948:	4b1a      	ldr	r3, [pc, #104]	@ (80059b4 <UART_SetConfig+0x118>)
 800594a:	fba3 0302 	umull	r0, r3, r3, r2
 800594e:	095b      	lsrs	r3, r3, #5
 8005950:	2064      	movs	r0, #100	@ 0x64
 8005952:	fb00 f303 	mul.w	r3, r0, r3
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	011b      	lsls	r3, r3, #4
 800595a:	3332      	adds	r3, #50	@ 0x32
 800595c:	4a15      	ldr	r2, [pc, #84]	@ (80059b4 <UART_SetConfig+0x118>)
 800595e:	fba2 2303 	umull	r2, r3, r2, r3
 8005962:	095b      	lsrs	r3, r3, #5
 8005964:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005968:	4419      	add	r1, r3
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	4613      	mov	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4413      	add	r3, r2
 8005972:	009a      	lsls	r2, r3, #2
 8005974:	441a      	add	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005980:	4b0c      	ldr	r3, [pc, #48]	@ (80059b4 <UART_SetConfig+0x118>)
 8005982:	fba3 0302 	umull	r0, r3, r3, r2
 8005986:	095b      	lsrs	r3, r3, #5
 8005988:	2064      	movs	r0, #100	@ 0x64
 800598a:	fb00 f303 	mul.w	r3, r0, r3
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	011b      	lsls	r3, r3, #4
 8005992:	3332      	adds	r3, #50	@ 0x32
 8005994:	4a07      	ldr	r2, [pc, #28]	@ (80059b4 <UART_SetConfig+0x118>)
 8005996:	fba2 2303 	umull	r2, r3, r2, r3
 800599a:	095b      	lsrs	r3, r3, #5
 800599c:	f003 020f 	and.w	r2, r3, #15
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	440a      	add	r2, r1
 80059a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80059a8:	bf00      	nop
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	40013800 	.word	0x40013800
 80059b4:	51eb851f 	.word	0x51eb851f

080059b8 <__cvt>:
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059be:	461d      	mov	r5, r3
 80059c0:	bfbb      	ittet	lt
 80059c2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80059c6:	461d      	movlt	r5, r3
 80059c8:	2300      	movge	r3, #0
 80059ca:	232d      	movlt	r3, #45	@ 0x2d
 80059cc:	b088      	sub	sp, #32
 80059ce:	4614      	mov	r4, r2
 80059d0:	bfb8      	it	lt
 80059d2:	4614      	movlt	r4, r2
 80059d4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80059d6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80059d8:	7013      	strb	r3, [r2, #0]
 80059da:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80059dc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80059e0:	f023 0820 	bic.w	r8, r3, #32
 80059e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80059e8:	d005      	beq.n	80059f6 <__cvt+0x3e>
 80059ea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80059ee:	d100      	bne.n	80059f2 <__cvt+0x3a>
 80059f0:	3601      	adds	r6, #1
 80059f2:	2302      	movs	r3, #2
 80059f4:	e000      	b.n	80059f8 <__cvt+0x40>
 80059f6:	2303      	movs	r3, #3
 80059f8:	aa07      	add	r2, sp, #28
 80059fa:	9204      	str	r2, [sp, #16]
 80059fc:	aa06      	add	r2, sp, #24
 80059fe:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005a02:	e9cd 3600 	strd	r3, r6, [sp]
 8005a06:	4622      	mov	r2, r4
 8005a08:	462b      	mov	r3, r5
 8005a0a:	f000 fe95 	bl	8006738 <_dtoa_r>
 8005a0e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005a12:	4607      	mov	r7, r0
 8005a14:	d119      	bne.n	8005a4a <__cvt+0x92>
 8005a16:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005a18:	07db      	lsls	r3, r3, #31
 8005a1a:	d50e      	bpl.n	8005a3a <__cvt+0x82>
 8005a1c:	eb00 0906 	add.w	r9, r0, r6
 8005a20:	2200      	movs	r2, #0
 8005a22:	2300      	movs	r3, #0
 8005a24:	4620      	mov	r0, r4
 8005a26:	4629      	mov	r1, r5
 8005a28:	f7fa ffbe 	bl	80009a8 <__aeabi_dcmpeq>
 8005a2c:	b108      	cbz	r0, 8005a32 <__cvt+0x7a>
 8005a2e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005a32:	2230      	movs	r2, #48	@ 0x30
 8005a34:	9b07      	ldr	r3, [sp, #28]
 8005a36:	454b      	cmp	r3, r9
 8005a38:	d31e      	bcc.n	8005a78 <__cvt+0xc0>
 8005a3a:	4638      	mov	r0, r7
 8005a3c:	9b07      	ldr	r3, [sp, #28]
 8005a3e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005a40:	1bdb      	subs	r3, r3, r7
 8005a42:	6013      	str	r3, [r2, #0]
 8005a44:	b008      	add	sp, #32
 8005a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a4a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005a4e:	eb00 0906 	add.w	r9, r0, r6
 8005a52:	d1e5      	bne.n	8005a20 <__cvt+0x68>
 8005a54:	7803      	ldrb	r3, [r0, #0]
 8005a56:	2b30      	cmp	r3, #48	@ 0x30
 8005a58:	d10a      	bne.n	8005a70 <__cvt+0xb8>
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	4620      	mov	r0, r4
 8005a60:	4629      	mov	r1, r5
 8005a62:	f7fa ffa1 	bl	80009a8 <__aeabi_dcmpeq>
 8005a66:	b918      	cbnz	r0, 8005a70 <__cvt+0xb8>
 8005a68:	f1c6 0601 	rsb	r6, r6, #1
 8005a6c:	f8ca 6000 	str.w	r6, [sl]
 8005a70:	f8da 3000 	ldr.w	r3, [sl]
 8005a74:	4499      	add	r9, r3
 8005a76:	e7d3      	b.n	8005a20 <__cvt+0x68>
 8005a78:	1c59      	adds	r1, r3, #1
 8005a7a:	9107      	str	r1, [sp, #28]
 8005a7c:	701a      	strb	r2, [r3, #0]
 8005a7e:	e7d9      	b.n	8005a34 <__cvt+0x7c>

08005a80 <__exponent>:
 8005a80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a82:	2900      	cmp	r1, #0
 8005a84:	bfb6      	itet	lt
 8005a86:	232d      	movlt	r3, #45	@ 0x2d
 8005a88:	232b      	movge	r3, #43	@ 0x2b
 8005a8a:	4249      	neglt	r1, r1
 8005a8c:	2909      	cmp	r1, #9
 8005a8e:	7002      	strb	r2, [r0, #0]
 8005a90:	7043      	strb	r3, [r0, #1]
 8005a92:	dd29      	ble.n	8005ae8 <__exponent+0x68>
 8005a94:	f10d 0307 	add.w	r3, sp, #7
 8005a98:	461d      	mov	r5, r3
 8005a9a:	270a      	movs	r7, #10
 8005a9c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	fb07 1416 	mls	r4, r7, r6, r1
 8005aa6:	3430      	adds	r4, #48	@ 0x30
 8005aa8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005aac:	460c      	mov	r4, r1
 8005aae:	2c63      	cmp	r4, #99	@ 0x63
 8005ab0:	4631      	mov	r1, r6
 8005ab2:	f103 33ff 	add.w	r3, r3, #4294967295
 8005ab6:	dcf1      	bgt.n	8005a9c <__exponent+0x1c>
 8005ab8:	3130      	adds	r1, #48	@ 0x30
 8005aba:	1e94      	subs	r4, r2, #2
 8005abc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005ac0:	4623      	mov	r3, r4
 8005ac2:	1c41      	adds	r1, r0, #1
 8005ac4:	42ab      	cmp	r3, r5
 8005ac6:	d30a      	bcc.n	8005ade <__exponent+0x5e>
 8005ac8:	f10d 0309 	add.w	r3, sp, #9
 8005acc:	1a9b      	subs	r3, r3, r2
 8005ace:	42ac      	cmp	r4, r5
 8005ad0:	bf88      	it	hi
 8005ad2:	2300      	movhi	r3, #0
 8005ad4:	3302      	adds	r3, #2
 8005ad6:	4403      	add	r3, r0
 8005ad8:	1a18      	subs	r0, r3, r0
 8005ada:	b003      	add	sp, #12
 8005adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ade:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005ae2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005ae6:	e7ed      	b.n	8005ac4 <__exponent+0x44>
 8005ae8:	2330      	movs	r3, #48	@ 0x30
 8005aea:	3130      	adds	r1, #48	@ 0x30
 8005aec:	7083      	strb	r3, [r0, #2]
 8005aee:	70c1      	strb	r1, [r0, #3]
 8005af0:	1d03      	adds	r3, r0, #4
 8005af2:	e7f1      	b.n	8005ad8 <__exponent+0x58>

08005af4 <_printf_float>:
 8005af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af8:	b091      	sub	sp, #68	@ 0x44
 8005afa:	460c      	mov	r4, r1
 8005afc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005b00:	4616      	mov	r6, r2
 8005b02:	461f      	mov	r7, r3
 8005b04:	4605      	mov	r5, r0
 8005b06:	f000 fcfb 	bl	8006500 <_localeconv_r>
 8005b0a:	6803      	ldr	r3, [r0, #0]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	9308      	str	r3, [sp, #32]
 8005b10:	f7fa fb1e 	bl	8000150 <strlen>
 8005b14:	2300      	movs	r3, #0
 8005b16:	930e      	str	r3, [sp, #56]	@ 0x38
 8005b18:	f8d8 3000 	ldr.w	r3, [r8]
 8005b1c:	9009      	str	r0, [sp, #36]	@ 0x24
 8005b1e:	3307      	adds	r3, #7
 8005b20:	f023 0307 	bic.w	r3, r3, #7
 8005b24:	f103 0208 	add.w	r2, r3, #8
 8005b28:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005b2c:	f8d4 b000 	ldr.w	fp, [r4]
 8005b30:	f8c8 2000 	str.w	r2, [r8]
 8005b34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b38:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005b3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b3e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005b42:	f04f 32ff 	mov.w	r2, #4294967295
 8005b46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005b4a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005b4e:	4b9c      	ldr	r3, [pc, #624]	@ (8005dc0 <_printf_float+0x2cc>)
 8005b50:	f7fa ff5c 	bl	8000a0c <__aeabi_dcmpun>
 8005b54:	bb70      	cbnz	r0, 8005bb4 <_printf_float+0xc0>
 8005b56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b5e:	4b98      	ldr	r3, [pc, #608]	@ (8005dc0 <_printf_float+0x2cc>)
 8005b60:	f7fa ff36 	bl	80009d0 <__aeabi_dcmple>
 8005b64:	bb30      	cbnz	r0, 8005bb4 <_printf_float+0xc0>
 8005b66:	2200      	movs	r2, #0
 8005b68:	2300      	movs	r3, #0
 8005b6a:	4640      	mov	r0, r8
 8005b6c:	4649      	mov	r1, r9
 8005b6e:	f7fa ff25 	bl	80009bc <__aeabi_dcmplt>
 8005b72:	b110      	cbz	r0, 8005b7a <_printf_float+0x86>
 8005b74:	232d      	movs	r3, #45	@ 0x2d
 8005b76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b7a:	4a92      	ldr	r2, [pc, #584]	@ (8005dc4 <_printf_float+0x2d0>)
 8005b7c:	4b92      	ldr	r3, [pc, #584]	@ (8005dc8 <_printf_float+0x2d4>)
 8005b7e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005b82:	bf8c      	ite	hi
 8005b84:	4690      	movhi	r8, r2
 8005b86:	4698      	movls	r8, r3
 8005b88:	2303      	movs	r3, #3
 8005b8a:	f04f 0900 	mov.w	r9, #0
 8005b8e:	6123      	str	r3, [r4, #16]
 8005b90:	f02b 0304 	bic.w	r3, fp, #4
 8005b94:	6023      	str	r3, [r4, #0]
 8005b96:	4633      	mov	r3, r6
 8005b98:	4621      	mov	r1, r4
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	9700      	str	r7, [sp, #0]
 8005b9e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005ba0:	f000 f9d4 	bl	8005f4c <_printf_common>
 8005ba4:	3001      	adds	r0, #1
 8005ba6:	f040 8090 	bne.w	8005cca <_printf_float+0x1d6>
 8005baa:	f04f 30ff 	mov.w	r0, #4294967295
 8005bae:	b011      	add	sp, #68	@ 0x44
 8005bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bb4:	4642      	mov	r2, r8
 8005bb6:	464b      	mov	r3, r9
 8005bb8:	4640      	mov	r0, r8
 8005bba:	4649      	mov	r1, r9
 8005bbc:	f7fa ff26 	bl	8000a0c <__aeabi_dcmpun>
 8005bc0:	b148      	cbz	r0, 8005bd6 <_printf_float+0xe2>
 8005bc2:	464b      	mov	r3, r9
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	bfb8      	it	lt
 8005bc8:	232d      	movlt	r3, #45	@ 0x2d
 8005bca:	4a80      	ldr	r2, [pc, #512]	@ (8005dcc <_printf_float+0x2d8>)
 8005bcc:	bfb8      	it	lt
 8005bce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005bd2:	4b7f      	ldr	r3, [pc, #508]	@ (8005dd0 <_printf_float+0x2dc>)
 8005bd4:	e7d3      	b.n	8005b7e <_printf_float+0x8a>
 8005bd6:	6863      	ldr	r3, [r4, #4]
 8005bd8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	d13f      	bne.n	8005c60 <_printf_float+0x16c>
 8005be0:	2306      	movs	r3, #6
 8005be2:	6063      	str	r3, [r4, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005bea:	6023      	str	r3, [r4, #0]
 8005bec:	9206      	str	r2, [sp, #24]
 8005bee:	aa0e      	add	r2, sp, #56	@ 0x38
 8005bf0:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005bf4:	aa0d      	add	r2, sp, #52	@ 0x34
 8005bf6:	9203      	str	r2, [sp, #12]
 8005bf8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005bfc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005c00:	6863      	ldr	r3, [r4, #4]
 8005c02:	4642      	mov	r2, r8
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	4628      	mov	r0, r5
 8005c08:	464b      	mov	r3, r9
 8005c0a:	910a      	str	r1, [sp, #40]	@ 0x28
 8005c0c:	f7ff fed4 	bl	80059b8 <__cvt>
 8005c10:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005c12:	4680      	mov	r8, r0
 8005c14:	2947      	cmp	r1, #71	@ 0x47
 8005c16:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005c18:	d128      	bne.n	8005c6c <_printf_float+0x178>
 8005c1a:	1cc8      	adds	r0, r1, #3
 8005c1c:	db02      	blt.n	8005c24 <_printf_float+0x130>
 8005c1e:	6863      	ldr	r3, [r4, #4]
 8005c20:	4299      	cmp	r1, r3
 8005c22:	dd40      	ble.n	8005ca6 <_printf_float+0x1b2>
 8005c24:	f1aa 0a02 	sub.w	sl, sl, #2
 8005c28:	fa5f fa8a 	uxtb.w	sl, sl
 8005c2c:	4652      	mov	r2, sl
 8005c2e:	3901      	subs	r1, #1
 8005c30:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005c34:	910d      	str	r1, [sp, #52]	@ 0x34
 8005c36:	f7ff ff23 	bl	8005a80 <__exponent>
 8005c3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c3c:	4681      	mov	r9, r0
 8005c3e:	1813      	adds	r3, r2, r0
 8005c40:	2a01      	cmp	r2, #1
 8005c42:	6123      	str	r3, [r4, #16]
 8005c44:	dc02      	bgt.n	8005c4c <_printf_float+0x158>
 8005c46:	6822      	ldr	r2, [r4, #0]
 8005c48:	07d2      	lsls	r2, r2, #31
 8005c4a:	d501      	bpl.n	8005c50 <_printf_float+0x15c>
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	6123      	str	r3, [r4, #16]
 8005c50:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d09e      	beq.n	8005b96 <_printf_float+0xa2>
 8005c58:	232d      	movs	r3, #45	@ 0x2d
 8005c5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c5e:	e79a      	b.n	8005b96 <_printf_float+0xa2>
 8005c60:	2947      	cmp	r1, #71	@ 0x47
 8005c62:	d1bf      	bne.n	8005be4 <_printf_float+0xf0>
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1bd      	bne.n	8005be4 <_printf_float+0xf0>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e7ba      	b.n	8005be2 <_printf_float+0xee>
 8005c6c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005c70:	d9dc      	bls.n	8005c2c <_printf_float+0x138>
 8005c72:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005c76:	d118      	bne.n	8005caa <_printf_float+0x1b6>
 8005c78:	2900      	cmp	r1, #0
 8005c7a:	6863      	ldr	r3, [r4, #4]
 8005c7c:	dd0b      	ble.n	8005c96 <_printf_float+0x1a2>
 8005c7e:	6121      	str	r1, [r4, #16]
 8005c80:	b913      	cbnz	r3, 8005c88 <_printf_float+0x194>
 8005c82:	6822      	ldr	r2, [r4, #0]
 8005c84:	07d0      	lsls	r0, r2, #31
 8005c86:	d502      	bpl.n	8005c8e <_printf_float+0x19a>
 8005c88:	3301      	adds	r3, #1
 8005c8a:	440b      	add	r3, r1
 8005c8c:	6123      	str	r3, [r4, #16]
 8005c8e:	f04f 0900 	mov.w	r9, #0
 8005c92:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005c94:	e7dc      	b.n	8005c50 <_printf_float+0x15c>
 8005c96:	b913      	cbnz	r3, 8005c9e <_printf_float+0x1aa>
 8005c98:	6822      	ldr	r2, [r4, #0]
 8005c9a:	07d2      	lsls	r2, r2, #31
 8005c9c:	d501      	bpl.n	8005ca2 <_printf_float+0x1ae>
 8005c9e:	3302      	adds	r3, #2
 8005ca0:	e7f4      	b.n	8005c8c <_printf_float+0x198>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e7f2      	b.n	8005c8c <_printf_float+0x198>
 8005ca6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005caa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005cac:	4299      	cmp	r1, r3
 8005cae:	db05      	blt.n	8005cbc <_printf_float+0x1c8>
 8005cb0:	6823      	ldr	r3, [r4, #0]
 8005cb2:	6121      	str	r1, [r4, #16]
 8005cb4:	07d8      	lsls	r0, r3, #31
 8005cb6:	d5ea      	bpl.n	8005c8e <_printf_float+0x19a>
 8005cb8:	1c4b      	adds	r3, r1, #1
 8005cba:	e7e7      	b.n	8005c8c <_printf_float+0x198>
 8005cbc:	2900      	cmp	r1, #0
 8005cbe:	bfcc      	ite	gt
 8005cc0:	2201      	movgt	r2, #1
 8005cc2:	f1c1 0202 	rsble	r2, r1, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	e7e0      	b.n	8005c8c <_printf_float+0x198>
 8005cca:	6823      	ldr	r3, [r4, #0]
 8005ccc:	055a      	lsls	r2, r3, #21
 8005cce:	d407      	bmi.n	8005ce0 <_printf_float+0x1ec>
 8005cd0:	6923      	ldr	r3, [r4, #16]
 8005cd2:	4642      	mov	r2, r8
 8005cd4:	4631      	mov	r1, r6
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	47b8      	blx	r7
 8005cda:	3001      	adds	r0, #1
 8005cdc:	d12b      	bne.n	8005d36 <_printf_float+0x242>
 8005cde:	e764      	b.n	8005baa <_printf_float+0xb6>
 8005ce0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005ce4:	f240 80dc 	bls.w	8005ea0 <_printf_float+0x3ac>
 8005ce8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005cec:	2200      	movs	r2, #0
 8005cee:	2300      	movs	r3, #0
 8005cf0:	f7fa fe5a 	bl	80009a8 <__aeabi_dcmpeq>
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	d033      	beq.n	8005d60 <_printf_float+0x26c>
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	4631      	mov	r1, r6
 8005cfc:	4628      	mov	r0, r5
 8005cfe:	4a35      	ldr	r2, [pc, #212]	@ (8005dd4 <_printf_float+0x2e0>)
 8005d00:	47b8      	blx	r7
 8005d02:	3001      	adds	r0, #1
 8005d04:	f43f af51 	beq.w	8005baa <_printf_float+0xb6>
 8005d08:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005d0c:	4543      	cmp	r3, r8
 8005d0e:	db02      	blt.n	8005d16 <_printf_float+0x222>
 8005d10:	6823      	ldr	r3, [r4, #0]
 8005d12:	07d8      	lsls	r0, r3, #31
 8005d14:	d50f      	bpl.n	8005d36 <_printf_float+0x242>
 8005d16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005d1a:	4631      	mov	r1, r6
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	47b8      	blx	r7
 8005d20:	3001      	adds	r0, #1
 8005d22:	f43f af42 	beq.w	8005baa <_printf_float+0xb6>
 8005d26:	f04f 0900 	mov.w	r9, #0
 8005d2a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005d2e:	f104 0a1a 	add.w	sl, r4, #26
 8005d32:	45c8      	cmp	r8, r9
 8005d34:	dc09      	bgt.n	8005d4a <_printf_float+0x256>
 8005d36:	6823      	ldr	r3, [r4, #0]
 8005d38:	079b      	lsls	r3, r3, #30
 8005d3a:	f100 8102 	bmi.w	8005f42 <_printf_float+0x44e>
 8005d3e:	68e0      	ldr	r0, [r4, #12]
 8005d40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005d42:	4298      	cmp	r0, r3
 8005d44:	bfb8      	it	lt
 8005d46:	4618      	movlt	r0, r3
 8005d48:	e731      	b.n	8005bae <_printf_float+0xba>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	4652      	mov	r2, sl
 8005d4e:	4631      	mov	r1, r6
 8005d50:	4628      	mov	r0, r5
 8005d52:	47b8      	blx	r7
 8005d54:	3001      	adds	r0, #1
 8005d56:	f43f af28 	beq.w	8005baa <_printf_float+0xb6>
 8005d5a:	f109 0901 	add.w	r9, r9, #1
 8005d5e:	e7e8      	b.n	8005d32 <_printf_float+0x23e>
 8005d60:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	dc38      	bgt.n	8005dd8 <_printf_float+0x2e4>
 8005d66:	2301      	movs	r3, #1
 8005d68:	4631      	mov	r1, r6
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	4a19      	ldr	r2, [pc, #100]	@ (8005dd4 <_printf_float+0x2e0>)
 8005d6e:	47b8      	blx	r7
 8005d70:	3001      	adds	r0, #1
 8005d72:	f43f af1a 	beq.w	8005baa <_printf_float+0xb6>
 8005d76:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005d7a:	ea59 0303 	orrs.w	r3, r9, r3
 8005d7e:	d102      	bne.n	8005d86 <_printf_float+0x292>
 8005d80:	6823      	ldr	r3, [r4, #0]
 8005d82:	07d9      	lsls	r1, r3, #31
 8005d84:	d5d7      	bpl.n	8005d36 <_printf_float+0x242>
 8005d86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005d8a:	4631      	mov	r1, r6
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	47b8      	blx	r7
 8005d90:	3001      	adds	r0, #1
 8005d92:	f43f af0a 	beq.w	8005baa <_printf_float+0xb6>
 8005d96:	f04f 0a00 	mov.w	sl, #0
 8005d9a:	f104 0b1a 	add.w	fp, r4, #26
 8005d9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005da0:	425b      	negs	r3, r3
 8005da2:	4553      	cmp	r3, sl
 8005da4:	dc01      	bgt.n	8005daa <_printf_float+0x2b6>
 8005da6:	464b      	mov	r3, r9
 8005da8:	e793      	b.n	8005cd2 <_printf_float+0x1de>
 8005daa:	2301      	movs	r3, #1
 8005dac:	465a      	mov	r2, fp
 8005dae:	4631      	mov	r1, r6
 8005db0:	4628      	mov	r0, r5
 8005db2:	47b8      	blx	r7
 8005db4:	3001      	adds	r0, #1
 8005db6:	f43f aef8 	beq.w	8005baa <_printf_float+0xb6>
 8005dba:	f10a 0a01 	add.w	sl, sl, #1
 8005dbe:	e7ee      	b.n	8005d9e <_printf_float+0x2aa>
 8005dc0:	7fefffff 	.word	0x7fefffff
 8005dc4:	0800a3d2 	.word	0x0800a3d2
 8005dc8:	0800a3ce 	.word	0x0800a3ce
 8005dcc:	0800a3da 	.word	0x0800a3da
 8005dd0:	0800a3d6 	.word	0x0800a3d6
 8005dd4:	0800a3de 	.word	0x0800a3de
 8005dd8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005dda:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005dde:	4553      	cmp	r3, sl
 8005de0:	bfa8      	it	ge
 8005de2:	4653      	movge	r3, sl
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	4699      	mov	r9, r3
 8005de8:	dc36      	bgt.n	8005e58 <_printf_float+0x364>
 8005dea:	f04f 0b00 	mov.w	fp, #0
 8005dee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005df2:	f104 021a 	add.w	r2, r4, #26
 8005df6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005df8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005dfa:	eba3 0309 	sub.w	r3, r3, r9
 8005dfe:	455b      	cmp	r3, fp
 8005e00:	dc31      	bgt.n	8005e66 <_printf_float+0x372>
 8005e02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e04:	459a      	cmp	sl, r3
 8005e06:	dc3a      	bgt.n	8005e7e <_printf_float+0x38a>
 8005e08:	6823      	ldr	r3, [r4, #0]
 8005e0a:	07da      	lsls	r2, r3, #31
 8005e0c:	d437      	bmi.n	8005e7e <_printf_float+0x38a>
 8005e0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e10:	ebaa 0903 	sub.w	r9, sl, r3
 8005e14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e16:	ebaa 0303 	sub.w	r3, sl, r3
 8005e1a:	4599      	cmp	r9, r3
 8005e1c:	bfa8      	it	ge
 8005e1e:	4699      	movge	r9, r3
 8005e20:	f1b9 0f00 	cmp.w	r9, #0
 8005e24:	dc33      	bgt.n	8005e8e <_printf_float+0x39a>
 8005e26:	f04f 0800 	mov.w	r8, #0
 8005e2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e2e:	f104 0b1a 	add.w	fp, r4, #26
 8005e32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e34:	ebaa 0303 	sub.w	r3, sl, r3
 8005e38:	eba3 0309 	sub.w	r3, r3, r9
 8005e3c:	4543      	cmp	r3, r8
 8005e3e:	f77f af7a 	ble.w	8005d36 <_printf_float+0x242>
 8005e42:	2301      	movs	r3, #1
 8005e44:	465a      	mov	r2, fp
 8005e46:	4631      	mov	r1, r6
 8005e48:	4628      	mov	r0, r5
 8005e4a:	47b8      	blx	r7
 8005e4c:	3001      	adds	r0, #1
 8005e4e:	f43f aeac 	beq.w	8005baa <_printf_float+0xb6>
 8005e52:	f108 0801 	add.w	r8, r8, #1
 8005e56:	e7ec      	b.n	8005e32 <_printf_float+0x33e>
 8005e58:	4642      	mov	r2, r8
 8005e5a:	4631      	mov	r1, r6
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	47b8      	blx	r7
 8005e60:	3001      	adds	r0, #1
 8005e62:	d1c2      	bne.n	8005dea <_printf_float+0x2f6>
 8005e64:	e6a1      	b.n	8005baa <_printf_float+0xb6>
 8005e66:	2301      	movs	r3, #1
 8005e68:	4631      	mov	r1, r6
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	920a      	str	r2, [sp, #40]	@ 0x28
 8005e6e:	47b8      	blx	r7
 8005e70:	3001      	adds	r0, #1
 8005e72:	f43f ae9a 	beq.w	8005baa <_printf_float+0xb6>
 8005e76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e78:	f10b 0b01 	add.w	fp, fp, #1
 8005e7c:	e7bb      	b.n	8005df6 <_printf_float+0x302>
 8005e7e:	4631      	mov	r1, r6
 8005e80:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e84:	4628      	mov	r0, r5
 8005e86:	47b8      	blx	r7
 8005e88:	3001      	adds	r0, #1
 8005e8a:	d1c0      	bne.n	8005e0e <_printf_float+0x31a>
 8005e8c:	e68d      	b.n	8005baa <_printf_float+0xb6>
 8005e8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e90:	464b      	mov	r3, r9
 8005e92:	4631      	mov	r1, r6
 8005e94:	4628      	mov	r0, r5
 8005e96:	4442      	add	r2, r8
 8005e98:	47b8      	blx	r7
 8005e9a:	3001      	adds	r0, #1
 8005e9c:	d1c3      	bne.n	8005e26 <_printf_float+0x332>
 8005e9e:	e684      	b.n	8005baa <_printf_float+0xb6>
 8005ea0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005ea4:	f1ba 0f01 	cmp.w	sl, #1
 8005ea8:	dc01      	bgt.n	8005eae <_printf_float+0x3ba>
 8005eaa:	07db      	lsls	r3, r3, #31
 8005eac:	d536      	bpl.n	8005f1c <_printf_float+0x428>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	4642      	mov	r2, r8
 8005eb2:	4631      	mov	r1, r6
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	47b8      	blx	r7
 8005eb8:	3001      	adds	r0, #1
 8005eba:	f43f ae76 	beq.w	8005baa <_printf_float+0xb6>
 8005ebe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005ec2:	4631      	mov	r1, r6
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	47b8      	blx	r7
 8005ec8:	3001      	adds	r0, #1
 8005eca:	f43f ae6e 	beq.w	8005baa <_printf_float+0xb6>
 8005ece:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005eda:	f7fa fd65 	bl	80009a8 <__aeabi_dcmpeq>
 8005ede:	b9c0      	cbnz	r0, 8005f12 <_printf_float+0x41e>
 8005ee0:	4653      	mov	r3, sl
 8005ee2:	f108 0201 	add.w	r2, r8, #1
 8005ee6:	4631      	mov	r1, r6
 8005ee8:	4628      	mov	r0, r5
 8005eea:	47b8      	blx	r7
 8005eec:	3001      	adds	r0, #1
 8005eee:	d10c      	bne.n	8005f0a <_printf_float+0x416>
 8005ef0:	e65b      	b.n	8005baa <_printf_float+0xb6>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	465a      	mov	r2, fp
 8005ef6:	4631      	mov	r1, r6
 8005ef8:	4628      	mov	r0, r5
 8005efa:	47b8      	blx	r7
 8005efc:	3001      	adds	r0, #1
 8005efe:	f43f ae54 	beq.w	8005baa <_printf_float+0xb6>
 8005f02:	f108 0801 	add.w	r8, r8, #1
 8005f06:	45d0      	cmp	r8, sl
 8005f08:	dbf3      	blt.n	8005ef2 <_printf_float+0x3fe>
 8005f0a:	464b      	mov	r3, r9
 8005f0c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005f10:	e6e0      	b.n	8005cd4 <_printf_float+0x1e0>
 8005f12:	f04f 0800 	mov.w	r8, #0
 8005f16:	f104 0b1a 	add.w	fp, r4, #26
 8005f1a:	e7f4      	b.n	8005f06 <_printf_float+0x412>
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	4642      	mov	r2, r8
 8005f20:	e7e1      	b.n	8005ee6 <_printf_float+0x3f2>
 8005f22:	2301      	movs	r3, #1
 8005f24:	464a      	mov	r2, r9
 8005f26:	4631      	mov	r1, r6
 8005f28:	4628      	mov	r0, r5
 8005f2a:	47b8      	blx	r7
 8005f2c:	3001      	adds	r0, #1
 8005f2e:	f43f ae3c 	beq.w	8005baa <_printf_float+0xb6>
 8005f32:	f108 0801 	add.w	r8, r8, #1
 8005f36:	68e3      	ldr	r3, [r4, #12]
 8005f38:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005f3a:	1a5b      	subs	r3, r3, r1
 8005f3c:	4543      	cmp	r3, r8
 8005f3e:	dcf0      	bgt.n	8005f22 <_printf_float+0x42e>
 8005f40:	e6fd      	b.n	8005d3e <_printf_float+0x24a>
 8005f42:	f04f 0800 	mov.w	r8, #0
 8005f46:	f104 0919 	add.w	r9, r4, #25
 8005f4a:	e7f4      	b.n	8005f36 <_printf_float+0x442>

08005f4c <_printf_common>:
 8005f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f50:	4616      	mov	r6, r2
 8005f52:	4698      	mov	r8, r3
 8005f54:	688a      	ldr	r2, [r1, #8]
 8005f56:	690b      	ldr	r3, [r1, #16]
 8005f58:	4607      	mov	r7, r0
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	bfb8      	it	lt
 8005f5e:	4613      	movlt	r3, r2
 8005f60:	6033      	str	r3, [r6, #0]
 8005f62:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f66:	460c      	mov	r4, r1
 8005f68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f6c:	b10a      	cbz	r2, 8005f72 <_printf_common+0x26>
 8005f6e:	3301      	adds	r3, #1
 8005f70:	6033      	str	r3, [r6, #0]
 8005f72:	6823      	ldr	r3, [r4, #0]
 8005f74:	0699      	lsls	r1, r3, #26
 8005f76:	bf42      	ittt	mi
 8005f78:	6833      	ldrmi	r3, [r6, #0]
 8005f7a:	3302      	addmi	r3, #2
 8005f7c:	6033      	strmi	r3, [r6, #0]
 8005f7e:	6825      	ldr	r5, [r4, #0]
 8005f80:	f015 0506 	ands.w	r5, r5, #6
 8005f84:	d106      	bne.n	8005f94 <_printf_common+0x48>
 8005f86:	f104 0a19 	add.w	sl, r4, #25
 8005f8a:	68e3      	ldr	r3, [r4, #12]
 8005f8c:	6832      	ldr	r2, [r6, #0]
 8005f8e:	1a9b      	subs	r3, r3, r2
 8005f90:	42ab      	cmp	r3, r5
 8005f92:	dc2b      	bgt.n	8005fec <_printf_common+0xa0>
 8005f94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f98:	6822      	ldr	r2, [r4, #0]
 8005f9a:	3b00      	subs	r3, #0
 8005f9c:	bf18      	it	ne
 8005f9e:	2301      	movne	r3, #1
 8005fa0:	0692      	lsls	r2, r2, #26
 8005fa2:	d430      	bmi.n	8006006 <_printf_common+0xba>
 8005fa4:	4641      	mov	r1, r8
 8005fa6:	4638      	mov	r0, r7
 8005fa8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005fac:	47c8      	blx	r9
 8005fae:	3001      	adds	r0, #1
 8005fb0:	d023      	beq.n	8005ffa <_printf_common+0xae>
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	6922      	ldr	r2, [r4, #16]
 8005fb6:	f003 0306 	and.w	r3, r3, #6
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	bf14      	ite	ne
 8005fbe:	2500      	movne	r5, #0
 8005fc0:	6833      	ldreq	r3, [r6, #0]
 8005fc2:	f04f 0600 	mov.w	r6, #0
 8005fc6:	bf08      	it	eq
 8005fc8:	68e5      	ldreq	r5, [r4, #12]
 8005fca:	f104 041a 	add.w	r4, r4, #26
 8005fce:	bf08      	it	eq
 8005fd0:	1aed      	subeq	r5, r5, r3
 8005fd2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005fd6:	bf08      	it	eq
 8005fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	bfc4      	itt	gt
 8005fe0:	1a9b      	subgt	r3, r3, r2
 8005fe2:	18ed      	addgt	r5, r5, r3
 8005fe4:	42b5      	cmp	r5, r6
 8005fe6:	d11a      	bne.n	800601e <_printf_common+0xd2>
 8005fe8:	2000      	movs	r0, #0
 8005fea:	e008      	b.n	8005ffe <_printf_common+0xb2>
 8005fec:	2301      	movs	r3, #1
 8005fee:	4652      	mov	r2, sl
 8005ff0:	4641      	mov	r1, r8
 8005ff2:	4638      	mov	r0, r7
 8005ff4:	47c8      	blx	r9
 8005ff6:	3001      	adds	r0, #1
 8005ff8:	d103      	bne.n	8006002 <_printf_common+0xb6>
 8005ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8005ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006002:	3501      	adds	r5, #1
 8006004:	e7c1      	b.n	8005f8a <_printf_common+0x3e>
 8006006:	2030      	movs	r0, #48	@ 0x30
 8006008:	18e1      	adds	r1, r4, r3
 800600a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006014:	4422      	add	r2, r4
 8006016:	3302      	adds	r3, #2
 8006018:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800601c:	e7c2      	b.n	8005fa4 <_printf_common+0x58>
 800601e:	2301      	movs	r3, #1
 8006020:	4622      	mov	r2, r4
 8006022:	4641      	mov	r1, r8
 8006024:	4638      	mov	r0, r7
 8006026:	47c8      	blx	r9
 8006028:	3001      	adds	r0, #1
 800602a:	d0e6      	beq.n	8005ffa <_printf_common+0xae>
 800602c:	3601      	adds	r6, #1
 800602e:	e7d9      	b.n	8005fe4 <_printf_common+0x98>

08006030 <_printf_i>:
 8006030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006034:	7e0f      	ldrb	r7, [r1, #24]
 8006036:	4691      	mov	r9, r2
 8006038:	2f78      	cmp	r7, #120	@ 0x78
 800603a:	4680      	mov	r8, r0
 800603c:	460c      	mov	r4, r1
 800603e:	469a      	mov	sl, r3
 8006040:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006042:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006046:	d807      	bhi.n	8006058 <_printf_i+0x28>
 8006048:	2f62      	cmp	r7, #98	@ 0x62
 800604a:	d80a      	bhi.n	8006062 <_printf_i+0x32>
 800604c:	2f00      	cmp	r7, #0
 800604e:	f000 80d1 	beq.w	80061f4 <_printf_i+0x1c4>
 8006052:	2f58      	cmp	r7, #88	@ 0x58
 8006054:	f000 80b8 	beq.w	80061c8 <_printf_i+0x198>
 8006058:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800605c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006060:	e03a      	b.n	80060d8 <_printf_i+0xa8>
 8006062:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006066:	2b15      	cmp	r3, #21
 8006068:	d8f6      	bhi.n	8006058 <_printf_i+0x28>
 800606a:	a101      	add	r1, pc, #4	@ (adr r1, 8006070 <_printf_i+0x40>)
 800606c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006070:	080060c9 	.word	0x080060c9
 8006074:	080060dd 	.word	0x080060dd
 8006078:	08006059 	.word	0x08006059
 800607c:	08006059 	.word	0x08006059
 8006080:	08006059 	.word	0x08006059
 8006084:	08006059 	.word	0x08006059
 8006088:	080060dd 	.word	0x080060dd
 800608c:	08006059 	.word	0x08006059
 8006090:	08006059 	.word	0x08006059
 8006094:	08006059 	.word	0x08006059
 8006098:	08006059 	.word	0x08006059
 800609c:	080061db 	.word	0x080061db
 80060a0:	08006107 	.word	0x08006107
 80060a4:	08006195 	.word	0x08006195
 80060a8:	08006059 	.word	0x08006059
 80060ac:	08006059 	.word	0x08006059
 80060b0:	080061fd 	.word	0x080061fd
 80060b4:	08006059 	.word	0x08006059
 80060b8:	08006107 	.word	0x08006107
 80060bc:	08006059 	.word	0x08006059
 80060c0:	08006059 	.word	0x08006059
 80060c4:	0800619d 	.word	0x0800619d
 80060c8:	6833      	ldr	r3, [r6, #0]
 80060ca:	1d1a      	adds	r2, r3, #4
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6032      	str	r2, [r6, #0]
 80060d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80060d8:	2301      	movs	r3, #1
 80060da:	e09c      	b.n	8006216 <_printf_i+0x1e6>
 80060dc:	6833      	ldr	r3, [r6, #0]
 80060de:	6820      	ldr	r0, [r4, #0]
 80060e0:	1d19      	adds	r1, r3, #4
 80060e2:	6031      	str	r1, [r6, #0]
 80060e4:	0606      	lsls	r6, r0, #24
 80060e6:	d501      	bpl.n	80060ec <_printf_i+0xbc>
 80060e8:	681d      	ldr	r5, [r3, #0]
 80060ea:	e003      	b.n	80060f4 <_printf_i+0xc4>
 80060ec:	0645      	lsls	r5, r0, #25
 80060ee:	d5fb      	bpl.n	80060e8 <_printf_i+0xb8>
 80060f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80060f4:	2d00      	cmp	r5, #0
 80060f6:	da03      	bge.n	8006100 <_printf_i+0xd0>
 80060f8:	232d      	movs	r3, #45	@ 0x2d
 80060fa:	426d      	negs	r5, r5
 80060fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006100:	230a      	movs	r3, #10
 8006102:	4858      	ldr	r0, [pc, #352]	@ (8006264 <_printf_i+0x234>)
 8006104:	e011      	b.n	800612a <_printf_i+0xfa>
 8006106:	6821      	ldr	r1, [r4, #0]
 8006108:	6833      	ldr	r3, [r6, #0]
 800610a:	0608      	lsls	r0, r1, #24
 800610c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006110:	d402      	bmi.n	8006118 <_printf_i+0xe8>
 8006112:	0649      	lsls	r1, r1, #25
 8006114:	bf48      	it	mi
 8006116:	b2ad      	uxthmi	r5, r5
 8006118:	2f6f      	cmp	r7, #111	@ 0x6f
 800611a:	6033      	str	r3, [r6, #0]
 800611c:	bf14      	ite	ne
 800611e:	230a      	movne	r3, #10
 8006120:	2308      	moveq	r3, #8
 8006122:	4850      	ldr	r0, [pc, #320]	@ (8006264 <_printf_i+0x234>)
 8006124:	2100      	movs	r1, #0
 8006126:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800612a:	6866      	ldr	r6, [r4, #4]
 800612c:	2e00      	cmp	r6, #0
 800612e:	60a6      	str	r6, [r4, #8]
 8006130:	db05      	blt.n	800613e <_printf_i+0x10e>
 8006132:	6821      	ldr	r1, [r4, #0]
 8006134:	432e      	orrs	r6, r5
 8006136:	f021 0104 	bic.w	r1, r1, #4
 800613a:	6021      	str	r1, [r4, #0]
 800613c:	d04b      	beq.n	80061d6 <_printf_i+0x1a6>
 800613e:	4616      	mov	r6, r2
 8006140:	fbb5 f1f3 	udiv	r1, r5, r3
 8006144:	fb03 5711 	mls	r7, r3, r1, r5
 8006148:	5dc7      	ldrb	r7, [r0, r7]
 800614a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800614e:	462f      	mov	r7, r5
 8006150:	42bb      	cmp	r3, r7
 8006152:	460d      	mov	r5, r1
 8006154:	d9f4      	bls.n	8006140 <_printf_i+0x110>
 8006156:	2b08      	cmp	r3, #8
 8006158:	d10b      	bne.n	8006172 <_printf_i+0x142>
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	07df      	lsls	r7, r3, #31
 800615e:	d508      	bpl.n	8006172 <_printf_i+0x142>
 8006160:	6923      	ldr	r3, [r4, #16]
 8006162:	6861      	ldr	r1, [r4, #4]
 8006164:	4299      	cmp	r1, r3
 8006166:	bfde      	ittt	le
 8006168:	2330      	movle	r3, #48	@ 0x30
 800616a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800616e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006172:	1b92      	subs	r2, r2, r6
 8006174:	6122      	str	r2, [r4, #16]
 8006176:	464b      	mov	r3, r9
 8006178:	4621      	mov	r1, r4
 800617a:	4640      	mov	r0, r8
 800617c:	f8cd a000 	str.w	sl, [sp]
 8006180:	aa03      	add	r2, sp, #12
 8006182:	f7ff fee3 	bl	8005f4c <_printf_common>
 8006186:	3001      	adds	r0, #1
 8006188:	d14a      	bne.n	8006220 <_printf_i+0x1f0>
 800618a:	f04f 30ff 	mov.w	r0, #4294967295
 800618e:	b004      	add	sp, #16
 8006190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006194:	6823      	ldr	r3, [r4, #0]
 8006196:	f043 0320 	orr.w	r3, r3, #32
 800619a:	6023      	str	r3, [r4, #0]
 800619c:	2778      	movs	r7, #120	@ 0x78
 800619e:	4832      	ldr	r0, [pc, #200]	@ (8006268 <_printf_i+0x238>)
 80061a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80061a4:	6823      	ldr	r3, [r4, #0]
 80061a6:	6831      	ldr	r1, [r6, #0]
 80061a8:	061f      	lsls	r7, r3, #24
 80061aa:	f851 5b04 	ldr.w	r5, [r1], #4
 80061ae:	d402      	bmi.n	80061b6 <_printf_i+0x186>
 80061b0:	065f      	lsls	r7, r3, #25
 80061b2:	bf48      	it	mi
 80061b4:	b2ad      	uxthmi	r5, r5
 80061b6:	6031      	str	r1, [r6, #0]
 80061b8:	07d9      	lsls	r1, r3, #31
 80061ba:	bf44      	itt	mi
 80061bc:	f043 0320 	orrmi.w	r3, r3, #32
 80061c0:	6023      	strmi	r3, [r4, #0]
 80061c2:	b11d      	cbz	r5, 80061cc <_printf_i+0x19c>
 80061c4:	2310      	movs	r3, #16
 80061c6:	e7ad      	b.n	8006124 <_printf_i+0xf4>
 80061c8:	4826      	ldr	r0, [pc, #152]	@ (8006264 <_printf_i+0x234>)
 80061ca:	e7e9      	b.n	80061a0 <_printf_i+0x170>
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	f023 0320 	bic.w	r3, r3, #32
 80061d2:	6023      	str	r3, [r4, #0]
 80061d4:	e7f6      	b.n	80061c4 <_printf_i+0x194>
 80061d6:	4616      	mov	r6, r2
 80061d8:	e7bd      	b.n	8006156 <_printf_i+0x126>
 80061da:	6833      	ldr	r3, [r6, #0]
 80061dc:	6825      	ldr	r5, [r4, #0]
 80061de:	1d18      	adds	r0, r3, #4
 80061e0:	6961      	ldr	r1, [r4, #20]
 80061e2:	6030      	str	r0, [r6, #0]
 80061e4:	062e      	lsls	r6, r5, #24
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	d501      	bpl.n	80061ee <_printf_i+0x1be>
 80061ea:	6019      	str	r1, [r3, #0]
 80061ec:	e002      	b.n	80061f4 <_printf_i+0x1c4>
 80061ee:	0668      	lsls	r0, r5, #25
 80061f0:	d5fb      	bpl.n	80061ea <_printf_i+0x1ba>
 80061f2:	8019      	strh	r1, [r3, #0]
 80061f4:	2300      	movs	r3, #0
 80061f6:	4616      	mov	r6, r2
 80061f8:	6123      	str	r3, [r4, #16]
 80061fa:	e7bc      	b.n	8006176 <_printf_i+0x146>
 80061fc:	6833      	ldr	r3, [r6, #0]
 80061fe:	2100      	movs	r1, #0
 8006200:	1d1a      	adds	r2, r3, #4
 8006202:	6032      	str	r2, [r6, #0]
 8006204:	681e      	ldr	r6, [r3, #0]
 8006206:	6862      	ldr	r2, [r4, #4]
 8006208:	4630      	mov	r0, r6
 800620a:	f000 f9f0 	bl	80065ee <memchr>
 800620e:	b108      	cbz	r0, 8006214 <_printf_i+0x1e4>
 8006210:	1b80      	subs	r0, r0, r6
 8006212:	6060      	str	r0, [r4, #4]
 8006214:	6863      	ldr	r3, [r4, #4]
 8006216:	6123      	str	r3, [r4, #16]
 8006218:	2300      	movs	r3, #0
 800621a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800621e:	e7aa      	b.n	8006176 <_printf_i+0x146>
 8006220:	4632      	mov	r2, r6
 8006222:	4649      	mov	r1, r9
 8006224:	4640      	mov	r0, r8
 8006226:	6923      	ldr	r3, [r4, #16]
 8006228:	47d0      	blx	sl
 800622a:	3001      	adds	r0, #1
 800622c:	d0ad      	beq.n	800618a <_printf_i+0x15a>
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	079b      	lsls	r3, r3, #30
 8006232:	d413      	bmi.n	800625c <_printf_i+0x22c>
 8006234:	68e0      	ldr	r0, [r4, #12]
 8006236:	9b03      	ldr	r3, [sp, #12]
 8006238:	4298      	cmp	r0, r3
 800623a:	bfb8      	it	lt
 800623c:	4618      	movlt	r0, r3
 800623e:	e7a6      	b.n	800618e <_printf_i+0x15e>
 8006240:	2301      	movs	r3, #1
 8006242:	4632      	mov	r2, r6
 8006244:	4649      	mov	r1, r9
 8006246:	4640      	mov	r0, r8
 8006248:	47d0      	blx	sl
 800624a:	3001      	adds	r0, #1
 800624c:	d09d      	beq.n	800618a <_printf_i+0x15a>
 800624e:	3501      	adds	r5, #1
 8006250:	68e3      	ldr	r3, [r4, #12]
 8006252:	9903      	ldr	r1, [sp, #12]
 8006254:	1a5b      	subs	r3, r3, r1
 8006256:	42ab      	cmp	r3, r5
 8006258:	dcf2      	bgt.n	8006240 <_printf_i+0x210>
 800625a:	e7eb      	b.n	8006234 <_printf_i+0x204>
 800625c:	2500      	movs	r5, #0
 800625e:	f104 0619 	add.w	r6, r4, #25
 8006262:	e7f5      	b.n	8006250 <_printf_i+0x220>
 8006264:	0800a3e0 	.word	0x0800a3e0
 8006268:	0800a3f1 	.word	0x0800a3f1

0800626c <std>:
 800626c:	2300      	movs	r3, #0
 800626e:	b510      	push	{r4, lr}
 8006270:	4604      	mov	r4, r0
 8006272:	e9c0 3300 	strd	r3, r3, [r0]
 8006276:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800627a:	6083      	str	r3, [r0, #8]
 800627c:	8181      	strh	r1, [r0, #12]
 800627e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006280:	81c2      	strh	r2, [r0, #14]
 8006282:	6183      	str	r3, [r0, #24]
 8006284:	4619      	mov	r1, r3
 8006286:	2208      	movs	r2, #8
 8006288:	305c      	adds	r0, #92	@ 0x5c
 800628a:	f000 f930 	bl	80064ee <memset>
 800628e:	4b0d      	ldr	r3, [pc, #52]	@ (80062c4 <std+0x58>)
 8006290:	6224      	str	r4, [r4, #32]
 8006292:	6263      	str	r3, [r4, #36]	@ 0x24
 8006294:	4b0c      	ldr	r3, [pc, #48]	@ (80062c8 <std+0x5c>)
 8006296:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006298:	4b0c      	ldr	r3, [pc, #48]	@ (80062cc <std+0x60>)
 800629a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800629c:	4b0c      	ldr	r3, [pc, #48]	@ (80062d0 <std+0x64>)
 800629e:	6323      	str	r3, [r4, #48]	@ 0x30
 80062a0:	4b0c      	ldr	r3, [pc, #48]	@ (80062d4 <std+0x68>)
 80062a2:	429c      	cmp	r4, r3
 80062a4:	d006      	beq.n	80062b4 <std+0x48>
 80062a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80062aa:	4294      	cmp	r4, r2
 80062ac:	d002      	beq.n	80062b4 <std+0x48>
 80062ae:	33d0      	adds	r3, #208	@ 0xd0
 80062b0:	429c      	cmp	r4, r3
 80062b2:	d105      	bne.n	80062c0 <std+0x54>
 80062b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80062b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062bc:	f000 b994 	b.w	80065e8 <__retarget_lock_init_recursive>
 80062c0:	bd10      	pop	{r4, pc}
 80062c2:	bf00      	nop
 80062c4:	08006435 	.word	0x08006435
 80062c8:	08006457 	.word	0x08006457
 80062cc:	0800648f 	.word	0x0800648f
 80062d0:	080064b3 	.word	0x080064b3
 80062d4:	20000788 	.word	0x20000788

080062d8 <stdio_exit_handler>:
 80062d8:	4a02      	ldr	r2, [pc, #8]	@ (80062e4 <stdio_exit_handler+0xc>)
 80062da:	4903      	ldr	r1, [pc, #12]	@ (80062e8 <stdio_exit_handler+0x10>)
 80062dc:	4803      	ldr	r0, [pc, #12]	@ (80062ec <stdio_exit_handler+0x14>)
 80062de:	f000 b869 	b.w	80063b4 <_fwalk_sglue>
 80062e2:	bf00      	nop
 80062e4:	2000000c 	.word	0x2000000c
 80062e8:	08007f81 	.word	0x08007f81
 80062ec:	2000001c 	.word	0x2000001c

080062f0 <cleanup_stdio>:
 80062f0:	6841      	ldr	r1, [r0, #4]
 80062f2:	4b0c      	ldr	r3, [pc, #48]	@ (8006324 <cleanup_stdio+0x34>)
 80062f4:	b510      	push	{r4, lr}
 80062f6:	4299      	cmp	r1, r3
 80062f8:	4604      	mov	r4, r0
 80062fa:	d001      	beq.n	8006300 <cleanup_stdio+0x10>
 80062fc:	f001 fe40 	bl	8007f80 <_fflush_r>
 8006300:	68a1      	ldr	r1, [r4, #8]
 8006302:	4b09      	ldr	r3, [pc, #36]	@ (8006328 <cleanup_stdio+0x38>)
 8006304:	4299      	cmp	r1, r3
 8006306:	d002      	beq.n	800630e <cleanup_stdio+0x1e>
 8006308:	4620      	mov	r0, r4
 800630a:	f001 fe39 	bl	8007f80 <_fflush_r>
 800630e:	68e1      	ldr	r1, [r4, #12]
 8006310:	4b06      	ldr	r3, [pc, #24]	@ (800632c <cleanup_stdio+0x3c>)
 8006312:	4299      	cmp	r1, r3
 8006314:	d004      	beq.n	8006320 <cleanup_stdio+0x30>
 8006316:	4620      	mov	r0, r4
 8006318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800631c:	f001 be30 	b.w	8007f80 <_fflush_r>
 8006320:	bd10      	pop	{r4, pc}
 8006322:	bf00      	nop
 8006324:	20000788 	.word	0x20000788
 8006328:	200007f0 	.word	0x200007f0
 800632c:	20000858 	.word	0x20000858

08006330 <global_stdio_init.part.0>:
 8006330:	b510      	push	{r4, lr}
 8006332:	4b0b      	ldr	r3, [pc, #44]	@ (8006360 <global_stdio_init.part.0+0x30>)
 8006334:	4c0b      	ldr	r4, [pc, #44]	@ (8006364 <global_stdio_init.part.0+0x34>)
 8006336:	4a0c      	ldr	r2, [pc, #48]	@ (8006368 <global_stdio_init.part.0+0x38>)
 8006338:	4620      	mov	r0, r4
 800633a:	601a      	str	r2, [r3, #0]
 800633c:	2104      	movs	r1, #4
 800633e:	2200      	movs	r2, #0
 8006340:	f7ff ff94 	bl	800626c <std>
 8006344:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006348:	2201      	movs	r2, #1
 800634a:	2109      	movs	r1, #9
 800634c:	f7ff ff8e 	bl	800626c <std>
 8006350:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006354:	2202      	movs	r2, #2
 8006356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800635a:	2112      	movs	r1, #18
 800635c:	f7ff bf86 	b.w	800626c <std>
 8006360:	200008c0 	.word	0x200008c0
 8006364:	20000788 	.word	0x20000788
 8006368:	080062d9 	.word	0x080062d9

0800636c <__sfp_lock_acquire>:
 800636c:	4801      	ldr	r0, [pc, #4]	@ (8006374 <__sfp_lock_acquire+0x8>)
 800636e:	f000 b93c 	b.w	80065ea <__retarget_lock_acquire_recursive>
 8006372:	bf00      	nop
 8006374:	200008c9 	.word	0x200008c9

08006378 <__sfp_lock_release>:
 8006378:	4801      	ldr	r0, [pc, #4]	@ (8006380 <__sfp_lock_release+0x8>)
 800637a:	f000 b937 	b.w	80065ec <__retarget_lock_release_recursive>
 800637e:	bf00      	nop
 8006380:	200008c9 	.word	0x200008c9

08006384 <__sinit>:
 8006384:	b510      	push	{r4, lr}
 8006386:	4604      	mov	r4, r0
 8006388:	f7ff fff0 	bl	800636c <__sfp_lock_acquire>
 800638c:	6a23      	ldr	r3, [r4, #32]
 800638e:	b11b      	cbz	r3, 8006398 <__sinit+0x14>
 8006390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006394:	f7ff bff0 	b.w	8006378 <__sfp_lock_release>
 8006398:	4b04      	ldr	r3, [pc, #16]	@ (80063ac <__sinit+0x28>)
 800639a:	6223      	str	r3, [r4, #32]
 800639c:	4b04      	ldr	r3, [pc, #16]	@ (80063b0 <__sinit+0x2c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1f5      	bne.n	8006390 <__sinit+0xc>
 80063a4:	f7ff ffc4 	bl	8006330 <global_stdio_init.part.0>
 80063a8:	e7f2      	b.n	8006390 <__sinit+0xc>
 80063aa:	bf00      	nop
 80063ac:	080062f1 	.word	0x080062f1
 80063b0:	200008c0 	.word	0x200008c0

080063b4 <_fwalk_sglue>:
 80063b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063b8:	4607      	mov	r7, r0
 80063ba:	4688      	mov	r8, r1
 80063bc:	4614      	mov	r4, r2
 80063be:	2600      	movs	r6, #0
 80063c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80063c4:	f1b9 0901 	subs.w	r9, r9, #1
 80063c8:	d505      	bpl.n	80063d6 <_fwalk_sglue+0x22>
 80063ca:	6824      	ldr	r4, [r4, #0]
 80063cc:	2c00      	cmp	r4, #0
 80063ce:	d1f7      	bne.n	80063c0 <_fwalk_sglue+0xc>
 80063d0:	4630      	mov	r0, r6
 80063d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063d6:	89ab      	ldrh	r3, [r5, #12]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d907      	bls.n	80063ec <_fwalk_sglue+0x38>
 80063dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063e0:	3301      	adds	r3, #1
 80063e2:	d003      	beq.n	80063ec <_fwalk_sglue+0x38>
 80063e4:	4629      	mov	r1, r5
 80063e6:	4638      	mov	r0, r7
 80063e8:	47c0      	blx	r8
 80063ea:	4306      	orrs	r6, r0
 80063ec:	3568      	adds	r5, #104	@ 0x68
 80063ee:	e7e9      	b.n	80063c4 <_fwalk_sglue+0x10>

080063f0 <siprintf>:
 80063f0:	b40e      	push	{r1, r2, r3}
 80063f2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80063f6:	b510      	push	{r4, lr}
 80063f8:	2400      	movs	r4, #0
 80063fa:	b09d      	sub	sp, #116	@ 0x74
 80063fc:	ab1f      	add	r3, sp, #124	@ 0x7c
 80063fe:	9002      	str	r0, [sp, #8]
 8006400:	9006      	str	r0, [sp, #24]
 8006402:	9107      	str	r1, [sp, #28]
 8006404:	9104      	str	r1, [sp, #16]
 8006406:	4809      	ldr	r0, [pc, #36]	@ (800642c <siprintf+0x3c>)
 8006408:	4909      	ldr	r1, [pc, #36]	@ (8006430 <siprintf+0x40>)
 800640a:	f853 2b04 	ldr.w	r2, [r3], #4
 800640e:	9105      	str	r1, [sp, #20]
 8006410:	6800      	ldr	r0, [r0, #0]
 8006412:	a902      	add	r1, sp, #8
 8006414:	9301      	str	r3, [sp, #4]
 8006416:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006418:	f001 fc36 	bl	8007c88 <_svfiprintf_r>
 800641c:	9b02      	ldr	r3, [sp, #8]
 800641e:	701c      	strb	r4, [r3, #0]
 8006420:	b01d      	add	sp, #116	@ 0x74
 8006422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006426:	b003      	add	sp, #12
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	20000018 	.word	0x20000018
 8006430:	ffff0208 	.word	0xffff0208

08006434 <__sread>:
 8006434:	b510      	push	{r4, lr}
 8006436:	460c      	mov	r4, r1
 8006438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800643c:	f000 f886 	bl	800654c <_read_r>
 8006440:	2800      	cmp	r0, #0
 8006442:	bfab      	itete	ge
 8006444:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006446:	89a3      	ldrhlt	r3, [r4, #12]
 8006448:	181b      	addge	r3, r3, r0
 800644a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800644e:	bfac      	ite	ge
 8006450:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006452:	81a3      	strhlt	r3, [r4, #12]
 8006454:	bd10      	pop	{r4, pc}

08006456 <__swrite>:
 8006456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800645a:	461f      	mov	r7, r3
 800645c:	898b      	ldrh	r3, [r1, #12]
 800645e:	4605      	mov	r5, r0
 8006460:	05db      	lsls	r3, r3, #23
 8006462:	460c      	mov	r4, r1
 8006464:	4616      	mov	r6, r2
 8006466:	d505      	bpl.n	8006474 <__swrite+0x1e>
 8006468:	2302      	movs	r3, #2
 800646a:	2200      	movs	r2, #0
 800646c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006470:	f000 f85a 	bl	8006528 <_lseek_r>
 8006474:	89a3      	ldrh	r3, [r4, #12]
 8006476:	4632      	mov	r2, r6
 8006478:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800647c:	81a3      	strh	r3, [r4, #12]
 800647e:	4628      	mov	r0, r5
 8006480:	463b      	mov	r3, r7
 8006482:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006486:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800648a:	f000 b871 	b.w	8006570 <_write_r>

0800648e <__sseek>:
 800648e:	b510      	push	{r4, lr}
 8006490:	460c      	mov	r4, r1
 8006492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006496:	f000 f847 	bl	8006528 <_lseek_r>
 800649a:	1c43      	adds	r3, r0, #1
 800649c:	89a3      	ldrh	r3, [r4, #12]
 800649e:	bf15      	itete	ne
 80064a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80064a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80064a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80064aa:	81a3      	strheq	r3, [r4, #12]
 80064ac:	bf18      	it	ne
 80064ae:	81a3      	strhne	r3, [r4, #12]
 80064b0:	bd10      	pop	{r4, pc}

080064b2 <__sclose>:
 80064b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064b6:	f000 b827 	b.w	8006508 <_close_r>

080064ba <memmove>:
 80064ba:	4288      	cmp	r0, r1
 80064bc:	b510      	push	{r4, lr}
 80064be:	eb01 0402 	add.w	r4, r1, r2
 80064c2:	d902      	bls.n	80064ca <memmove+0x10>
 80064c4:	4284      	cmp	r4, r0
 80064c6:	4623      	mov	r3, r4
 80064c8:	d807      	bhi.n	80064da <memmove+0x20>
 80064ca:	1e43      	subs	r3, r0, #1
 80064cc:	42a1      	cmp	r1, r4
 80064ce:	d008      	beq.n	80064e2 <memmove+0x28>
 80064d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064d8:	e7f8      	b.n	80064cc <memmove+0x12>
 80064da:	4601      	mov	r1, r0
 80064dc:	4402      	add	r2, r0
 80064de:	428a      	cmp	r2, r1
 80064e0:	d100      	bne.n	80064e4 <memmove+0x2a>
 80064e2:	bd10      	pop	{r4, pc}
 80064e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064e8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80064ec:	e7f7      	b.n	80064de <memmove+0x24>

080064ee <memset>:
 80064ee:	4603      	mov	r3, r0
 80064f0:	4402      	add	r2, r0
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d100      	bne.n	80064f8 <memset+0xa>
 80064f6:	4770      	bx	lr
 80064f8:	f803 1b01 	strb.w	r1, [r3], #1
 80064fc:	e7f9      	b.n	80064f2 <memset+0x4>
	...

08006500 <_localeconv_r>:
 8006500:	4800      	ldr	r0, [pc, #0]	@ (8006504 <_localeconv_r+0x4>)
 8006502:	4770      	bx	lr
 8006504:	20000158 	.word	0x20000158

08006508 <_close_r>:
 8006508:	b538      	push	{r3, r4, r5, lr}
 800650a:	2300      	movs	r3, #0
 800650c:	4d05      	ldr	r5, [pc, #20]	@ (8006524 <_close_r+0x1c>)
 800650e:	4604      	mov	r4, r0
 8006510:	4608      	mov	r0, r1
 8006512:	602b      	str	r3, [r5, #0]
 8006514:	f7fb fecb 	bl	80022ae <_close>
 8006518:	1c43      	adds	r3, r0, #1
 800651a:	d102      	bne.n	8006522 <_close_r+0x1a>
 800651c:	682b      	ldr	r3, [r5, #0]
 800651e:	b103      	cbz	r3, 8006522 <_close_r+0x1a>
 8006520:	6023      	str	r3, [r4, #0]
 8006522:	bd38      	pop	{r3, r4, r5, pc}
 8006524:	200008c4 	.word	0x200008c4

08006528 <_lseek_r>:
 8006528:	b538      	push	{r3, r4, r5, lr}
 800652a:	4604      	mov	r4, r0
 800652c:	4608      	mov	r0, r1
 800652e:	4611      	mov	r1, r2
 8006530:	2200      	movs	r2, #0
 8006532:	4d05      	ldr	r5, [pc, #20]	@ (8006548 <_lseek_r+0x20>)
 8006534:	602a      	str	r2, [r5, #0]
 8006536:	461a      	mov	r2, r3
 8006538:	f7fb fedd 	bl	80022f6 <_lseek>
 800653c:	1c43      	adds	r3, r0, #1
 800653e:	d102      	bne.n	8006546 <_lseek_r+0x1e>
 8006540:	682b      	ldr	r3, [r5, #0]
 8006542:	b103      	cbz	r3, 8006546 <_lseek_r+0x1e>
 8006544:	6023      	str	r3, [r4, #0]
 8006546:	bd38      	pop	{r3, r4, r5, pc}
 8006548:	200008c4 	.word	0x200008c4

0800654c <_read_r>:
 800654c:	b538      	push	{r3, r4, r5, lr}
 800654e:	4604      	mov	r4, r0
 8006550:	4608      	mov	r0, r1
 8006552:	4611      	mov	r1, r2
 8006554:	2200      	movs	r2, #0
 8006556:	4d05      	ldr	r5, [pc, #20]	@ (800656c <_read_r+0x20>)
 8006558:	602a      	str	r2, [r5, #0]
 800655a:	461a      	mov	r2, r3
 800655c:	f7fb fe6e 	bl	800223c <_read>
 8006560:	1c43      	adds	r3, r0, #1
 8006562:	d102      	bne.n	800656a <_read_r+0x1e>
 8006564:	682b      	ldr	r3, [r5, #0]
 8006566:	b103      	cbz	r3, 800656a <_read_r+0x1e>
 8006568:	6023      	str	r3, [r4, #0]
 800656a:	bd38      	pop	{r3, r4, r5, pc}
 800656c:	200008c4 	.word	0x200008c4

08006570 <_write_r>:
 8006570:	b538      	push	{r3, r4, r5, lr}
 8006572:	4604      	mov	r4, r0
 8006574:	4608      	mov	r0, r1
 8006576:	4611      	mov	r1, r2
 8006578:	2200      	movs	r2, #0
 800657a:	4d05      	ldr	r5, [pc, #20]	@ (8006590 <_write_r+0x20>)
 800657c:	602a      	str	r2, [r5, #0]
 800657e:	461a      	mov	r2, r3
 8006580:	f7fb fe79 	bl	8002276 <_write>
 8006584:	1c43      	adds	r3, r0, #1
 8006586:	d102      	bne.n	800658e <_write_r+0x1e>
 8006588:	682b      	ldr	r3, [r5, #0]
 800658a:	b103      	cbz	r3, 800658e <_write_r+0x1e>
 800658c:	6023      	str	r3, [r4, #0]
 800658e:	bd38      	pop	{r3, r4, r5, pc}
 8006590:	200008c4 	.word	0x200008c4

08006594 <__errno>:
 8006594:	4b01      	ldr	r3, [pc, #4]	@ (800659c <__errno+0x8>)
 8006596:	6818      	ldr	r0, [r3, #0]
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	20000018 	.word	0x20000018

080065a0 <__libc_init_array>:
 80065a0:	b570      	push	{r4, r5, r6, lr}
 80065a2:	2600      	movs	r6, #0
 80065a4:	4d0c      	ldr	r5, [pc, #48]	@ (80065d8 <__libc_init_array+0x38>)
 80065a6:	4c0d      	ldr	r4, [pc, #52]	@ (80065dc <__libc_init_array+0x3c>)
 80065a8:	1b64      	subs	r4, r4, r5
 80065aa:	10a4      	asrs	r4, r4, #2
 80065ac:	42a6      	cmp	r6, r4
 80065ae:	d109      	bne.n	80065c4 <__libc_init_array+0x24>
 80065b0:	f002 f85a 	bl	8008668 <_init>
 80065b4:	2600      	movs	r6, #0
 80065b6:	4d0a      	ldr	r5, [pc, #40]	@ (80065e0 <__libc_init_array+0x40>)
 80065b8:	4c0a      	ldr	r4, [pc, #40]	@ (80065e4 <__libc_init_array+0x44>)
 80065ba:	1b64      	subs	r4, r4, r5
 80065bc:	10a4      	asrs	r4, r4, #2
 80065be:	42a6      	cmp	r6, r4
 80065c0:	d105      	bne.n	80065ce <__libc_init_array+0x2e>
 80065c2:	bd70      	pop	{r4, r5, r6, pc}
 80065c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80065c8:	4798      	blx	r3
 80065ca:	3601      	adds	r6, #1
 80065cc:	e7ee      	b.n	80065ac <__libc_init_array+0xc>
 80065ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80065d2:	4798      	blx	r3
 80065d4:	3601      	adds	r6, #1
 80065d6:	e7f2      	b.n	80065be <__libc_init_array+0x1e>
 80065d8:	0800a74c 	.word	0x0800a74c
 80065dc:	0800a74c 	.word	0x0800a74c
 80065e0:	0800a74c 	.word	0x0800a74c
 80065e4:	0800a750 	.word	0x0800a750

080065e8 <__retarget_lock_init_recursive>:
 80065e8:	4770      	bx	lr

080065ea <__retarget_lock_acquire_recursive>:
 80065ea:	4770      	bx	lr

080065ec <__retarget_lock_release_recursive>:
 80065ec:	4770      	bx	lr

080065ee <memchr>:
 80065ee:	4603      	mov	r3, r0
 80065f0:	b510      	push	{r4, lr}
 80065f2:	b2c9      	uxtb	r1, r1
 80065f4:	4402      	add	r2, r0
 80065f6:	4293      	cmp	r3, r2
 80065f8:	4618      	mov	r0, r3
 80065fa:	d101      	bne.n	8006600 <memchr+0x12>
 80065fc:	2000      	movs	r0, #0
 80065fe:	e003      	b.n	8006608 <memchr+0x1a>
 8006600:	7804      	ldrb	r4, [r0, #0]
 8006602:	3301      	adds	r3, #1
 8006604:	428c      	cmp	r4, r1
 8006606:	d1f6      	bne.n	80065f6 <memchr+0x8>
 8006608:	bd10      	pop	{r4, pc}

0800660a <memcpy>:
 800660a:	440a      	add	r2, r1
 800660c:	4291      	cmp	r1, r2
 800660e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006612:	d100      	bne.n	8006616 <memcpy+0xc>
 8006614:	4770      	bx	lr
 8006616:	b510      	push	{r4, lr}
 8006618:	f811 4b01 	ldrb.w	r4, [r1], #1
 800661c:	4291      	cmp	r1, r2
 800661e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006622:	d1f9      	bne.n	8006618 <memcpy+0xe>
 8006624:	bd10      	pop	{r4, pc}

08006626 <quorem>:
 8006626:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800662a:	6903      	ldr	r3, [r0, #16]
 800662c:	690c      	ldr	r4, [r1, #16]
 800662e:	4607      	mov	r7, r0
 8006630:	42a3      	cmp	r3, r4
 8006632:	db7e      	blt.n	8006732 <quorem+0x10c>
 8006634:	3c01      	subs	r4, #1
 8006636:	00a3      	lsls	r3, r4, #2
 8006638:	f100 0514 	add.w	r5, r0, #20
 800663c:	f101 0814 	add.w	r8, r1, #20
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006646:	9301      	str	r3, [sp, #4]
 8006648:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800664c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006650:	3301      	adds	r3, #1
 8006652:	429a      	cmp	r2, r3
 8006654:	fbb2 f6f3 	udiv	r6, r2, r3
 8006658:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800665c:	d32e      	bcc.n	80066bc <quorem+0x96>
 800665e:	f04f 0a00 	mov.w	sl, #0
 8006662:	46c4      	mov	ip, r8
 8006664:	46ae      	mov	lr, r5
 8006666:	46d3      	mov	fp, sl
 8006668:	f85c 3b04 	ldr.w	r3, [ip], #4
 800666c:	b298      	uxth	r0, r3
 800666e:	fb06 a000 	mla	r0, r6, r0, sl
 8006672:	0c1b      	lsrs	r3, r3, #16
 8006674:	0c02      	lsrs	r2, r0, #16
 8006676:	fb06 2303 	mla	r3, r6, r3, r2
 800667a:	f8de 2000 	ldr.w	r2, [lr]
 800667e:	b280      	uxth	r0, r0
 8006680:	b292      	uxth	r2, r2
 8006682:	1a12      	subs	r2, r2, r0
 8006684:	445a      	add	r2, fp
 8006686:	f8de 0000 	ldr.w	r0, [lr]
 800668a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800668e:	b29b      	uxth	r3, r3
 8006690:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006694:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006698:	b292      	uxth	r2, r2
 800669a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800669e:	45e1      	cmp	r9, ip
 80066a0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80066a4:	f84e 2b04 	str.w	r2, [lr], #4
 80066a8:	d2de      	bcs.n	8006668 <quorem+0x42>
 80066aa:	9b00      	ldr	r3, [sp, #0]
 80066ac:	58eb      	ldr	r3, [r5, r3]
 80066ae:	b92b      	cbnz	r3, 80066bc <quorem+0x96>
 80066b0:	9b01      	ldr	r3, [sp, #4]
 80066b2:	3b04      	subs	r3, #4
 80066b4:	429d      	cmp	r5, r3
 80066b6:	461a      	mov	r2, r3
 80066b8:	d32f      	bcc.n	800671a <quorem+0xf4>
 80066ba:	613c      	str	r4, [r7, #16]
 80066bc:	4638      	mov	r0, r7
 80066be:	f001 f97f 	bl	80079c0 <__mcmp>
 80066c2:	2800      	cmp	r0, #0
 80066c4:	db25      	blt.n	8006712 <quorem+0xec>
 80066c6:	4629      	mov	r1, r5
 80066c8:	2000      	movs	r0, #0
 80066ca:	f858 2b04 	ldr.w	r2, [r8], #4
 80066ce:	f8d1 c000 	ldr.w	ip, [r1]
 80066d2:	fa1f fe82 	uxth.w	lr, r2
 80066d6:	fa1f f38c 	uxth.w	r3, ip
 80066da:	eba3 030e 	sub.w	r3, r3, lr
 80066de:	4403      	add	r3, r0
 80066e0:	0c12      	lsrs	r2, r2, #16
 80066e2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80066e6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066f0:	45c1      	cmp	r9, r8
 80066f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80066f6:	f841 3b04 	str.w	r3, [r1], #4
 80066fa:	d2e6      	bcs.n	80066ca <quorem+0xa4>
 80066fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006700:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006704:	b922      	cbnz	r2, 8006710 <quorem+0xea>
 8006706:	3b04      	subs	r3, #4
 8006708:	429d      	cmp	r5, r3
 800670a:	461a      	mov	r2, r3
 800670c:	d30b      	bcc.n	8006726 <quorem+0x100>
 800670e:	613c      	str	r4, [r7, #16]
 8006710:	3601      	adds	r6, #1
 8006712:	4630      	mov	r0, r6
 8006714:	b003      	add	sp, #12
 8006716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800671a:	6812      	ldr	r2, [r2, #0]
 800671c:	3b04      	subs	r3, #4
 800671e:	2a00      	cmp	r2, #0
 8006720:	d1cb      	bne.n	80066ba <quorem+0x94>
 8006722:	3c01      	subs	r4, #1
 8006724:	e7c6      	b.n	80066b4 <quorem+0x8e>
 8006726:	6812      	ldr	r2, [r2, #0]
 8006728:	3b04      	subs	r3, #4
 800672a:	2a00      	cmp	r2, #0
 800672c:	d1ef      	bne.n	800670e <quorem+0xe8>
 800672e:	3c01      	subs	r4, #1
 8006730:	e7ea      	b.n	8006708 <quorem+0xe2>
 8006732:	2000      	movs	r0, #0
 8006734:	e7ee      	b.n	8006714 <quorem+0xee>
	...

08006738 <_dtoa_r>:
 8006738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800673c:	4614      	mov	r4, r2
 800673e:	461d      	mov	r5, r3
 8006740:	69c7      	ldr	r7, [r0, #28]
 8006742:	b097      	sub	sp, #92	@ 0x5c
 8006744:	4681      	mov	r9, r0
 8006746:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800674a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800674c:	b97f      	cbnz	r7, 800676e <_dtoa_r+0x36>
 800674e:	2010      	movs	r0, #16
 8006750:	f000 fe0e 	bl	8007370 <malloc>
 8006754:	4602      	mov	r2, r0
 8006756:	f8c9 001c 	str.w	r0, [r9, #28]
 800675a:	b920      	cbnz	r0, 8006766 <_dtoa_r+0x2e>
 800675c:	21ef      	movs	r1, #239	@ 0xef
 800675e:	4bac      	ldr	r3, [pc, #688]	@ (8006a10 <_dtoa_r+0x2d8>)
 8006760:	48ac      	ldr	r0, [pc, #688]	@ (8006a14 <_dtoa_r+0x2dc>)
 8006762:	f001 fc45 	bl	8007ff0 <__assert_func>
 8006766:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800676a:	6007      	str	r7, [r0, #0]
 800676c:	60c7      	str	r7, [r0, #12]
 800676e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006772:	6819      	ldr	r1, [r3, #0]
 8006774:	b159      	cbz	r1, 800678e <_dtoa_r+0x56>
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	2301      	movs	r3, #1
 800677a:	4093      	lsls	r3, r2
 800677c:	604a      	str	r2, [r1, #4]
 800677e:	608b      	str	r3, [r1, #8]
 8006780:	4648      	mov	r0, r9
 8006782:	f000 feeb 	bl	800755c <_Bfree>
 8006786:	2200      	movs	r2, #0
 8006788:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800678c:	601a      	str	r2, [r3, #0]
 800678e:	1e2b      	subs	r3, r5, #0
 8006790:	bfaf      	iteee	ge
 8006792:	2300      	movge	r3, #0
 8006794:	2201      	movlt	r2, #1
 8006796:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800679a:	9307      	strlt	r3, [sp, #28]
 800679c:	bfa8      	it	ge
 800679e:	6033      	strge	r3, [r6, #0]
 80067a0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80067a4:	4b9c      	ldr	r3, [pc, #624]	@ (8006a18 <_dtoa_r+0x2e0>)
 80067a6:	bfb8      	it	lt
 80067a8:	6032      	strlt	r2, [r6, #0]
 80067aa:	ea33 0308 	bics.w	r3, r3, r8
 80067ae:	d112      	bne.n	80067d6 <_dtoa_r+0x9e>
 80067b0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80067b4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80067b6:	6013      	str	r3, [r2, #0]
 80067b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80067bc:	4323      	orrs	r3, r4
 80067be:	f000 855e 	beq.w	800727e <_dtoa_r+0xb46>
 80067c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80067c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006a1c <_dtoa_r+0x2e4>
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 8560 	beq.w	800728e <_dtoa_r+0xb56>
 80067ce:	f10a 0303 	add.w	r3, sl, #3
 80067d2:	f000 bd5a 	b.w	800728a <_dtoa_r+0xb52>
 80067d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067da:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80067de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067e2:	2200      	movs	r2, #0
 80067e4:	2300      	movs	r3, #0
 80067e6:	f7fa f8df 	bl	80009a8 <__aeabi_dcmpeq>
 80067ea:	4607      	mov	r7, r0
 80067ec:	b158      	cbz	r0, 8006806 <_dtoa_r+0xce>
 80067ee:	2301      	movs	r3, #1
 80067f0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80067f2:	6013      	str	r3, [r2, #0]
 80067f4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80067f6:	b113      	cbz	r3, 80067fe <_dtoa_r+0xc6>
 80067f8:	4b89      	ldr	r3, [pc, #548]	@ (8006a20 <_dtoa_r+0x2e8>)
 80067fa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80067fc:	6013      	str	r3, [r2, #0]
 80067fe:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8006a24 <_dtoa_r+0x2ec>
 8006802:	f000 bd44 	b.w	800728e <_dtoa_r+0xb56>
 8006806:	ab14      	add	r3, sp, #80	@ 0x50
 8006808:	9301      	str	r3, [sp, #4]
 800680a:	ab15      	add	r3, sp, #84	@ 0x54
 800680c:	9300      	str	r3, [sp, #0]
 800680e:	4648      	mov	r0, r9
 8006810:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006814:	f001 f984 	bl	8007b20 <__d2b>
 8006818:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800681c:	9003      	str	r0, [sp, #12]
 800681e:	2e00      	cmp	r6, #0
 8006820:	d078      	beq.n	8006914 <_dtoa_r+0x1dc>
 8006822:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006826:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006828:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800682c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006830:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006834:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006838:	9712      	str	r7, [sp, #72]	@ 0x48
 800683a:	4619      	mov	r1, r3
 800683c:	2200      	movs	r2, #0
 800683e:	4b7a      	ldr	r3, [pc, #488]	@ (8006a28 <_dtoa_r+0x2f0>)
 8006840:	f7f9 fc92 	bl	8000168 <__aeabi_dsub>
 8006844:	a36c      	add	r3, pc, #432	@ (adr r3, 80069f8 <_dtoa_r+0x2c0>)
 8006846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684a:	f7f9 fe45 	bl	80004d8 <__aeabi_dmul>
 800684e:	a36c      	add	r3, pc, #432	@ (adr r3, 8006a00 <_dtoa_r+0x2c8>)
 8006850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006854:	f7f9 fc8a 	bl	800016c <__adddf3>
 8006858:	4604      	mov	r4, r0
 800685a:	4630      	mov	r0, r6
 800685c:	460d      	mov	r5, r1
 800685e:	f7f9 fdd1 	bl	8000404 <__aeabi_i2d>
 8006862:	a369      	add	r3, pc, #420	@ (adr r3, 8006a08 <_dtoa_r+0x2d0>)
 8006864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006868:	f7f9 fe36 	bl	80004d8 <__aeabi_dmul>
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	4620      	mov	r0, r4
 8006872:	4629      	mov	r1, r5
 8006874:	f7f9 fc7a 	bl	800016c <__adddf3>
 8006878:	4604      	mov	r4, r0
 800687a:	460d      	mov	r5, r1
 800687c:	f7fa f8dc 	bl	8000a38 <__aeabi_d2iz>
 8006880:	2200      	movs	r2, #0
 8006882:	4607      	mov	r7, r0
 8006884:	2300      	movs	r3, #0
 8006886:	4620      	mov	r0, r4
 8006888:	4629      	mov	r1, r5
 800688a:	f7fa f897 	bl	80009bc <__aeabi_dcmplt>
 800688e:	b140      	cbz	r0, 80068a2 <_dtoa_r+0x16a>
 8006890:	4638      	mov	r0, r7
 8006892:	f7f9 fdb7 	bl	8000404 <__aeabi_i2d>
 8006896:	4622      	mov	r2, r4
 8006898:	462b      	mov	r3, r5
 800689a:	f7fa f885 	bl	80009a8 <__aeabi_dcmpeq>
 800689e:	b900      	cbnz	r0, 80068a2 <_dtoa_r+0x16a>
 80068a0:	3f01      	subs	r7, #1
 80068a2:	2f16      	cmp	r7, #22
 80068a4:	d854      	bhi.n	8006950 <_dtoa_r+0x218>
 80068a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068aa:	4b60      	ldr	r3, [pc, #384]	@ (8006a2c <_dtoa_r+0x2f4>)
 80068ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80068b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b4:	f7fa f882 	bl	80009bc <__aeabi_dcmplt>
 80068b8:	2800      	cmp	r0, #0
 80068ba:	d04b      	beq.n	8006954 <_dtoa_r+0x21c>
 80068bc:	2300      	movs	r3, #0
 80068be:	3f01      	subs	r7, #1
 80068c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80068c2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80068c4:	1b9b      	subs	r3, r3, r6
 80068c6:	1e5a      	subs	r2, r3, #1
 80068c8:	bf49      	itett	mi
 80068ca:	f1c3 0301 	rsbmi	r3, r3, #1
 80068ce:	2300      	movpl	r3, #0
 80068d0:	9304      	strmi	r3, [sp, #16]
 80068d2:	2300      	movmi	r3, #0
 80068d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80068d6:	bf54      	ite	pl
 80068d8:	9304      	strpl	r3, [sp, #16]
 80068da:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80068dc:	2f00      	cmp	r7, #0
 80068de:	db3b      	blt.n	8006958 <_dtoa_r+0x220>
 80068e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068e2:	970e      	str	r7, [sp, #56]	@ 0x38
 80068e4:	443b      	add	r3, r7
 80068e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80068e8:	2300      	movs	r3, #0
 80068ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80068ec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80068ee:	2b09      	cmp	r3, #9
 80068f0:	d865      	bhi.n	80069be <_dtoa_r+0x286>
 80068f2:	2b05      	cmp	r3, #5
 80068f4:	bfc4      	itt	gt
 80068f6:	3b04      	subgt	r3, #4
 80068f8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80068fa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80068fc:	bfc8      	it	gt
 80068fe:	2400      	movgt	r4, #0
 8006900:	f1a3 0302 	sub.w	r3, r3, #2
 8006904:	bfd8      	it	le
 8006906:	2401      	movle	r4, #1
 8006908:	2b03      	cmp	r3, #3
 800690a:	d864      	bhi.n	80069d6 <_dtoa_r+0x29e>
 800690c:	e8df f003 	tbb	[pc, r3]
 8006910:	2c385553 	.word	0x2c385553
 8006914:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006918:	441e      	add	r6, r3
 800691a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800691e:	2b20      	cmp	r3, #32
 8006920:	bfc1      	itttt	gt
 8006922:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006926:	fa08 f803 	lslgt.w	r8, r8, r3
 800692a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800692e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006932:	bfd6      	itet	le
 8006934:	f1c3 0320 	rsble	r3, r3, #32
 8006938:	ea48 0003 	orrgt.w	r0, r8, r3
 800693c:	fa04 f003 	lslle.w	r0, r4, r3
 8006940:	f7f9 fd50 	bl	80003e4 <__aeabi_ui2d>
 8006944:	2201      	movs	r2, #1
 8006946:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800694a:	3e01      	subs	r6, #1
 800694c:	9212      	str	r2, [sp, #72]	@ 0x48
 800694e:	e774      	b.n	800683a <_dtoa_r+0x102>
 8006950:	2301      	movs	r3, #1
 8006952:	e7b5      	b.n	80068c0 <_dtoa_r+0x188>
 8006954:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006956:	e7b4      	b.n	80068c2 <_dtoa_r+0x18a>
 8006958:	9b04      	ldr	r3, [sp, #16]
 800695a:	1bdb      	subs	r3, r3, r7
 800695c:	9304      	str	r3, [sp, #16]
 800695e:	427b      	negs	r3, r7
 8006960:	930a      	str	r3, [sp, #40]	@ 0x28
 8006962:	2300      	movs	r3, #0
 8006964:	930e      	str	r3, [sp, #56]	@ 0x38
 8006966:	e7c1      	b.n	80068ec <_dtoa_r+0x1b4>
 8006968:	2301      	movs	r3, #1
 800696a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800696c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800696e:	eb07 0b03 	add.w	fp, r7, r3
 8006972:	f10b 0301 	add.w	r3, fp, #1
 8006976:	2b01      	cmp	r3, #1
 8006978:	9308      	str	r3, [sp, #32]
 800697a:	bfb8      	it	lt
 800697c:	2301      	movlt	r3, #1
 800697e:	e006      	b.n	800698e <_dtoa_r+0x256>
 8006980:	2301      	movs	r3, #1
 8006982:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006984:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006986:	2b00      	cmp	r3, #0
 8006988:	dd28      	ble.n	80069dc <_dtoa_r+0x2a4>
 800698a:	469b      	mov	fp, r3
 800698c:	9308      	str	r3, [sp, #32]
 800698e:	2100      	movs	r1, #0
 8006990:	2204      	movs	r2, #4
 8006992:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006996:	f102 0514 	add.w	r5, r2, #20
 800699a:	429d      	cmp	r5, r3
 800699c:	d926      	bls.n	80069ec <_dtoa_r+0x2b4>
 800699e:	6041      	str	r1, [r0, #4]
 80069a0:	4648      	mov	r0, r9
 80069a2:	f000 fd9b 	bl	80074dc <_Balloc>
 80069a6:	4682      	mov	sl, r0
 80069a8:	2800      	cmp	r0, #0
 80069aa:	d143      	bne.n	8006a34 <_dtoa_r+0x2fc>
 80069ac:	4602      	mov	r2, r0
 80069ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80069b2:	4b1f      	ldr	r3, [pc, #124]	@ (8006a30 <_dtoa_r+0x2f8>)
 80069b4:	e6d4      	b.n	8006760 <_dtoa_r+0x28>
 80069b6:	2300      	movs	r3, #0
 80069b8:	e7e3      	b.n	8006982 <_dtoa_r+0x24a>
 80069ba:	2300      	movs	r3, #0
 80069bc:	e7d5      	b.n	800696a <_dtoa_r+0x232>
 80069be:	2401      	movs	r4, #1
 80069c0:	2300      	movs	r3, #0
 80069c2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80069c4:	9320      	str	r3, [sp, #128]	@ 0x80
 80069c6:	f04f 3bff 	mov.w	fp, #4294967295
 80069ca:	2200      	movs	r2, #0
 80069cc:	2312      	movs	r3, #18
 80069ce:	f8cd b020 	str.w	fp, [sp, #32]
 80069d2:	9221      	str	r2, [sp, #132]	@ 0x84
 80069d4:	e7db      	b.n	800698e <_dtoa_r+0x256>
 80069d6:	2301      	movs	r3, #1
 80069d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069da:	e7f4      	b.n	80069c6 <_dtoa_r+0x28e>
 80069dc:	f04f 0b01 	mov.w	fp, #1
 80069e0:	465b      	mov	r3, fp
 80069e2:	f8cd b020 	str.w	fp, [sp, #32]
 80069e6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80069ea:	e7d0      	b.n	800698e <_dtoa_r+0x256>
 80069ec:	3101      	adds	r1, #1
 80069ee:	0052      	lsls	r2, r2, #1
 80069f0:	e7d1      	b.n	8006996 <_dtoa_r+0x25e>
 80069f2:	bf00      	nop
 80069f4:	f3af 8000 	nop.w
 80069f8:	636f4361 	.word	0x636f4361
 80069fc:	3fd287a7 	.word	0x3fd287a7
 8006a00:	8b60c8b3 	.word	0x8b60c8b3
 8006a04:	3fc68a28 	.word	0x3fc68a28
 8006a08:	509f79fb 	.word	0x509f79fb
 8006a0c:	3fd34413 	.word	0x3fd34413
 8006a10:	0800a40f 	.word	0x0800a40f
 8006a14:	0800a426 	.word	0x0800a426
 8006a18:	7ff00000 	.word	0x7ff00000
 8006a1c:	0800a40b 	.word	0x0800a40b
 8006a20:	0800a3df 	.word	0x0800a3df
 8006a24:	0800a3de 	.word	0x0800a3de
 8006a28:	3ff80000 	.word	0x3ff80000
 8006a2c:	0800a578 	.word	0x0800a578
 8006a30:	0800a47e 	.word	0x0800a47e
 8006a34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006a38:	6018      	str	r0, [r3, #0]
 8006a3a:	9b08      	ldr	r3, [sp, #32]
 8006a3c:	2b0e      	cmp	r3, #14
 8006a3e:	f200 80a1 	bhi.w	8006b84 <_dtoa_r+0x44c>
 8006a42:	2c00      	cmp	r4, #0
 8006a44:	f000 809e 	beq.w	8006b84 <_dtoa_r+0x44c>
 8006a48:	2f00      	cmp	r7, #0
 8006a4a:	dd33      	ble.n	8006ab4 <_dtoa_r+0x37c>
 8006a4c:	4b9c      	ldr	r3, [pc, #624]	@ (8006cc0 <_dtoa_r+0x588>)
 8006a4e:	f007 020f 	and.w	r2, r7, #15
 8006a52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a56:	05f8      	lsls	r0, r7, #23
 8006a58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a5c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8006a60:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006a64:	d516      	bpl.n	8006a94 <_dtoa_r+0x35c>
 8006a66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a6a:	4b96      	ldr	r3, [pc, #600]	@ (8006cc4 <_dtoa_r+0x58c>)
 8006a6c:	2603      	movs	r6, #3
 8006a6e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a72:	f7f9 fe5b 	bl	800072c <__aeabi_ddiv>
 8006a76:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006a7a:	f004 040f 	and.w	r4, r4, #15
 8006a7e:	4d91      	ldr	r5, [pc, #580]	@ (8006cc4 <_dtoa_r+0x58c>)
 8006a80:	b954      	cbnz	r4, 8006a98 <_dtoa_r+0x360>
 8006a82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a8a:	f7f9 fe4f 	bl	800072c <__aeabi_ddiv>
 8006a8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006a92:	e028      	b.n	8006ae6 <_dtoa_r+0x3ae>
 8006a94:	2602      	movs	r6, #2
 8006a96:	e7f2      	b.n	8006a7e <_dtoa_r+0x346>
 8006a98:	07e1      	lsls	r1, r4, #31
 8006a9a:	d508      	bpl.n	8006aae <_dtoa_r+0x376>
 8006a9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006aa0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006aa4:	f7f9 fd18 	bl	80004d8 <__aeabi_dmul>
 8006aa8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006aac:	3601      	adds	r6, #1
 8006aae:	1064      	asrs	r4, r4, #1
 8006ab0:	3508      	adds	r5, #8
 8006ab2:	e7e5      	b.n	8006a80 <_dtoa_r+0x348>
 8006ab4:	f000 80af 	beq.w	8006c16 <_dtoa_r+0x4de>
 8006ab8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006abc:	427c      	negs	r4, r7
 8006abe:	4b80      	ldr	r3, [pc, #512]	@ (8006cc0 <_dtoa_r+0x588>)
 8006ac0:	f004 020f 	and.w	r2, r4, #15
 8006ac4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006acc:	f7f9 fd04 	bl	80004d8 <__aeabi_dmul>
 8006ad0:	2602      	movs	r6, #2
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006ad8:	4d7a      	ldr	r5, [pc, #488]	@ (8006cc4 <_dtoa_r+0x58c>)
 8006ada:	1124      	asrs	r4, r4, #4
 8006adc:	2c00      	cmp	r4, #0
 8006ade:	f040 808f 	bne.w	8006c00 <_dtoa_r+0x4c8>
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1d3      	bne.n	8006a8e <_dtoa_r+0x356>
 8006ae6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006aea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f000 8094 	beq.w	8006c1a <_dtoa_r+0x4e2>
 8006af2:	2200      	movs	r2, #0
 8006af4:	4620      	mov	r0, r4
 8006af6:	4629      	mov	r1, r5
 8006af8:	4b73      	ldr	r3, [pc, #460]	@ (8006cc8 <_dtoa_r+0x590>)
 8006afa:	f7f9 ff5f 	bl	80009bc <__aeabi_dcmplt>
 8006afe:	2800      	cmp	r0, #0
 8006b00:	f000 808b 	beq.w	8006c1a <_dtoa_r+0x4e2>
 8006b04:	9b08      	ldr	r3, [sp, #32]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 8087 	beq.w	8006c1a <_dtoa_r+0x4e2>
 8006b0c:	f1bb 0f00 	cmp.w	fp, #0
 8006b10:	dd34      	ble.n	8006b7c <_dtoa_r+0x444>
 8006b12:	4620      	mov	r0, r4
 8006b14:	2200      	movs	r2, #0
 8006b16:	4629      	mov	r1, r5
 8006b18:	4b6c      	ldr	r3, [pc, #432]	@ (8006ccc <_dtoa_r+0x594>)
 8006b1a:	f7f9 fcdd 	bl	80004d8 <__aeabi_dmul>
 8006b1e:	465c      	mov	r4, fp
 8006b20:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b24:	f107 38ff 	add.w	r8, r7, #4294967295
 8006b28:	3601      	adds	r6, #1
 8006b2a:	4630      	mov	r0, r6
 8006b2c:	f7f9 fc6a 	bl	8000404 <__aeabi_i2d>
 8006b30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b34:	f7f9 fcd0 	bl	80004d8 <__aeabi_dmul>
 8006b38:	2200      	movs	r2, #0
 8006b3a:	4b65      	ldr	r3, [pc, #404]	@ (8006cd0 <_dtoa_r+0x598>)
 8006b3c:	f7f9 fb16 	bl	800016c <__adddf3>
 8006b40:	4605      	mov	r5, r0
 8006b42:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006b46:	2c00      	cmp	r4, #0
 8006b48:	d16a      	bne.n	8006c20 <_dtoa_r+0x4e8>
 8006b4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	4b60      	ldr	r3, [pc, #384]	@ (8006cd4 <_dtoa_r+0x59c>)
 8006b52:	f7f9 fb09 	bl	8000168 <__aeabi_dsub>
 8006b56:	4602      	mov	r2, r0
 8006b58:	460b      	mov	r3, r1
 8006b5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006b5e:	462a      	mov	r2, r5
 8006b60:	4633      	mov	r3, r6
 8006b62:	f7f9 ff49 	bl	80009f8 <__aeabi_dcmpgt>
 8006b66:	2800      	cmp	r0, #0
 8006b68:	f040 8298 	bne.w	800709c <_dtoa_r+0x964>
 8006b6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b70:	462a      	mov	r2, r5
 8006b72:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006b76:	f7f9 ff21 	bl	80009bc <__aeabi_dcmplt>
 8006b7a:	bb38      	cbnz	r0, 8006bcc <_dtoa_r+0x494>
 8006b7c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006b80:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006b84:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f2c0 8157 	blt.w	8006e3a <_dtoa_r+0x702>
 8006b8c:	2f0e      	cmp	r7, #14
 8006b8e:	f300 8154 	bgt.w	8006e3a <_dtoa_r+0x702>
 8006b92:	4b4b      	ldr	r3, [pc, #300]	@ (8006cc0 <_dtoa_r+0x588>)
 8006b94:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006b98:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006b9c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006ba0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f280 80e5 	bge.w	8006d72 <_dtoa_r+0x63a>
 8006ba8:	9b08      	ldr	r3, [sp, #32]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f300 80e1 	bgt.w	8006d72 <_dtoa_r+0x63a>
 8006bb0:	d10c      	bne.n	8006bcc <_dtoa_r+0x494>
 8006bb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	4b46      	ldr	r3, [pc, #280]	@ (8006cd4 <_dtoa_r+0x59c>)
 8006bba:	f7f9 fc8d 	bl	80004d8 <__aeabi_dmul>
 8006bbe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006bc2:	f7f9 ff0f 	bl	80009e4 <__aeabi_dcmpge>
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	f000 8266 	beq.w	8007098 <_dtoa_r+0x960>
 8006bcc:	2400      	movs	r4, #0
 8006bce:	4625      	mov	r5, r4
 8006bd0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006bd2:	4656      	mov	r6, sl
 8006bd4:	ea6f 0803 	mvn.w	r8, r3
 8006bd8:	2700      	movs	r7, #0
 8006bda:	4621      	mov	r1, r4
 8006bdc:	4648      	mov	r0, r9
 8006bde:	f000 fcbd 	bl	800755c <_Bfree>
 8006be2:	2d00      	cmp	r5, #0
 8006be4:	f000 80bd 	beq.w	8006d62 <_dtoa_r+0x62a>
 8006be8:	b12f      	cbz	r7, 8006bf6 <_dtoa_r+0x4be>
 8006bea:	42af      	cmp	r7, r5
 8006bec:	d003      	beq.n	8006bf6 <_dtoa_r+0x4be>
 8006bee:	4639      	mov	r1, r7
 8006bf0:	4648      	mov	r0, r9
 8006bf2:	f000 fcb3 	bl	800755c <_Bfree>
 8006bf6:	4629      	mov	r1, r5
 8006bf8:	4648      	mov	r0, r9
 8006bfa:	f000 fcaf 	bl	800755c <_Bfree>
 8006bfe:	e0b0      	b.n	8006d62 <_dtoa_r+0x62a>
 8006c00:	07e2      	lsls	r2, r4, #31
 8006c02:	d505      	bpl.n	8006c10 <_dtoa_r+0x4d8>
 8006c04:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c08:	f7f9 fc66 	bl	80004d8 <__aeabi_dmul>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	3601      	adds	r6, #1
 8006c10:	1064      	asrs	r4, r4, #1
 8006c12:	3508      	adds	r5, #8
 8006c14:	e762      	b.n	8006adc <_dtoa_r+0x3a4>
 8006c16:	2602      	movs	r6, #2
 8006c18:	e765      	b.n	8006ae6 <_dtoa_r+0x3ae>
 8006c1a:	46b8      	mov	r8, r7
 8006c1c:	9c08      	ldr	r4, [sp, #32]
 8006c1e:	e784      	b.n	8006b2a <_dtoa_r+0x3f2>
 8006c20:	4b27      	ldr	r3, [pc, #156]	@ (8006cc0 <_dtoa_r+0x588>)
 8006c22:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006c24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c28:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c2c:	4454      	add	r4, sl
 8006c2e:	2900      	cmp	r1, #0
 8006c30:	d054      	beq.n	8006cdc <_dtoa_r+0x5a4>
 8006c32:	2000      	movs	r0, #0
 8006c34:	4928      	ldr	r1, [pc, #160]	@ (8006cd8 <_dtoa_r+0x5a0>)
 8006c36:	f7f9 fd79 	bl	800072c <__aeabi_ddiv>
 8006c3a:	4633      	mov	r3, r6
 8006c3c:	462a      	mov	r2, r5
 8006c3e:	f7f9 fa93 	bl	8000168 <__aeabi_dsub>
 8006c42:	4656      	mov	r6, sl
 8006c44:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006c48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c4c:	f7f9 fef4 	bl	8000a38 <__aeabi_d2iz>
 8006c50:	4605      	mov	r5, r0
 8006c52:	f7f9 fbd7 	bl	8000404 <__aeabi_i2d>
 8006c56:	4602      	mov	r2, r0
 8006c58:	460b      	mov	r3, r1
 8006c5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c5e:	f7f9 fa83 	bl	8000168 <__aeabi_dsub>
 8006c62:	4602      	mov	r2, r0
 8006c64:	460b      	mov	r3, r1
 8006c66:	3530      	adds	r5, #48	@ 0x30
 8006c68:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006c6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006c70:	f806 5b01 	strb.w	r5, [r6], #1
 8006c74:	f7f9 fea2 	bl	80009bc <__aeabi_dcmplt>
 8006c78:	2800      	cmp	r0, #0
 8006c7a:	d172      	bne.n	8006d62 <_dtoa_r+0x62a>
 8006c7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c80:	2000      	movs	r0, #0
 8006c82:	4911      	ldr	r1, [pc, #68]	@ (8006cc8 <_dtoa_r+0x590>)
 8006c84:	f7f9 fa70 	bl	8000168 <__aeabi_dsub>
 8006c88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006c8c:	f7f9 fe96 	bl	80009bc <__aeabi_dcmplt>
 8006c90:	2800      	cmp	r0, #0
 8006c92:	f040 80b4 	bne.w	8006dfe <_dtoa_r+0x6c6>
 8006c96:	42a6      	cmp	r6, r4
 8006c98:	f43f af70 	beq.w	8006b7c <_dtoa_r+0x444>
 8006c9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8006ccc <_dtoa_r+0x594>)
 8006ca4:	f7f9 fc18 	bl	80004d8 <__aeabi_dmul>
 8006ca8:	2200      	movs	r2, #0
 8006caa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006cae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cb2:	4b06      	ldr	r3, [pc, #24]	@ (8006ccc <_dtoa_r+0x594>)
 8006cb4:	f7f9 fc10 	bl	80004d8 <__aeabi_dmul>
 8006cb8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006cbc:	e7c4      	b.n	8006c48 <_dtoa_r+0x510>
 8006cbe:	bf00      	nop
 8006cc0:	0800a578 	.word	0x0800a578
 8006cc4:	0800a550 	.word	0x0800a550
 8006cc8:	3ff00000 	.word	0x3ff00000
 8006ccc:	40240000 	.word	0x40240000
 8006cd0:	401c0000 	.word	0x401c0000
 8006cd4:	40140000 	.word	0x40140000
 8006cd8:	3fe00000 	.word	0x3fe00000
 8006cdc:	4631      	mov	r1, r6
 8006cde:	4628      	mov	r0, r5
 8006ce0:	f7f9 fbfa 	bl	80004d8 <__aeabi_dmul>
 8006ce4:	4656      	mov	r6, sl
 8006ce6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006cea:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006cec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cf0:	f7f9 fea2 	bl	8000a38 <__aeabi_d2iz>
 8006cf4:	4605      	mov	r5, r0
 8006cf6:	f7f9 fb85 	bl	8000404 <__aeabi_i2d>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d02:	f7f9 fa31 	bl	8000168 <__aeabi_dsub>
 8006d06:	4602      	mov	r2, r0
 8006d08:	460b      	mov	r3, r1
 8006d0a:	3530      	adds	r5, #48	@ 0x30
 8006d0c:	f806 5b01 	strb.w	r5, [r6], #1
 8006d10:	42a6      	cmp	r6, r4
 8006d12:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d16:	f04f 0200 	mov.w	r2, #0
 8006d1a:	d124      	bne.n	8006d66 <_dtoa_r+0x62e>
 8006d1c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006d20:	4bae      	ldr	r3, [pc, #696]	@ (8006fdc <_dtoa_r+0x8a4>)
 8006d22:	f7f9 fa23 	bl	800016c <__adddf3>
 8006d26:	4602      	mov	r2, r0
 8006d28:	460b      	mov	r3, r1
 8006d2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d2e:	f7f9 fe63 	bl	80009f8 <__aeabi_dcmpgt>
 8006d32:	2800      	cmp	r0, #0
 8006d34:	d163      	bne.n	8006dfe <_dtoa_r+0x6c6>
 8006d36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d3a:	2000      	movs	r0, #0
 8006d3c:	49a7      	ldr	r1, [pc, #668]	@ (8006fdc <_dtoa_r+0x8a4>)
 8006d3e:	f7f9 fa13 	bl	8000168 <__aeabi_dsub>
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d4a:	f7f9 fe37 	bl	80009bc <__aeabi_dcmplt>
 8006d4e:	2800      	cmp	r0, #0
 8006d50:	f43f af14 	beq.w	8006b7c <_dtoa_r+0x444>
 8006d54:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006d56:	1e73      	subs	r3, r6, #1
 8006d58:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006d5a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006d5e:	2b30      	cmp	r3, #48	@ 0x30
 8006d60:	d0f8      	beq.n	8006d54 <_dtoa_r+0x61c>
 8006d62:	4647      	mov	r7, r8
 8006d64:	e03b      	b.n	8006dde <_dtoa_r+0x6a6>
 8006d66:	4b9e      	ldr	r3, [pc, #632]	@ (8006fe0 <_dtoa_r+0x8a8>)
 8006d68:	f7f9 fbb6 	bl	80004d8 <__aeabi_dmul>
 8006d6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006d70:	e7bc      	b.n	8006cec <_dtoa_r+0x5b4>
 8006d72:	4656      	mov	r6, sl
 8006d74:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006d78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	4629      	mov	r1, r5
 8006d80:	f7f9 fcd4 	bl	800072c <__aeabi_ddiv>
 8006d84:	f7f9 fe58 	bl	8000a38 <__aeabi_d2iz>
 8006d88:	4680      	mov	r8, r0
 8006d8a:	f7f9 fb3b 	bl	8000404 <__aeabi_i2d>
 8006d8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d92:	f7f9 fba1 	bl	80004d8 <__aeabi_dmul>
 8006d96:	4602      	mov	r2, r0
 8006d98:	460b      	mov	r3, r1
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	4629      	mov	r1, r5
 8006d9e:	f7f9 f9e3 	bl	8000168 <__aeabi_dsub>
 8006da2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006da6:	9d08      	ldr	r5, [sp, #32]
 8006da8:	f806 4b01 	strb.w	r4, [r6], #1
 8006dac:	eba6 040a 	sub.w	r4, r6, sl
 8006db0:	42a5      	cmp	r5, r4
 8006db2:	4602      	mov	r2, r0
 8006db4:	460b      	mov	r3, r1
 8006db6:	d133      	bne.n	8006e20 <_dtoa_r+0x6e8>
 8006db8:	f7f9 f9d8 	bl	800016c <__adddf3>
 8006dbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dc0:	4604      	mov	r4, r0
 8006dc2:	460d      	mov	r5, r1
 8006dc4:	f7f9 fe18 	bl	80009f8 <__aeabi_dcmpgt>
 8006dc8:	b9c0      	cbnz	r0, 8006dfc <_dtoa_r+0x6c4>
 8006dca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dce:	4620      	mov	r0, r4
 8006dd0:	4629      	mov	r1, r5
 8006dd2:	f7f9 fde9 	bl	80009a8 <__aeabi_dcmpeq>
 8006dd6:	b110      	cbz	r0, 8006dde <_dtoa_r+0x6a6>
 8006dd8:	f018 0f01 	tst.w	r8, #1
 8006ddc:	d10e      	bne.n	8006dfc <_dtoa_r+0x6c4>
 8006dde:	4648      	mov	r0, r9
 8006de0:	9903      	ldr	r1, [sp, #12]
 8006de2:	f000 fbbb 	bl	800755c <_Bfree>
 8006de6:	2300      	movs	r3, #0
 8006de8:	7033      	strb	r3, [r6, #0]
 8006dea:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006dec:	3701      	adds	r7, #1
 8006dee:	601f      	str	r7, [r3, #0]
 8006df0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f000 824b 	beq.w	800728e <_dtoa_r+0xb56>
 8006df8:	601e      	str	r6, [r3, #0]
 8006dfa:	e248      	b.n	800728e <_dtoa_r+0xb56>
 8006dfc:	46b8      	mov	r8, r7
 8006dfe:	4633      	mov	r3, r6
 8006e00:	461e      	mov	r6, r3
 8006e02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e06:	2a39      	cmp	r2, #57	@ 0x39
 8006e08:	d106      	bne.n	8006e18 <_dtoa_r+0x6e0>
 8006e0a:	459a      	cmp	sl, r3
 8006e0c:	d1f8      	bne.n	8006e00 <_dtoa_r+0x6c8>
 8006e0e:	2230      	movs	r2, #48	@ 0x30
 8006e10:	f108 0801 	add.w	r8, r8, #1
 8006e14:	f88a 2000 	strb.w	r2, [sl]
 8006e18:	781a      	ldrb	r2, [r3, #0]
 8006e1a:	3201      	adds	r2, #1
 8006e1c:	701a      	strb	r2, [r3, #0]
 8006e1e:	e7a0      	b.n	8006d62 <_dtoa_r+0x62a>
 8006e20:	2200      	movs	r2, #0
 8006e22:	4b6f      	ldr	r3, [pc, #444]	@ (8006fe0 <_dtoa_r+0x8a8>)
 8006e24:	f7f9 fb58 	bl	80004d8 <__aeabi_dmul>
 8006e28:	2200      	movs	r2, #0
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	4604      	mov	r4, r0
 8006e2e:	460d      	mov	r5, r1
 8006e30:	f7f9 fdba 	bl	80009a8 <__aeabi_dcmpeq>
 8006e34:	2800      	cmp	r0, #0
 8006e36:	d09f      	beq.n	8006d78 <_dtoa_r+0x640>
 8006e38:	e7d1      	b.n	8006dde <_dtoa_r+0x6a6>
 8006e3a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006e3c:	2a00      	cmp	r2, #0
 8006e3e:	f000 80ea 	beq.w	8007016 <_dtoa_r+0x8de>
 8006e42:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006e44:	2a01      	cmp	r2, #1
 8006e46:	f300 80cd 	bgt.w	8006fe4 <_dtoa_r+0x8ac>
 8006e4a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006e4c:	2a00      	cmp	r2, #0
 8006e4e:	f000 80c1 	beq.w	8006fd4 <_dtoa_r+0x89c>
 8006e52:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006e56:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006e58:	9e04      	ldr	r6, [sp, #16]
 8006e5a:	9a04      	ldr	r2, [sp, #16]
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	441a      	add	r2, r3
 8006e60:	9204      	str	r2, [sp, #16]
 8006e62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e64:	4648      	mov	r0, r9
 8006e66:	441a      	add	r2, r3
 8006e68:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e6a:	f000 fc2b 	bl	80076c4 <__i2b>
 8006e6e:	4605      	mov	r5, r0
 8006e70:	b166      	cbz	r6, 8006e8c <_dtoa_r+0x754>
 8006e72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	dd09      	ble.n	8006e8c <_dtoa_r+0x754>
 8006e78:	42b3      	cmp	r3, r6
 8006e7a:	bfa8      	it	ge
 8006e7c:	4633      	movge	r3, r6
 8006e7e:	9a04      	ldr	r2, [sp, #16]
 8006e80:	1af6      	subs	r6, r6, r3
 8006e82:	1ad2      	subs	r2, r2, r3
 8006e84:	9204      	str	r2, [sp, #16]
 8006e86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e8e:	b30b      	cbz	r3, 8006ed4 <_dtoa_r+0x79c>
 8006e90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 80c6 	beq.w	8007024 <_dtoa_r+0x8ec>
 8006e98:	2c00      	cmp	r4, #0
 8006e9a:	f000 80c0 	beq.w	800701e <_dtoa_r+0x8e6>
 8006e9e:	4629      	mov	r1, r5
 8006ea0:	4622      	mov	r2, r4
 8006ea2:	4648      	mov	r0, r9
 8006ea4:	f000 fcc6 	bl	8007834 <__pow5mult>
 8006ea8:	9a03      	ldr	r2, [sp, #12]
 8006eaa:	4601      	mov	r1, r0
 8006eac:	4605      	mov	r5, r0
 8006eae:	4648      	mov	r0, r9
 8006eb0:	f000 fc1e 	bl	80076f0 <__multiply>
 8006eb4:	9903      	ldr	r1, [sp, #12]
 8006eb6:	4680      	mov	r8, r0
 8006eb8:	4648      	mov	r0, r9
 8006eba:	f000 fb4f 	bl	800755c <_Bfree>
 8006ebe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ec0:	1b1b      	subs	r3, r3, r4
 8006ec2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ec4:	f000 80b1 	beq.w	800702a <_dtoa_r+0x8f2>
 8006ec8:	4641      	mov	r1, r8
 8006eca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ecc:	4648      	mov	r0, r9
 8006ece:	f000 fcb1 	bl	8007834 <__pow5mult>
 8006ed2:	9003      	str	r0, [sp, #12]
 8006ed4:	2101      	movs	r1, #1
 8006ed6:	4648      	mov	r0, r9
 8006ed8:	f000 fbf4 	bl	80076c4 <__i2b>
 8006edc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ede:	4604      	mov	r4, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f000 81d8 	beq.w	8007296 <_dtoa_r+0xb5e>
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	4601      	mov	r1, r0
 8006eea:	4648      	mov	r0, r9
 8006eec:	f000 fca2 	bl	8007834 <__pow5mult>
 8006ef0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ef2:	4604      	mov	r4, r0
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	f300 809f 	bgt.w	8007038 <_dtoa_r+0x900>
 8006efa:	9b06      	ldr	r3, [sp, #24]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f040 8097 	bne.w	8007030 <_dtoa_r+0x8f8>
 8006f02:	9b07      	ldr	r3, [sp, #28]
 8006f04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f040 8093 	bne.w	8007034 <_dtoa_r+0x8fc>
 8006f0e:	9b07      	ldr	r3, [sp, #28]
 8006f10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f14:	0d1b      	lsrs	r3, r3, #20
 8006f16:	051b      	lsls	r3, r3, #20
 8006f18:	b133      	cbz	r3, 8006f28 <_dtoa_r+0x7f0>
 8006f1a:	9b04      	ldr	r3, [sp, #16]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	9304      	str	r3, [sp, #16]
 8006f20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f22:	3301      	adds	r3, #1
 8006f24:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f26:	2301      	movs	r3, #1
 8006f28:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f000 81b8 	beq.w	80072a2 <_dtoa_r+0xb6a>
 8006f32:	6923      	ldr	r3, [r4, #16]
 8006f34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f38:	6918      	ldr	r0, [r3, #16]
 8006f3a:	f000 fb77 	bl	800762c <__hi0bits>
 8006f3e:	f1c0 0020 	rsb	r0, r0, #32
 8006f42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f44:	4418      	add	r0, r3
 8006f46:	f010 001f 	ands.w	r0, r0, #31
 8006f4a:	f000 8082 	beq.w	8007052 <_dtoa_r+0x91a>
 8006f4e:	f1c0 0320 	rsb	r3, r0, #32
 8006f52:	2b04      	cmp	r3, #4
 8006f54:	dd73      	ble.n	800703e <_dtoa_r+0x906>
 8006f56:	9b04      	ldr	r3, [sp, #16]
 8006f58:	f1c0 001c 	rsb	r0, r0, #28
 8006f5c:	4403      	add	r3, r0
 8006f5e:	9304      	str	r3, [sp, #16]
 8006f60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f62:	4406      	add	r6, r0
 8006f64:	4403      	add	r3, r0
 8006f66:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f68:	9b04      	ldr	r3, [sp, #16]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	dd05      	ble.n	8006f7a <_dtoa_r+0x842>
 8006f6e:	461a      	mov	r2, r3
 8006f70:	4648      	mov	r0, r9
 8006f72:	9903      	ldr	r1, [sp, #12]
 8006f74:	f000 fcb8 	bl	80078e8 <__lshift>
 8006f78:	9003      	str	r0, [sp, #12]
 8006f7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	dd05      	ble.n	8006f8c <_dtoa_r+0x854>
 8006f80:	4621      	mov	r1, r4
 8006f82:	461a      	mov	r2, r3
 8006f84:	4648      	mov	r0, r9
 8006f86:	f000 fcaf 	bl	80078e8 <__lshift>
 8006f8a:	4604      	mov	r4, r0
 8006f8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d061      	beq.n	8007056 <_dtoa_r+0x91e>
 8006f92:	4621      	mov	r1, r4
 8006f94:	9803      	ldr	r0, [sp, #12]
 8006f96:	f000 fd13 	bl	80079c0 <__mcmp>
 8006f9a:	2800      	cmp	r0, #0
 8006f9c:	da5b      	bge.n	8007056 <_dtoa_r+0x91e>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	220a      	movs	r2, #10
 8006fa2:	4648      	mov	r0, r9
 8006fa4:	9903      	ldr	r1, [sp, #12]
 8006fa6:	f000 fafb 	bl	80075a0 <__multadd>
 8006faa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fac:	f107 38ff 	add.w	r8, r7, #4294967295
 8006fb0:	9003      	str	r0, [sp, #12]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f000 8177 	beq.w	80072a6 <_dtoa_r+0xb6e>
 8006fb8:	4629      	mov	r1, r5
 8006fba:	2300      	movs	r3, #0
 8006fbc:	220a      	movs	r2, #10
 8006fbe:	4648      	mov	r0, r9
 8006fc0:	f000 faee 	bl	80075a0 <__multadd>
 8006fc4:	f1bb 0f00 	cmp.w	fp, #0
 8006fc8:	4605      	mov	r5, r0
 8006fca:	dc6f      	bgt.n	80070ac <_dtoa_r+0x974>
 8006fcc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	dc49      	bgt.n	8007066 <_dtoa_r+0x92e>
 8006fd2:	e06b      	b.n	80070ac <_dtoa_r+0x974>
 8006fd4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006fd6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006fda:	e73c      	b.n	8006e56 <_dtoa_r+0x71e>
 8006fdc:	3fe00000 	.word	0x3fe00000
 8006fe0:	40240000 	.word	0x40240000
 8006fe4:	9b08      	ldr	r3, [sp, #32]
 8006fe6:	1e5c      	subs	r4, r3, #1
 8006fe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fea:	42a3      	cmp	r3, r4
 8006fec:	db09      	blt.n	8007002 <_dtoa_r+0x8ca>
 8006fee:	1b1c      	subs	r4, r3, r4
 8006ff0:	9b08      	ldr	r3, [sp, #32]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f6bf af30 	bge.w	8006e58 <_dtoa_r+0x720>
 8006ff8:	9b04      	ldr	r3, [sp, #16]
 8006ffa:	9a08      	ldr	r2, [sp, #32]
 8006ffc:	1a9e      	subs	r6, r3, r2
 8006ffe:	2300      	movs	r3, #0
 8007000:	e72b      	b.n	8006e5a <_dtoa_r+0x722>
 8007002:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007004:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007006:	1ae3      	subs	r3, r4, r3
 8007008:	441a      	add	r2, r3
 800700a:	940a      	str	r4, [sp, #40]	@ 0x28
 800700c:	9e04      	ldr	r6, [sp, #16]
 800700e:	2400      	movs	r4, #0
 8007010:	9b08      	ldr	r3, [sp, #32]
 8007012:	920e      	str	r2, [sp, #56]	@ 0x38
 8007014:	e721      	b.n	8006e5a <_dtoa_r+0x722>
 8007016:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007018:	9e04      	ldr	r6, [sp, #16]
 800701a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800701c:	e728      	b.n	8006e70 <_dtoa_r+0x738>
 800701e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007022:	e751      	b.n	8006ec8 <_dtoa_r+0x790>
 8007024:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007026:	9903      	ldr	r1, [sp, #12]
 8007028:	e750      	b.n	8006ecc <_dtoa_r+0x794>
 800702a:	f8cd 800c 	str.w	r8, [sp, #12]
 800702e:	e751      	b.n	8006ed4 <_dtoa_r+0x79c>
 8007030:	2300      	movs	r3, #0
 8007032:	e779      	b.n	8006f28 <_dtoa_r+0x7f0>
 8007034:	9b06      	ldr	r3, [sp, #24]
 8007036:	e777      	b.n	8006f28 <_dtoa_r+0x7f0>
 8007038:	2300      	movs	r3, #0
 800703a:	930a      	str	r3, [sp, #40]	@ 0x28
 800703c:	e779      	b.n	8006f32 <_dtoa_r+0x7fa>
 800703e:	d093      	beq.n	8006f68 <_dtoa_r+0x830>
 8007040:	9a04      	ldr	r2, [sp, #16]
 8007042:	331c      	adds	r3, #28
 8007044:	441a      	add	r2, r3
 8007046:	9204      	str	r2, [sp, #16]
 8007048:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800704a:	441e      	add	r6, r3
 800704c:	441a      	add	r2, r3
 800704e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007050:	e78a      	b.n	8006f68 <_dtoa_r+0x830>
 8007052:	4603      	mov	r3, r0
 8007054:	e7f4      	b.n	8007040 <_dtoa_r+0x908>
 8007056:	9b08      	ldr	r3, [sp, #32]
 8007058:	46b8      	mov	r8, r7
 800705a:	2b00      	cmp	r3, #0
 800705c:	dc20      	bgt.n	80070a0 <_dtoa_r+0x968>
 800705e:	469b      	mov	fp, r3
 8007060:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007062:	2b02      	cmp	r3, #2
 8007064:	dd1e      	ble.n	80070a4 <_dtoa_r+0x96c>
 8007066:	f1bb 0f00 	cmp.w	fp, #0
 800706a:	f47f adb1 	bne.w	8006bd0 <_dtoa_r+0x498>
 800706e:	4621      	mov	r1, r4
 8007070:	465b      	mov	r3, fp
 8007072:	2205      	movs	r2, #5
 8007074:	4648      	mov	r0, r9
 8007076:	f000 fa93 	bl	80075a0 <__multadd>
 800707a:	4601      	mov	r1, r0
 800707c:	4604      	mov	r4, r0
 800707e:	9803      	ldr	r0, [sp, #12]
 8007080:	f000 fc9e 	bl	80079c0 <__mcmp>
 8007084:	2800      	cmp	r0, #0
 8007086:	f77f ada3 	ble.w	8006bd0 <_dtoa_r+0x498>
 800708a:	4656      	mov	r6, sl
 800708c:	2331      	movs	r3, #49	@ 0x31
 800708e:	f108 0801 	add.w	r8, r8, #1
 8007092:	f806 3b01 	strb.w	r3, [r6], #1
 8007096:	e59f      	b.n	8006bd8 <_dtoa_r+0x4a0>
 8007098:	46b8      	mov	r8, r7
 800709a:	9c08      	ldr	r4, [sp, #32]
 800709c:	4625      	mov	r5, r4
 800709e:	e7f4      	b.n	800708a <_dtoa_r+0x952>
 80070a0:	f8dd b020 	ldr.w	fp, [sp, #32]
 80070a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f000 8101 	beq.w	80072ae <_dtoa_r+0xb76>
 80070ac:	2e00      	cmp	r6, #0
 80070ae:	dd05      	ble.n	80070bc <_dtoa_r+0x984>
 80070b0:	4629      	mov	r1, r5
 80070b2:	4632      	mov	r2, r6
 80070b4:	4648      	mov	r0, r9
 80070b6:	f000 fc17 	bl	80078e8 <__lshift>
 80070ba:	4605      	mov	r5, r0
 80070bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d05c      	beq.n	800717c <_dtoa_r+0xa44>
 80070c2:	4648      	mov	r0, r9
 80070c4:	6869      	ldr	r1, [r5, #4]
 80070c6:	f000 fa09 	bl	80074dc <_Balloc>
 80070ca:	4606      	mov	r6, r0
 80070cc:	b928      	cbnz	r0, 80070da <_dtoa_r+0x9a2>
 80070ce:	4602      	mov	r2, r0
 80070d0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80070d4:	4b80      	ldr	r3, [pc, #512]	@ (80072d8 <_dtoa_r+0xba0>)
 80070d6:	f7ff bb43 	b.w	8006760 <_dtoa_r+0x28>
 80070da:	692a      	ldr	r2, [r5, #16]
 80070dc:	f105 010c 	add.w	r1, r5, #12
 80070e0:	3202      	adds	r2, #2
 80070e2:	0092      	lsls	r2, r2, #2
 80070e4:	300c      	adds	r0, #12
 80070e6:	f7ff fa90 	bl	800660a <memcpy>
 80070ea:	2201      	movs	r2, #1
 80070ec:	4631      	mov	r1, r6
 80070ee:	4648      	mov	r0, r9
 80070f0:	f000 fbfa 	bl	80078e8 <__lshift>
 80070f4:	462f      	mov	r7, r5
 80070f6:	4605      	mov	r5, r0
 80070f8:	f10a 0301 	add.w	r3, sl, #1
 80070fc:	9304      	str	r3, [sp, #16]
 80070fe:	eb0a 030b 	add.w	r3, sl, fp
 8007102:	930a      	str	r3, [sp, #40]	@ 0x28
 8007104:	9b06      	ldr	r3, [sp, #24]
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	9309      	str	r3, [sp, #36]	@ 0x24
 800710c:	9b04      	ldr	r3, [sp, #16]
 800710e:	4621      	mov	r1, r4
 8007110:	9803      	ldr	r0, [sp, #12]
 8007112:	f103 3bff 	add.w	fp, r3, #4294967295
 8007116:	f7ff fa86 	bl	8006626 <quorem>
 800711a:	4603      	mov	r3, r0
 800711c:	4639      	mov	r1, r7
 800711e:	3330      	adds	r3, #48	@ 0x30
 8007120:	9006      	str	r0, [sp, #24]
 8007122:	9803      	ldr	r0, [sp, #12]
 8007124:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007126:	f000 fc4b 	bl	80079c0 <__mcmp>
 800712a:	462a      	mov	r2, r5
 800712c:	9008      	str	r0, [sp, #32]
 800712e:	4621      	mov	r1, r4
 8007130:	4648      	mov	r0, r9
 8007132:	f000 fc61 	bl	80079f8 <__mdiff>
 8007136:	68c2      	ldr	r2, [r0, #12]
 8007138:	4606      	mov	r6, r0
 800713a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800713c:	bb02      	cbnz	r2, 8007180 <_dtoa_r+0xa48>
 800713e:	4601      	mov	r1, r0
 8007140:	9803      	ldr	r0, [sp, #12]
 8007142:	f000 fc3d 	bl	80079c0 <__mcmp>
 8007146:	4602      	mov	r2, r0
 8007148:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800714a:	4631      	mov	r1, r6
 800714c:	4648      	mov	r0, r9
 800714e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8007152:	f000 fa03 	bl	800755c <_Bfree>
 8007156:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007158:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800715a:	9e04      	ldr	r6, [sp, #16]
 800715c:	ea42 0103 	orr.w	r1, r2, r3
 8007160:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007162:	4319      	orrs	r1, r3
 8007164:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007166:	d10d      	bne.n	8007184 <_dtoa_r+0xa4c>
 8007168:	2b39      	cmp	r3, #57	@ 0x39
 800716a:	d027      	beq.n	80071bc <_dtoa_r+0xa84>
 800716c:	9a08      	ldr	r2, [sp, #32]
 800716e:	2a00      	cmp	r2, #0
 8007170:	dd01      	ble.n	8007176 <_dtoa_r+0xa3e>
 8007172:	9b06      	ldr	r3, [sp, #24]
 8007174:	3331      	adds	r3, #49	@ 0x31
 8007176:	f88b 3000 	strb.w	r3, [fp]
 800717a:	e52e      	b.n	8006bda <_dtoa_r+0x4a2>
 800717c:	4628      	mov	r0, r5
 800717e:	e7b9      	b.n	80070f4 <_dtoa_r+0x9bc>
 8007180:	2201      	movs	r2, #1
 8007182:	e7e2      	b.n	800714a <_dtoa_r+0xa12>
 8007184:	9908      	ldr	r1, [sp, #32]
 8007186:	2900      	cmp	r1, #0
 8007188:	db04      	blt.n	8007194 <_dtoa_r+0xa5c>
 800718a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800718c:	4301      	orrs	r1, r0
 800718e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007190:	4301      	orrs	r1, r0
 8007192:	d120      	bne.n	80071d6 <_dtoa_r+0xa9e>
 8007194:	2a00      	cmp	r2, #0
 8007196:	ddee      	ble.n	8007176 <_dtoa_r+0xa3e>
 8007198:	2201      	movs	r2, #1
 800719a:	9903      	ldr	r1, [sp, #12]
 800719c:	4648      	mov	r0, r9
 800719e:	9304      	str	r3, [sp, #16]
 80071a0:	f000 fba2 	bl	80078e8 <__lshift>
 80071a4:	4621      	mov	r1, r4
 80071a6:	9003      	str	r0, [sp, #12]
 80071a8:	f000 fc0a 	bl	80079c0 <__mcmp>
 80071ac:	2800      	cmp	r0, #0
 80071ae:	9b04      	ldr	r3, [sp, #16]
 80071b0:	dc02      	bgt.n	80071b8 <_dtoa_r+0xa80>
 80071b2:	d1e0      	bne.n	8007176 <_dtoa_r+0xa3e>
 80071b4:	07da      	lsls	r2, r3, #31
 80071b6:	d5de      	bpl.n	8007176 <_dtoa_r+0xa3e>
 80071b8:	2b39      	cmp	r3, #57	@ 0x39
 80071ba:	d1da      	bne.n	8007172 <_dtoa_r+0xa3a>
 80071bc:	2339      	movs	r3, #57	@ 0x39
 80071be:	f88b 3000 	strb.w	r3, [fp]
 80071c2:	4633      	mov	r3, r6
 80071c4:	461e      	mov	r6, r3
 80071c6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80071ca:	3b01      	subs	r3, #1
 80071cc:	2a39      	cmp	r2, #57	@ 0x39
 80071ce:	d04e      	beq.n	800726e <_dtoa_r+0xb36>
 80071d0:	3201      	adds	r2, #1
 80071d2:	701a      	strb	r2, [r3, #0]
 80071d4:	e501      	b.n	8006bda <_dtoa_r+0x4a2>
 80071d6:	2a00      	cmp	r2, #0
 80071d8:	dd03      	ble.n	80071e2 <_dtoa_r+0xaaa>
 80071da:	2b39      	cmp	r3, #57	@ 0x39
 80071dc:	d0ee      	beq.n	80071bc <_dtoa_r+0xa84>
 80071de:	3301      	adds	r3, #1
 80071e0:	e7c9      	b.n	8007176 <_dtoa_r+0xa3e>
 80071e2:	9a04      	ldr	r2, [sp, #16]
 80071e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80071e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80071ea:	428a      	cmp	r2, r1
 80071ec:	d028      	beq.n	8007240 <_dtoa_r+0xb08>
 80071ee:	2300      	movs	r3, #0
 80071f0:	220a      	movs	r2, #10
 80071f2:	9903      	ldr	r1, [sp, #12]
 80071f4:	4648      	mov	r0, r9
 80071f6:	f000 f9d3 	bl	80075a0 <__multadd>
 80071fa:	42af      	cmp	r7, r5
 80071fc:	9003      	str	r0, [sp, #12]
 80071fe:	f04f 0300 	mov.w	r3, #0
 8007202:	f04f 020a 	mov.w	r2, #10
 8007206:	4639      	mov	r1, r7
 8007208:	4648      	mov	r0, r9
 800720a:	d107      	bne.n	800721c <_dtoa_r+0xae4>
 800720c:	f000 f9c8 	bl	80075a0 <__multadd>
 8007210:	4607      	mov	r7, r0
 8007212:	4605      	mov	r5, r0
 8007214:	9b04      	ldr	r3, [sp, #16]
 8007216:	3301      	adds	r3, #1
 8007218:	9304      	str	r3, [sp, #16]
 800721a:	e777      	b.n	800710c <_dtoa_r+0x9d4>
 800721c:	f000 f9c0 	bl	80075a0 <__multadd>
 8007220:	4629      	mov	r1, r5
 8007222:	4607      	mov	r7, r0
 8007224:	2300      	movs	r3, #0
 8007226:	220a      	movs	r2, #10
 8007228:	4648      	mov	r0, r9
 800722a:	f000 f9b9 	bl	80075a0 <__multadd>
 800722e:	4605      	mov	r5, r0
 8007230:	e7f0      	b.n	8007214 <_dtoa_r+0xadc>
 8007232:	f1bb 0f00 	cmp.w	fp, #0
 8007236:	bfcc      	ite	gt
 8007238:	465e      	movgt	r6, fp
 800723a:	2601      	movle	r6, #1
 800723c:	2700      	movs	r7, #0
 800723e:	4456      	add	r6, sl
 8007240:	2201      	movs	r2, #1
 8007242:	9903      	ldr	r1, [sp, #12]
 8007244:	4648      	mov	r0, r9
 8007246:	9304      	str	r3, [sp, #16]
 8007248:	f000 fb4e 	bl	80078e8 <__lshift>
 800724c:	4621      	mov	r1, r4
 800724e:	9003      	str	r0, [sp, #12]
 8007250:	f000 fbb6 	bl	80079c0 <__mcmp>
 8007254:	2800      	cmp	r0, #0
 8007256:	dcb4      	bgt.n	80071c2 <_dtoa_r+0xa8a>
 8007258:	d102      	bne.n	8007260 <_dtoa_r+0xb28>
 800725a:	9b04      	ldr	r3, [sp, #16]
 800725c:	07db      	lsls	r3, r3, #31
 800725e:	d4b0      	bmi.n	80071c2 <_dtoa_r+0xa8a>
 8007260:	4633      	mov	r3, r6
 8007262:	461e      	mov	r6, r3
 8007264:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007268:	2a30      	cmp	r2, #48	@ 0x30
 800726a:	d0fa      	beq.n	8007262 <_dtoa_r+0xb2a>
 800726c:	e4b5      	b.n	8006bda <_dtoa_r+0x4a2>
 800726e:	459a      	cmp	sl, r3
 8007270:	d1a8      	bne.n	80071c4 <_dtoa_r+0xa8c>
 8007272:	2331      	movs	r3, #49	@ 0x31
 8007274:	f108 0801 	add.w	r8, r8, #1
 8007278:	f88a 3000 	strb.w	r3, [sl]
 800727c:	e4ad      	b.n	8006bda <_dtoa_r+0x4a2>
 800727e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007280:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80072dc <_dtoa_r+0xba4>
 8007284:	b11b      	cbz	r3, 800728e <_dtoa_r+0xb56>
 8007286:	f10a 0308 	add.w	r3, sl, #8
 800728a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800728c:	6013      	str	r3, [r2, #0]
 800728e:	4650      	mov	r0, sl
 8007290:	b017      	add	sp, #92	@ 0x5c
 8007292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007296:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007298:	2b01      	cmp	r3, #1
 800729a:	f77f ae2e 	ble.w	8006efa <_dtoa_r+0x7c2>
 800729e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80072a2:	2001      	movs	r0, #1
 80072a4:	e64d      	b.n	8006f42 <_dtoa_r+0x80a>
 80072a6:	f1bb 0f00 	cmp.w	fp, #0
 80072aa:	f77f aed9 	ble.w	8007060 <_dtoa_r+0x928>
 80072ae:	4656      	mov	r6, sl
 80072b0:	4621      	mov	r1, r4
 80072b2:	9803      	ldr	r0, [sp, #12]
 80072b4:	f7ff f9b7 	bl	8006626 <quorem>
 80072b8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80072bc:	f806 3b01 	strb.w	r3, [r6], #1
 80072c0:	eba6 020a 	sub.w	r2, r6, sl
 80072c4:	4593      	cmp	fp, r2
 80072c6:	ddb4      	ble.n	8007232 <_dtoa_r+0xafa>
 80072c8:	2300      	movs	r3, #0
 80072ca:	220a      	movs	r2, #10
 80072cc:	4648      	mov	r0, r9
 80072ce:	9903      	ldr	r1, [sp, #12]
 80072d0:	f000 f966 	bl	80075a0 <__multadd>
 80072d4:	9003      	str	r0, [sp, #12]
 80072d6:	e7eb      	b.n	80072b0 <_dtoa_r+0xb78>
 80072d8:	0800a47e 	.word	0x0800a47e
 80072dc:	0800a402 	.word	0x0800a402

080072e0 <_free_r>:
 80072e0:	b538      	push	{r3, r4, r5, lr}
 80072e2:	4605      	mov	r5, r0
 80072e4:	2900      	cmp	r1, #0
 80072e6:	d040      	beq.n	800736a <_free_r+0x8a>
 80072e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072ec:	1f0c      	subs	r4, r1, #4
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	bfb8      	it	lt
 80072f2:	18e4      	addlt	r4, r4, r3
 80072f4:	f000 f8e6 	bl	80074c4 <__malloc_lock>
 80072f8:	4a1c      	ldr	r2, [pc, #112]	@ (800736c <_free_r+0x8c>)
 80072fa:	6813      	ldr	r3, [r2, #0]
 80072fc:	b933      	cbnz	r3, 800730c <_free_r+0x2c>
 80072fe:	6063      	str	r3, [r4, #4]
 8007300:	6014      	str	r4, [r2, #0]
 8007302:	4628      	mov	r0, r5
 8007304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007308:	f000 b8e2 	b.w	80074d0 <__malloc_unlock>
 800730c:	42a3      	cmp	r3, r4
 800730e:	d908      	bls.n	8007322 <_free_r+0x42>
 8007310:	6820      	ldr	r0, [r4, #0]
 8007312:	1821      	adds	r1, r4, r0
 8007314:	428b      	cmp	r3, r1
 8007316:	bf01      	itttt	eq
 8007318:	6819      	ldreq	r1, [r3, #0]
 800731a:	685b      	ldreq	r3, [r3, #4]
 800731c:	1809      	addeq	r1, r1, r0
 800731e:	6021      	streq	r1, [r4, #0]
 8007320:	e7ed      	b.n	80072fe <_free_r+0x1e>
 8007322:	461a      	mov	r2, r3
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	b10b      	cbz	r3, 800732c <_free_r+0x4c>
 8007328:	42a3      	cmp	r3, r4
 800732a:	d9fa      	bls.n	8007322 <_free_r+0x42>
 800732c:	6811      	ldr	r1, [r2, #0]
 800732e:	1850      	adds	r0, r2, r1
 8007330:	42a0      	cmp	r0, r4
 8007332:	d10b      	bne.n	800734c <_free_r+0x6c>
 8007334:	6820      	ldr	r0, [r4, #0]
 8007336:	4401      	add	r1, r0
 8007338:	1850      	adds	r0, r2, r1
 800733a:	4283      	cmp	r3, r0
 800733c:	6011      	str	r1, [r2, #0]
 800733e:	d1e0      	bne.n	8007302 <_free_r+0x22>
 8007340:	6818      	ldr	r0, [r3, #0]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	4408      	add	r0, r1
 8007346:	6010      	str	r0, [r2, #0]
 8007348:	6053      	str	r3, [r2, #4]
 800734a:	e7da      	b.n	8007302 <_free_r+0x22>
 800734c:	d902      	bls.n	8007354 <_free_r+0x74>
 800734e:	230c      	movs	r3, #12
 8007350:	602b      	str	r3, [r5, #0]
 8007352:	e7d6      	b.n	8007302 <_free_r+0x22>
 8007354:	6820      	ldr	r0, [r4, #0]
 8007356:	1821      	adds	r1, r4, r0
 8007358:	428b      	cmp	r3, r1
 800735a:	bf01      	itttt	eq
 800735c:	6819      	ldreq	r1, [r3, #0]
 800735e:	685b      	ldreq	r3, [r3, #4]
 8007360:	1809      	addeq	r1, r1, r0
 8007362:	6021      	streq	r1, [r4, #0]
 8007364:	6063      	str	r3, [r4, #4]
 8007366:	6054      	str	r4, [r2, #4]
 8007368:	e7cb      	b.n	8007302 <_free_r+0x22>
 800736a:	bd38      	pop	{r3, r4, r5, pc}
 800736c:	200008d0 	.word	0x200008d0

08007370 <malloc>:
 8007370:	4b02      	ldr	r3, [pc, #8]	@ (800737c <malloc+0xc>)
 8007372:	4601      	mov	r1, r0
 8007374:	6818      	ldr	r0, [r3, #0]
 8007376:	f000 b825 	b.w	80073c4 <_malloc_r>
 800737a:	bf00      	nop
 800737c:	20000018 	.word	0x20000018

08007380 <sbrk_aligned>:
 8007380:	b570      	push	{r4, r5, r6, lr}
 8007382:	4e0f      	ldr	r6, [pc, #60]	@ (80073c0 <sbrk_aligned+0x40>)
 8007384:	460c      	mov	r4, r1
 8007386:	6831      	ldr	r1, [r6, #0]
 8007388:	4605      	mov	r5, r0
 800738a:	b911      	cbnz	r1, 8007392 <sbrk_aligned+0x12>
 800738c:	f000 fe20 	bl	8007fd0 <_sbrk_r>
 8007390:	6030      	str	r0, [r6, #0]
 8007392:	4621      	mov	r1, r4
 8007394:	4628      	mov	r0, r5
 8007396:	f000 fe1b 	bl	8007fd0 <_sbrk_r>
 800739a:	1c43      	adds	r3, r0, #1
 800739c:	d103      	bne.n	80073a6 <sbrk_aligned+0x26>
 800739e:	f04f 34ff 	mov.w	r4, #4294967295
 80073a2:	4620      	mov	r0, r4
 80073a4:	bd70      	pop	{r4, r5, r6, pc}
 80073a6:	1cc4      	adds	r4, r0, #3
 80073a8:	f024 0403 	bic.w	r4, r4, #3
 80073ac:	42a0      	cmp	r0, r4
 80073ae:	d0f8      	beq.n	80073a2 <sbrk_aligned+0x22>
 80073b0:	1a21      	subs	r1, r4, r0
 80073b2:	4628      	mov	r0, r5
 80073b4:	f000 fe0c 	bl	8007fd0 <_sbrk_r>
 80073b8:	3001      	adds	r0, #1
 80073ba:	d1f2      	bne.n	80073a2 <sbrk_aligned+0x22>
 80073bc:	e7ef      	b.n	800739e <sbrk_aligned+0x1e>
 80073be:	bf00      	nop
 80073c0:	200008cc 	.word	0x200008cc

080073c4 <_malloc_r>:
 80073c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073c8:	1ccd      	adds	r5, r1, #3
 80073ca:	f025 0503 	bic.w	r5, r5, #3
 80073ce:	3508      	adds	r5, #8
 80073d0:	2d0c      	cmp	r5, #12
 80073d2:	bf38      	it	cc
 80073d4:	250c      	movcc	r5, #12
 80073d6:	2d00      	cmp	r5, #0
 80073d8:	4606      	mov	r6, r0
 80073da:	db01      	blt.n	80073e0 <_malloc_r+0x1c>
 80073dc:	42a9      	cmp	r1, r5
 80073de:	d904      	bls.n	80073ea <_malloc_r+0x26>
 80073e0:	230c      	movs	r3, #12
 80073e2:	6033      	str	r3, [r6, #0]
 80073e4:	2000      	movs	r0, #0
 80073e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80074c0 <_malloc_r+0xfc>
 80073ee:	f000 f869 	bl	80074c4 <__malloc_lock>
 80073f2:	f8d8 3000 	ldr.w	r3, [r8]
 80073f6:	461c      	mov	r4, r3
 80073f8:	bb44      	cbnz	r4, 800744c <_malloc_r+0x88>
 80073fa:	4629      	mov	r1, r5
 80073fc:	4630      	mov	r0, r6
 80073fe:	f7ff ffbf 	bl	8007380 <sbrk_aligned>
 8007402:	1c43      	adds	r3, r0, #1
 8007404:	4604      	mov	r4, r0
 8007406:	d158      	bne.n	80074ba <_malloc_r+0xf6>
 8007408:	f8d8 4000 	ldr.w	r4, [r8]
 800740c:	4627      	mov	r7, r4
 800740e:	2f00      	cmp	r7, #0
 8007410:	d143      	bne.n	800749a <_malloc_r+0xd6>
 8007412:	2c00      	cmp	r4, #0
 8007414:	d04b      	beq.n	80074ae <_malloc_r+0xea>
 8007416:	6823      	ldr	r3, [r4, #0]
 8007418:	4639      	mov	r1, r7
 800741a:	4630      	mov	r0, r6
 800741c:	eb04 0903 	add.w	r9, r4, r3
 8007420:	f000 fdd6 	bl	8007fd0 <_sbrk_r>
 8007424:	4581      	cmp	r9, r0
 8007426:	d142      	bne.n	80074ae <_malloc_r+0xea>
 8007428:	6821      	ldr	r1, [r4, #0]
 800742a:	4630      	mov	r0, r6
 800742c:	1a6d      	subs	r5, r5, r1
 800742e:	4629      	mov	r1, r5
 8007430:	f7ff ffa6 	bl	8007380 <sbrk_aligned>
 8007434:	3001      	adds	r0, #1
 8007436:	d03a      	beq.n	80074ae <_malloc_r+0xea>
 8007438:	6823      	ldr	r3, [r4, #0]
 800743a:	442b      	add	r3, r5
 800743c:	6023      	str	r3, [r4, #0]
 800743e:	f8d8 3000 	ldr.w	r3, [r8]
 8007442:	685a      	ldr	r2, [r3, #4]
 8007444:	bb62      	cbnz	r2, 80074a0 <_malloc_r+0xdc>
 8007446:	f8c8 7000 	str.w	r7, [r8]
 800744a:	e00f      	b.n	800746c <_malloc_r+0xa8>
 800744c:	6822      	ldr	r2, [r4, #0]
 800744e:	1b52      	subs	r2, r2, r5
 8007450:	d420      	bmi.n	8007494 <_malloc_r+0xd0>
 8007452:	2a0b      	cmp	r2, #11
 8007454:	d917      	bls.n	8007486 <_malloc_r+0xc2>
 8007456:	1961      	adds	r1, r4, r5
 8007458:	42a3      	cmp	r3, r4
 800745a:	6025      	str	r5, [r4, #0]
 800745c:	bf18      	it	ne
 800745e:	6059      	strne	r1, [r3, #4]
 8007460:	6863      	ldr	r3, [r4, #4]
 8007462:	bf08      	it	eq
 8007464:	f8c8 1000 	streq.w	r1, [r8]
 8007468:	5162      	str	r2, [r4, r5]
 800746a:	604b      	str	r3, [r1, #4]
 800746c:	4630      	mov	r0, r6
 800746e:	f000 f82f 	bl	80074d0 <__malloc_unlock>
 8007472:	f104 000b 	add.w	r0, r4, #11
 8007476:	1d23      	adds	r3, r4, #4
 8007478:	f020 0007 	bic.w	r0, r0, #7
 800747c:	1ac2      	subs	r2, r0, r3
 800747e:	bf1c      	itt	ne
 8007480:	1a1b      	subne	r3, r3, r0
 8007482:	50a3      	strne	r3, [r4, r2]
 8007484:	e7af      	b.n	80073e6 <_malloc_r+0x22>
 8007486:	6862      	ldr	r2, [r4, #4]
 8007488:	42a3      	cmp	r3, r4
 800748a:	bf0c      	ite	eq
 800748c:	f8c8 2000 	streq.w	r2, [r8]
 8007490:	605a      	strne	r2, [r3, #4]
 8007492:	e7eb      	b.n	800746c <_malloc_r+0xa8>
 8007494:	4623      	mov	r3, r4
 8007496:	6864      	ldr	r4, [r4, #4]
 8007498:	e7ae      	b.n	80073f8 <_malloc_r+0x34>
 800749a:	463c      	mov	r4, r7
 800749c:	687f      	ldr	r7, [r7, #4]
 800749e:	e7b6      	b.n	800740e <_malloc_r+0x4a>
 80074a0:	461a      	mov	r2, r3
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	42a3      	cmp	r3, r4
 80074a6:	d1fb      	bne.n	80074a0 <_malloc_r+0xdc>
 80074a8:	2300      	movs	r3, #0
 80074aa:	6053      	str	r3, [r2, #4]
 80074ac:	e7de      	b.n	800746c <_malloc_r+0xa8>
 80074ae:	230c      	movs	r3, #12
 80074b0:	4630      	mov	r0, r6
 80074b2:	6033      	str	r3, [r6, #0]
 80074b4:	f000 f80c 	bl	80074d0 <__malloc_unlock>
 80074b8:	e794      	b.n	80073e4 <_malloc_r+0x20>
 80074ba:	6005      	str	r5, [r0, #0]
 80074bc:	e7d6      	b.n	800746c <_malloc_r+0xa8>
 80074be:	bf00      	nop
 80074c0:	200008d0 	.word	0x200008d0

080074c4 <__malloc_lock>:
 80074c4:	4801      	ldr	r0, [pc, #4]	@ (80074cc <__malloc_lock+0x8>)
 80074c6:	f7ff b890 	b.w	80065ea <__retarget_lock_acquire_recursive>
 80074ca:	bf00      	nop
 80074cc:	200008c8 	.word	0x200008c8

080074d0 <__malloc_unlock>:
 80074d0:	4801      	ldr	r0, [pc, #4]	@ (80074d8 <__malloc_unlock+0x8>)
 80074d2:	f7ff b88b 	b.w	80065ec <__retarget_lock_release_recursive>
 80074d6:	bf00      	nop
 80074d8:	200008c8 	.word	0x200008c8

080074dc <_Balloc>:
 80074dc:	b570      	push	{r4, r5, r6, lr}
 80074de:	69c6      	ldr	r6, [r0, #28]
 80074e0:	4604      	mov	r4, r0
 80074e2:	460d      	mov	r5, r1
 80074e4:	b976      	cbnz	r6, 8007504 <_Balloc+0x28>
 80074e6:	2010      	movs	r0, #16
 80074e8:	f7ff ff42 	bl	8007370 <malloc>
 80074ec:	4602      	mov	r2, r0
 80074ee:	61e0      	str	r0, [r4, #28]
 80074f0:	b920      	cbnz	r0, 80074fc <_Balloc+0x20>
 80074f2:	216b      	movs	r1, #107	@ 0x6b
 80074f4:	4b17      	ldr	r3, [pc, #92]	@ (8007554 <_Balloc+0x78>)
 80074f6:	4818      	ldr	r0, [pc, #96]	@ (8007558 <_Balloc+0x7c>)
 80074f8:	f000 fd7a 	bl	8007ff0 <__assert_func>
 80074fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007500:	6006      	str	r6, [r0, #0]
 8007502:	60c6      	str	r6, [r0, #12]
 8007504:	69e6      	ldr	r6, [r4, #28]
 8007506:	68f3      	ldr	r3, [r6, #12]
 8007508:	b183      	cbz	r3, 800752c <_Balloc+0x50>
 800750a:	69e3      	ldr	r3, [r4, #28]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007512:	b9b8      	cbnz	r0, 8007544 <_Balloc+0x68>
 8007514:	2101      	movs	r1, #1
 8007516:	fa01 f605 	lsl.w	r6, r1, r5
 800751a:	1d72      	adds	r2, r6, #5
 800751c:	4620      	mov	r0, r4
 800751e:	0092      	lsls	r2, r2, #2
 8007520:	f000 fd84 	bl	800802c <_calloc_r>
 8007524:	b160      	cbz	r0, 8007540 <_Balloc+0x64>
 8007526:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800752a:	e00e      	b.n	800754a <_Balloc+0x6e>
 800752c:	2221      	movs	r2, #33	@ 0x21
 800752e:	2104      	movs	r1, #4
 8007530:	4620      	mov	r0, r4
 8007532:	f000 fd7b 	bl	800802c <_calloc_r>
 8007536:	69e3      	ldr	r3, [r4, #28]
 8007538:	60f0      	str	r0, [r6, #12]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1e4      	bne.n	800750a <_Balloc+0x2e>
 8007540:	2000      	movs	r0, #0
 8007542:	bd70      	pop	{r4, r5, r6, pc}
 8007544:	6802      	ldr	r2, [r0, #0]
 8007546:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800754a:	2300      	movs	r3, #0
 800754c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007550:	e7f7      	b.n	8007542 <_Balloc+0x66>
 8007552:	bf00      	nop
 8007554:	0800a40f 	.word	0x0800a40f
 8007558:	0800a48f 	.word	0x0800a48f

0800755c <_Bfree>:
 800755c:	b570      	push	{r4, r5, r6, lr}
 800755e:	69c6      	ldr	r6, [r0, #28]
 8007560:	4605      	mov	r5, r0
 8007562:	460c      	mov	r4, r1
 8007564:	b976      	cbnz	r6, 8007584 <_Bfree+0x28>
 8007566:	2010      	movs	r0, #16
 8007568:	f7ff ff02 	bl	8007370 <malloc>
 800756c:	4602      	mov	r2, r0
 800756e:	61e8      	str	r0, [r5, #28]
 8007570:	b920      	cbnz	r0, 800757c <_Bfree+0x20>
 8007572:	218f      	movs	r1, #143	@ 0x8f
 8007574:	4b08      	ldr	r3, [pc, #32]	@ (8007598 <_Bfree+0x3c>)
 8007576:	4809      	ldr	r0, [pc, #36]	@ (800759c <_Bfree+0x40>)
 8007578:	f000 fd3a 	bl	8007ff0 <__assert_func>
 800757c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007580:	6006      	str	r6, [r0, #0]
 8007582:	60c6      	str	r6, [r0, #12]
 8007584:	b13c      	cbz	r4, 8007596 <_Bfree+0x3a>
 8007586:	69eb      	ldr	r3, [r5, #28]
 8007588:	6862      	ldr	r2, [r4, #4]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007590:	6021      	str	r1, [r4, #0]
 8007592:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007596:	bd70      	pop	{r4, r5, r6, pc}
 8007598:	0800a40f 	.word	0x0800a40f
 800759c:	0800a48f 	.word	0x0800a48f

080075a0 <__multadd>:
 80075a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075a4:	4607      	mov	r7, r0
 80075a6:	460c      	mov	r4, r1
 80075a8:	461e      	mov	r6, r3
 80075aa:	2000      	movs	r0, #0
 80075ac:	690d      	ldr	r5, [r1, #16]
 80075ae:	f101 0c14 	add.w	ip, r1, #20
 80075b2:	f8dc 3000 	ldr.w	r3, [ip]
 80075b6:	3001      	adds	r0, #1
 80075b8:	b299      	uxth	r1, r3
 80075ba:	fb02 6101 	mla	r1, r2, r1, r6
 80075be:	0c1e      	lsrs	r6, r3, #16
 80075c0:	0c0b      	lsrs	r3, r1, #16
 80075c2:	fb02 3306 	mla	r3, r2, r6, r3
 80075c6:	b289      	uxth	r1, r1
 80075c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80075cc:	4285      	cmp	r5, r0
 80075ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80075d2:	f84c 1b04 	str.w	r1, [ip], #4
 80075d6:	dcec      	bgt.n	80075b2 <__multadd+0x12>
 80075d8:	b30e      	cbz	r6, 800761e <__multadd+0x7e>
 80075da:	68a3      	ldr	r3, [r4, #8]
 80075dc:	42ab      	cmp	r3, r5
 80075de:	dc19      	bgt.n	8007614 <__multadd+0x74>
 80075e0:	6861      	ldr	r1, [r4, #4]
 80075e2:	4638      	mov	r0, r7
 80075e4:	3101      	adds	r1, #1
 80075e6:	f7ff ff79 	bl	80074dc <_Balloc>
 80075ea:	4680      	mov	r8, r0
 80075ec:	b928      	cbnz	r0, 80075fa <__multadd+0x5a>
 80075ee:	4602      	mov	r2, r0
 80075f0:	21ba      	movs	r1, #186	@ 0xba
 80075f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007624 <__multadd+0x84>)
 80075f4:	480c      	ldr	r0, [pc, #48]	@ (8007628 <__multadd+0x88>)
 80075f6:	f000 fcfb 	bl	8007ff0 <__assert_func>
 80075fa:	6922      	ldr	r2, [r4, #16]
 80075fc:	f104 010c 	add.w	r1, r4, #12
 8007600:	3202      	adds	r2, #2
 8007602:	0092      	lsls	r2, r2, #2
 8007604:	300c      	adds	r0, #12
 8007606:	f7ff f800 	bl	800660a <memcpy>
 800760a:	4621      	mov	r1, r4
 800760c:	4638      	mov	r0, r7
 800760e:	f7ff ffa5 	bl	800755c <_Bfree>
 8007612:	4644      	mov	r4, r8
 8007614:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007618:	3501      	adds	r5, #1
 800761a:	615e      	str	r6, [r3, #20]
 800761c:	6125      	str	r5, [r4, #16]
 800761e:	4620      	mov	r0, r4
 8007620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007624:	0800a47e 	.word	0x0800a47e
 8007628:	0800a48f 	.word	0x0800a48f

0800762c <__hi0bits>:
 800762c:	4603      	mov	r3, r0
 800762e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007632:	bf3a      	itte	cc
 8007634:	0403      	lslcc	r3, r0, #16
 8007636:	2010      	movcc	r0, #16
 8007638:	2000      	movcs	r0, #0
 800763a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800763e:	bf3c      	itt	cc
 8007640:	021b      	lslcc	r3, r3, #8
 8007642:	3008      	addcc	r0, #8
 8007644:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007648:	bf3c      	itt	cc
 800764a:	011b      	lslcc	r3, r3, #4
 800764c:	3004      	addcc	r0, #4
 800764e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007652:	bf3c      	itt	cc
 8007654:	009b      	lslcc	r3, r3, #2
 8007656:	3002      	addcc	r0, #2
 8007658:	2b00      	cmp	r3, #0
 800765a:	db05      	blt.n	8007668 <__hi0bits+0x3c>
 800765c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007660:	f100 0001 	add.w	r0, r0, #1
 8007664:	bf08      	it	eq
 8007666:	2020      	moveq	r0, #32
 8007668:	4770      	bx	lr

0800766a <__lo0bits>:
 800766a:	6803      	ldr	r3, [r0, #0]
 800766c:	4602      	mov	r2, r0
 800766e:	f013 0007 	ands.w	r0, r3, #7
 8007672:	d00b      	beq.n	800768c <__lo0bits+0x22>
 8007674:	07d9      	lsls	r1, r3, #31
 8007676:	d421      	bmi.n	80076bc <__lo0bits+0x52>
 8007678:	0798      	lsls	r0, r3, #30
 800767a:	bf49      	itett	mi
 800767c:	085b      	lsrmi	r3, r3, #1
 800767e:	089b      	lsrpl	r3, r3, #2
 8007680:	2001      	movmi	r0, #1
 8007682:	6013      	strmi	r3, [r2, #0]
 8007684:	bf5c      	itt	pl
 8007686:	2002      	movpl	r0, #2
 8007688:	6013      	strpl	r3, [r2, #0]
 800768a:	4770      	bx	lr
 800768c:	b299      	uxth	r1, r3
 800768e:	b909      	cbnz	r1, 8007694 <__lo0bits+0x2a>
 8007690:	2010      	movs	r0, #16
 8007692:	0c1b      	lsrs	r3, r3, #16
 8007694:	b2d9      	uxtb	r1, r3
 8007696:	b909      	cbnz	r1, 800769c <__lo0bits+0x32>
 8007698:	3008      	adds	r0, #8
 800769a:	0a1b      	lsrs	r3, r3, #8
 800769c:	0719      	lsls	r1, r3, #28
 800769e:	bf04      	itt	eq
 80076a0:	091b      	lsreq	r3, r3, #4
 80076a2:	3004      	addeq	r0, #4
 80076a4:	0799      	lsls	r1, r3, #30
 80076a6:	bf04      	itt	eq
 80076a8:	089b      	lsreq	r3, r3, #2
 80076aa:	3002      	addeq	r0, #2
 80076ac:	07d9      	lsls	r1, r3, #31
 80076ae:	d403      	bmi.n	80076b8 <__lo0bits+0x4e>
 80076b0:	085b      	lsrs	r3, r3, #1
 80076b2:	f100 0001 	add.w	r0, r0, #1
 80076b6:	d003      	beq.n	80076c0 <__lo0bits+0x56>
 80076b8:	6013      	str	r3, [r2, #0]
 80076ba:	4770      	bx	lr
 80076bc:	2000      	movs	r0, #0
 80076be:	4770      	bx	lr
 80076c0:	2020      	movs	r0, #32
 80076c2:	4770      	bx	lr

080076c4 <__i2b>:
 80076c4:	b510      	push	{r4, lr}
 80076c6:	460c      	mov	r4, r1
 80076c8:	2101      	movs	r1, #1
 80076ca:	f7ff ff07 	bl	80074dc <_Balloc>
 80076ce:	4602      	mov	r2, r0
 80076d0:	b928      	cbnz	r0, 80076de <__i2b+0x1a>
 80076d2:	f240 1145 	movw	r1, #325	@ 0x145
 80076d6:	4b04      	ldr	r3, [pc, #16]	@ (80076e8 <__i2b+0x24>)
 80076d8:	4804      	ldr	r0, [pc, #16]	@ (80076ec <__i2b+0x28>)
 80076da:	f000 fc89 	bl	8007ff0 <__assert_func>
 80076de:	2301      	movs	r3, #1
 80076e0:	6144      	str	r4, [r0, #20]
 80076e2:	6103      	str	r3, [r0, #16]
 80076e4:	bd10      	pop	{r4, pc}
 80076e6:	bf00      	nop
 80076e8:	0800a47e 	.word	0x0800a47e
 80076ec:	0800a48f 	.word	0x0800a48f

080076f0 <__multiply>:
 80076f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f4:	4617      	mov	r7, r2
 80076f6:	690a      	ldr	r2, [r1, #16]
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	4689      	mov	r9, r1
 80076fc:	429a      	cmp	r2, r3
 80076fe:	bfa2      	ittt	ge
 8007700:	463b      	movge	r3, r7
 8007702:	460f      	movge	r7, r1
 8007704:	4699      	movge	r9, r3
 8007706:	693d      	ldr	r5, [r7, #16]
 8007708:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	6879      	ldr	r1, [r7, #4]
 8007710:	eb05 060a 	add.w	r6, r5, sl
 8007714:	42b3      	cmp	r3, r6
 8007716:	b085      	sub	sp, #20
 8007718:	bfb8      	it	lt
 800771a:	3101      	addlt	r1, #1
 800771c:	f7ff fede 	bl	80074dc <_Balloc>
 8007720:	b930      	cbnz	r0, 8007730 <__multiply+0x40>
 8007722:	4602      	mov	r2, r0
 8007724:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007728:	4b40      	ldr	r3, [pc, #256]	@ (800782c <__multiply+0x13c>)
 800772a:	4841      	ldr	r0, [pc, #260]	@ (8007830 <__multiply+0x140>)
 800772c:	f000 fc60 	bl	8007ff0 <__assert_func>
 8007730:	f100 0414 	add.w	r4, r0, #20
 8007734:	4623      	mov	r3, r4
 8007736:	2200      	movs	r2, #0
 8007738:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800773c:	4573      	cmp	r3, lr
 800773e:	d320      	bcc.n	8007782 <__multiply+0x92>
 8007740:	f107 0814 	add.w	r8, r7, #20
 8007744:	f109 0114 	add.w	r1, r9, #20
 8007748:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800774c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007750:	9302      	str	r3, [sp, #8]
 8007752:	1beb      	subs	r3, r5, r7
 8007754:	3b15      	subs	r3, #21
 8007756:	f023 0303 	bic.w	r3, r3, #3
 800775a:	3304      	adds	r3, #4
 800775c:	3715      	adds	r7, #21
 800775e:	42bd      	cmp	r5, r7
 8007760:	bf38      	it	cc
 8007762:	2304      	movcc	r3, #4
 8007764:	9301      	str	r3, [sp, #4]
 8007766:	9b02      	ldr	r3, [sp, #8]
 8007768:	9103      	str	r1, [sp, #12]
 800776a:	428b      	cmp	r3, r1
 800776c:	d80c      	bhi.n	8007788 <__multiply+0x98>
 800776e:	2e00      	cmp	r6, #0
 8007770:	dd03      	ble.n	800777a <__multiply+0x8a>
 8007772:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007776:	2b00      	cmp	r3, #0
 8007778:	d055      	beq.n	8007826 <__multiply+0x136>
 800777a:	6106      	str	r6, [r0, #16]
 800777c:	b005      	add	sp, #20
 800777e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007782:	f843 2b04 	str.w	r2, [r3], #4
 8007786:	e7d9      	b.n	800773c <__multiply+0x4c>
 8007788:	f8b1 a000 	ldrh.w	sl, [r1]
 800778c:	f1ba 0f00 	cmp.w	sl, #0
 8007790:	d01f      	beq.n	80077d2 <__multiply+0xe2>
 8007792:	46c4      	mov	ip, r8
 8007794:	46a1      	mov	r9, r4
 8007796:	2700      	movs	r7, #0
 8007798:	f85c 2b04 	ldr.w	r2, [ip], #4
 800779c:	f8d9 3000 	ldr.w	r3, [r9]
 80077a0:	fa1f fb82 	uxth.w	fp, r2
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	fb0a 330b 	mla	r3, sl, fp, r3
 80077aa:	443b      	add	r3, r7
 80077ac:	f8d9 7000 	ldr.w	r7, [r9]
 80077b0:	0c12      	lsrs	r2, r2, #16
 80077b2:	0c3f      	lsrs	r7, r7, #16
 80077b4:	fb0a 7202 	mla	r2, sl, r2, r7
 80077b8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80077bc:	b29b      	uxth	r3, r3
 80077be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077c2:	4565      	cmp	r5, ip
 80077c4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80077c8:	f849 3b04 	str.w	r3, [r9], #4
 80077cc:	d8e4      	bhi.n	8007798 <__multiply+0xa8>
 80077ce:	9b01      	ldr	r3, [sp, #4]
 80077d0:	50e7      	str	r7, [r4, r3]
 80077d2:	9b03      	ldr	r3, [sp, #12]
 80077d4:	3104      	adds	r1, #4
 80077d6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80077da:	f1b9 0f00 	cmp.w	r9, #0
 80077de:	d020      	beq.n	8007822 <__multiply+0x132>
 80077e0:	4647      	mov	r7, r8
 80077e2:	46a4      	mov	ip, r4
 80077e4:	f04f 0a00 	mov.w	sl, #0
 80077e8:	6823      	ldr	r3, [r4, #0]
 80077ea:	f8b7 b000 	ldrh.w	fp, [r7]
 80077ee:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	fb09 220b 	mla	r2, r9, fp, r2
 80077f8:	4452      	add	r2, sl
 80077fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077fe:	f84c 3b04 	str.w	r3, [ip], #4
 8007802:	f857 3b04 	ldr.w	r3, [r7], #4
 8007806:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800780a:	f8bc 3000 	ldrh.w	r3, [ip]
 800780e:	42bd      	cmp	r5, r7
 8007810:	fb09 330a 	mla	r3, r9, sl, r3
 8007814:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007818:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800781c:	d8e5      	bhi.n	80077ea <__multiply+0xfa>
 800781e:	9a01      	ldr	r2, [sp, #4]
 8007820:	50a3      	str	r3, [r4, r2]
 8007822:	3404      	adds	r4, #4
 8007824:	e79f      	b.n	8007766 <__multiply+0x76>
 8007826:	3e01      	subs	r6, #1
 8007828:	e7a1      	b.n	800776e <__multiply+0x7e>
 800782a:	bf00      	nop
 800782c:	0800a47e 	.word	0x0800a47e
 8007830:	0800a48f 	.word	0x0800a48f

08007834 <__pow5mult>:
 8007834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007838:	4615      	mov	r5, r2
 800783a:	f012 0203 	ands.w	r2, r2, #3
 800783e:	4607      	mov	r7, r0
 8007840:	460e      	mov	r6, r1
 8007842:	d007      	beq.n	8007854 <__pow5mult+0x20>
 8007844:	4c25      	ldr	r4, [pc, #148]	@ (80078dc <__pow5mult+0xa8>)
 8007846:	3a01      	subs	r2, #1
 8007848:	2300      	movs	r3, #0
 800784a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800784e:	f7ff fea7 	bl	80075a0 <__multadd>
 8007852:	4606      	mov	r6, r0
 8007854:	10ad      	asrs	r5, r5, #2
 8007856:	d03d      	beq.n	80078d4 <__pow5mult+0xa0>
 8007858:	69fc      	ldr	r4, [r7, #28]
 800785a:	b97c      	cbnz	r4, 800787c <__pow5mult+0x48>
 800785c:	2010      	movs	r0, #16
 800785e:	f7ff fd87 	bl	8007370 <malloc>
 8007862:	4602      	mov	r2, r0
 8007864:	61f8      	str	r0, [r7, #28]
 8007866:	b928      	cbnz	r0, 8007874 <__pow5mult+0x40>
 8007868:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800786c:	4b1c      	ldr	r3, [pc, #112]	@ (80078e0 <__pow5mult+0xac>)
 800786e:	481d      	ldr	r0, [pc, #116]	@ (80078e4 <__pow5mult+0xb0>)
 8007870:	f000 fbbe 	bl	8007ff0 <__assert_func>
 8007874:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007878:	6004      	str	r4, [r0, #0]
 800787a:	60c4      	str	r4, [r0, #12]
 800787c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007880:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007884:	b94c      	cbnz	r4, 800789a <__pow5mult+0x66>
 8007886:	f240 2171 	movw	r1, #625	@ 0x271
 800788a:	4638      	mov	r0, r7
 800788c:	f7ff ff1a 	bl	80076c4 <__i2b>
 8007890:	2300      	movs	r3, #0
 8007892:	4604      	mov	r4, r0
 8007894:	f8c8 0008 	str.w	r0, [r8, #8]
 8007898:	6003      	str	r3, [r0, #0]
 800789a:	f04f 0900 	mov.w	r9, #0
 800789e:	07eb      	lsls	r3, r5, #31
 80078a0:	d50a      	bpl.n	80078b8 <__pow5mult+0x84>
 80078a2:	4631      	mov	r1, r6
 80078a4:	4622      	mov	r2, r4
 80078a6:	4638      	mov	r0, r7
 80078a8:	f7ff ff22 	bl	80076f0 <__multiply>
 80078ac:	4680      	mov	r8, r0
 80078ae:	4631      	mov	r1, r6
 80078b0:	4638      	mov	r0, r7
 80078b2:	f7ff fe53 	bl	800755c <_Bfree>
 80078b6:	4646      	mov	r6, r8
 80078b8:	106d      	asrs	r5, r5, #1
 80078ba:	d00b      	beq.n	80078d4 <__pow5mult+0xa0>
 80078bc:	6820      	ldr	r0, [r4, #0]
 80078be:	b938      	cbnz	r0, 80078d0 <__pow5mult+0x9c>
 80078c0:	4622      	mov	r2, r4
 80078c2:	4621      	mov	r1, r4
 80078c4:	4638      	mov	r0, r7
 80078c6:	f7ff ff13 	bl	80076f0 <__multiply>
 80078ca:	6020      	str	r0, [r4, #0]
 80078cc:	f8c0 9000 	str.w	r9, [r0]
 80078d0:	4604      	mov	r4, r0
 80078d2:	e7e4      	b.n	800789e <__pow5mult+0x6a>
 80078d4:	4630      	mov	r0, r6
 80078d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078da:	bf00      	nop
 80078dc:	0800a540 	.word	0x0800a540
 80078e0:	0800a40f 	.word	0x0800a40f
 80078e4:	0800a48f 	.word	0x0800a48f

080078e8 <__lshift>:
 80078e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078ec:	460c      	mov	r4, r1
 80078ee:	4607      	mov	r7, r0
 80078f0:	4691      	mov	r9, r2
 80078f2:	6923      	ldr	r3, [r4, #16]
 80078f4:	6849      	ldr	r1, [r1, #4]
 80078f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80078fa:	68a3      	ldr	r3, [r4, #8]
 80078fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007900:	f108 0601 	add.w	r6, r8, #1
 8007904:	42b3      	cmp	r3, r6
 8007906:	db0b      	blt.n	8007920 <__lshift+0x38>
 8007908:	4638      	mov	r0, r7
 800790a:	f7ff fde7 	bl	80074dc <_Balloc>
 800790e:	4605      	mov	r5, r0
 8007910:	b948      	cbnz	r0, 8007926 <__lshift+0x3e>
 8007912:	4602      	mov	r2, r0
 8007914:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007918:	4b27      	ldr	r3, [pc, #156]	@ (80079b8 <__lshift+0xd0>)
 800791a:	4828      	ldr	r0, [pc, #160]	@ (80079bc <__lshift+0xd4>)
 800791c:	f000 fb68 	bl	8007ff0 <__assert_func>
 8007920:	3101      	adds	r1, #1
 8007922:	005b      	lsls	r3, r3, #1
 8007924:	e7ee      	b.n	8007904 <__lshift+0x1c>
 8007926:	2300      	movs	r3, #0
 8007928:	f100 0114 	add.w	r1, r0, #20
 800792c:	f100 0210 	add.w	r2, r0, #16
 8007930:	4618      	mov	r0, r3
 8007932:	4553      	cmp	r3, sl
 8007934:	db33      	blt.n	800799e <__lshift+0xb6>
 8007936:	6920      	ldr	r0, [r4, #16]
 8007938:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800793c:	f104 0314 	add.w	r3, r4, #20
 8007940:	f019 091f 	ands.w	r9, r9, #31
 8007944:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007948:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800794c:	d02b      	beq.n	80079a6 <__lshift+0xbe>
 800794e:	468a      	mov	sl, r1
 8007950:	2200      	movs	r2, #0
 8007952:	f1c9 0e20 	rsb	lr, r9, #32
 8007956:	6818      	ldr	r0, [r3, #0]
 8007958:	fa00 f009 	lsl.w	r0, r0, r9
 800795c:	4310      	orrs	r0, r2
 800795e:	f84a 0b04 	str.w	r0, [sl], #4
 8007962:	f853 2b04 	ldr.w	r2, [r3], #4
 8007966:	459c      	cmp	ip, r3
 8007968:	fa22 f20e 	lsr.w	r2, r2, lr
 800796c:	d8f3      	bhi.n	8007956 <__lshift+0x6e>
 800796e:	ebac 0304 	sub.w	r3, ip, r4
 8007972:	3b15      	subs	r3, #21
 8007974:	f023 0303 	bic.w	r3, r3, #3
 8007978:	3304      	adds	r3, #4
 800797a:	f104 0015 	add.w	r0, r4, #21
 800797e:	4560      	cmp	r0, ip
 8007980:	bf88      	it	hi
 8007982:	2304      	movhi	r3, #4
 8007984:	50ca      	str	r2, [r1, r3]
 8007986:	b10a      	cbz	r2, 800798c <__lshift+0xa4>
 8007988:	f108 0602 	add.w	r6, r8, #2
 800798c:	3e01      	subs	r6, #1
 800798e:	4638      	mov	r0, r7
 8007990:	4621      	mov	r1, r4
 8007992:	612e      	str	r6, [r5, #16]
 8007994:	f7ff fde2 	bl	800755c <_Bfree>
 8007998:	4628      	mov	r0, r5
 800799a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800799e:	f842 0f04 	str.w	r0, [r2, #4]!
 80079a2:	3301      	adds	r3, #1
 80079a4:	e7c5      	b.n	8007932 <__lshift+0x4a>
 80079a6:	3904      	subs	r1, #4
 80079a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80079ac:	459c      	cmp	ip, r3
 80079ae:	f841 2f04 	str.w	r2, [r1, #4]!
 80079b2:	d8f9      	bhi.n	80079a8 <__lshift+0xc0>
 80079b4:	e7ea      	b.n	800798c <__lshift+0xa4>
 80079b6:	bf00      	nop
 80079b8:	0800a47e 	.word	0x0800a47e
 80079bc:	0800a48f 	.word	0x0800a48f

080079c0 <__mcmp>:
 80079c0:	4603      	mov	r3, r0
 80079c2:	690a      	ldr	r2, [r1, #16]
 80079c4:	6900      	ldr	r0, [r0, #16]
 80079c6:	b530      	push	{r4, r5, lr}
 80079c8:	1a80      	subs	r0, r0, r2
 80079ca:	d10e      	bne.n	80079ea <__mcmp+0x2a>
 80079cc:	3314      	adds	r3, #20
 80079ce:	3114      	adds	r1, #20
 80079d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80079d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80079d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80079dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80079e0:	4295      	cmp	r5, r2
 80079e2:	d003      	beq.n	80079ec <__mcmp+0x2c>
 80079e4:	d205      	bcs.n	80079f2 <__mcmp+0x32>
 80079e6:	f04f 30ff 	mov.w	r0, #4294967295
 80079ea:	bd30      	pop	{r4, r5, pc}
 80079ec:	42a3      	cmp	r3, r4
 80079ee:	d3f3      	bcc.n	80079d8 <__mcmp+0x18>
 80079f0:	e7fb      	b.n	80079ea <__mcmp+0x2a>
 80079f2:	2001      	movs	r0, #1
 80079f4:	e7f9      	b.n	80079ea <__mcmp+0x2a>
	...

080079f8 <__mdiff>:
 80079f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079fc:	4689      	mov	r9, r1
 80079fe:	4606      	mov	r6, r0
 8007a00:	4611      	mov	r1, r2
 8007a02:	4648      	mov	r0, r9
 8007a04:	4614      	mov	r4, r2
 8007a06:	f7ff ffdb 	bl	80079c0 <__mcmp>
 8007a0a:	1e05      	subs	r5, r0, #0
 8007a0c:	d112      	bne.n	8007a34 <__mdiff+0x3c>
 8007a0e:	4629      	mov	r1, r5
 8007a10:	4630      	mov	r0, r6
 8007a12:	f7ff fd63 	bl	80074dc <_Balloc>
 8007a16:	4602      	mov	r2, r0
 8007a18:	b928      	cbnz	r0, 8007a26 <__mdiff+0x2e>
 8007a1a:	f240 2137 	movw	r1, #567	@ 0x237
 8007a1e:	4b3e      	ldr	r3, [pc, #248]	@ (8007b18 <__mdiff+0x120>)
 8007a20:	483e      	ldr	r0, [pc, #248]	@ (8007b1c <__mdiff+0x124>)
 8007a22:	f000 fae5 	bl	8007ff0 <__assert_func>
 8007a26:	2301      	movs	r3, #1
 8007a28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	b003      	add	sp, #12
 8007a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a34:	bfbc      	itt	lt
 8007a36:	464b      	movlt	r3, r9
 8007a38:	46a1      	movlt	r9, r4
 8007a3a:	4630      	mov	r0, r6
 8007a3c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007a40:	bfba      	itte	lt
 8007a42:	461c      	movlt	r4, r3
 8007a44:	2501      	movlt	r5, #1
 8007a46:	2500      	movge	r5, #0
 8007a48:	f7ff fd48 	bl	80074dc <_Balloc>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	b918      	cbnz	r0, 8007a58 <__mdiff+0x60>
 8007a50:	f240 2145 	movw	r1, #581	@ 0x245
 8007a54:	4b30      	ldr	r3, [pc, #192]	@ (8007b18 <__mdiff+0x120>)
 8007a56:	e7e3      	b.n	8007a20 <__mdiff+0x28>
 8007a58:	f100 0b14 	add.w	fp, r0, #20
 8007a5c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007a60:	f109 0310 	add.w	r3, r9, #16
 8007a64:	60c5      	str	r5, [r0, #12]
 8007a66:	f04f 0c00 	mov.w	ip, #0
 8007a6a:	f109 0514 	add.w	r5, r9, #20
 8007a6e:	46d9      	mov	r9, fp
 8007a70:	6926      	ldr	r6, [r4, #16]
 8007a72:	f104 0e14 	add.w	lr, r4, #20
 8007a76:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007a7a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007a7e:	9301      	str	r3, [sp, #4]
 8007a80:	9b01      	ldr	r3, [sp, #4]
 8007a82:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007a86:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007a8a:	b281      	uxth	r1, r0
 8007a8c:	9301      	str	r3, [sp, #4]
 8007a8e:	fa1f f38a 	uxth.w	r3, sl
 8007a92:	1a5b      	subs	r3, r3, r1
 8007a94:	0c00      	lsrs	r0, r0, #16
 8007a96:	4463      	add	r3, ip
 8007a98:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007a9c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007aa6:	4576      	cmp	r6, lr
 8007aa8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007aac:	f849 3b04 	str.w	r3, [r9], #4
 8007ab0:	d8e6      	bhi.n	8007a80 <__mdiff+0x88>
 8007ab2:	1b33      	subs	r3, r6, r4
 8007ab4:	3b15      	subs	r3, #21
 8007ab6:	f023 0303 	bic.w	r3, r3, #3
 8007aba:	3415      	adds	r4, #21
 8007abc:	3304      	adds	r3, #4
 8007abe:	42a6      	cmp	r6, r4
 8007ac0:	bf38      	it	cc
 8007ac2:	2304      	movcc	r3, #4
 8007ac4:	441d      	add	r5, r3
 8007ac6:	445b      	add	r3, fp
 8007ac8:	461e      	mov	r6, r3
 8007aca:	462c      	mov	r4, r5
 8007acc:	4544      	cmp	r4, r8
 8007ace:	d30e      	bcc.n	8007aee <__mdiff+0xf6>
 8007ad0:	f108 0103 	add.w	r1, r8, #3
 8007ad4:	1b49      	subs	r1, r1, r5
 8007ad6:	f021 0103 	bic.w	r1, r1, #3
 8007ada:	3d03      	subs	r5, #3
 8007adc:	45a8      	cmp	r8, r5
 8007ade:	bf38      	it	cc
 8007ae0:	2100      	movcc	r1, #0
 8007ae2:	440b      	add	r3, r1
 8007ae4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ae8:	b199      	cbz	r1, 8007b12 <__mdiff+0x11a>
 8007aea:	6117      	str	r7, [r2, #16]
 8007aec:	e79e      	b.n	8007a2c <__mdiff+0x34>
 8007aee:	46e6      	mov	lr, ip
 8007af0:	f854 1b04 	ldr.w	r1, [r4], #4
 8007af4:	fa1f fc81 	uxth.w	ip, r1
 8007af8:	44f4      	add	ip, lr
 8007afa:	0c08      	lsrs	r0, r1, #16
 8007afc:	4471      	add	r1, lr
 8007afe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007b02:	b289      	uxth	r1, r1
 8007b04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007b08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007b0c:	f846 1b04 	str.w	r1, [r6], #4
 8007b10:	e7dc      	b.n	8007acc <__mdiff+0xd4>
 8007b12:	3f01      	subs	r7, #1
 8007b14:	e7e6      	b.n	8007ae4 <__mdiff+0xec>
 8007b16:	bf00      	nop
 8007b18:	0800a47e 	.word	0x0800a47e
 8007b1c:	0800a48f 	.word	0x0800a48f

08007b20 <__d2b>:
 8007b20:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007b24:	2101      	movs	r1, #1
 8007b26:	4690      	mov	r8, r2
 8007b28:	4699      	mov	r9, r3
 8007b2a:	9e08      	ldr	r6, [sp, #32]
 8007b2c:	f7ff fcd6 	bl	80074dc <_Balloc>
 8007b30:	4604      	mov	r4, r0
 8007b32:	b930      	cbnz	r0, 8007b42 <__d2b+0x22>
 8007b34:	4602      	mov	r2, r0
 8007b36:	f240 310f 	movw	r1, #783	@ 0x30f
 8007b3a:	4b23      	ldr	r3, [pc, #140]	@ (8007bc8 <__d2b+0xa8>)
 8007b3c:	4823      	ldr	r0, [pc, #140]	@ (8007bcc <__d2b+0xac>)
 8007b3e:	f000 fa57 	bl	8007ff0 <__assert_func>
 8007b42:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007b46:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b4a:	b10d      	cbz	r5, 8007b50 <__d2b+0x30>
 8007b4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b50:	9301      	str	r3, [sp, #4]
 8007b52:	f1b8 0300 	subs.w	r3, r8, #0
 8007b56:	d024      	beq.n	8007ba2 <__d2b+0x82>
 8007b58:	4668      	mov	r0, sp
 8007b5a:	9300      	str	r3, [sp, #0]
 8007b5c:	f7ff fd85 	bl	800766a <__lo0bits>
 8007b60:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007b64:	b1d8      	cbz	r0, 8007b9e <__d2b+0x7e>
 8007b66:	f1c0 0320 	rsb	r3, r0, #32
 8007b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b6e:	430b      	orrs	r3, r1
 8007b70:	40c2      	lsrs	r2, r0
 8007b72:	6163      	str	r3, [r4, #20]
 8007b74:	9201      	str	r2, [sp, #4]
 8007b76:	9b01      	ldr	r3, [sp, #4]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	bf0c      	ite	eq
 8007b7c:	2201      	moveq	r2, #1
 8007b7e:	2202      	movne	r2, #2
 8007b80:	61a3      	str	r3, [r4, #24]
 8007b82:	6122      	str	r2, [r4, #16]
 8007b84:	b1ad      	cbz	r5, 8007bb2 <__d2b+0x92>
 8007b86:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007b8a:	4405      	add	r5, r0
 8007b8c:	6035      	str	r5, [r6, #0]
 8007b8e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007b92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b94:	6018      	str	r0, [r3, #0]
 8007b96:	4620      	mov	r0, r4
 8007b98:	b002      	add	sp, #8
 8007b9a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007b9e:	6161      	str	r1, [r4, #20]
 8007ba0:	e7e9      	b.n	8007b76 <__d2b+0x56>
 8007ba2:	a801      	add	r0, sp, #4
 8007ba4:	f7ff fd61 	bl	800766a <__lo0bits>
 8007ba8:	9b01      	ldr	r3, [sp, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	6163      	str	r3, [r4, #20]
 8007bae:	3020      	adds	r0, #32
 8007bb0:	e7e7      	b.n	8007b82 <__d2b+0x62>
 8007bb2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007bb6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007bba:	6030      	str	r0, [r6, #0]
 8007bbc:	6918      	ldr	r0, [r3, #16]
 8007bbe:	f7ff fd35 	bl	800762c <__hi0bits>
 8007bc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007bc6:	e7e4      	b.n	8007b92 <__d2b+0x72>
 8007bc8:	0800a47e 	.word	0x0800a47e
 8007bcc:	0800a48f 	.word	0x0800a48f

08007bd0 <__ssputs_r>:
 8007bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bd4:	461f      	mov	r7, r3
 8007bd6:	688e      	ldr	r6, [r1, #8]
 8007bd8:	4682      	mov	sl, r0
 8007bda:	42be      	cmp	r6, r7
 8007bdc:	460c      	mov	r4, r1
 8007bde:	4690      	mov	r8, r2
 8007be0:	680b      	ldr	r3, [r1, #0]
 8007be2:	d82d      	bhi.n	8007c40 <__ssputs_r+0x70>
 8007be4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007be8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007bec:	d026      	beq.n	8007c3c <__ssputs_r+0x6c>
 8007bee:	6965      	ldr	r5, [r4, #20]
 8007bf0:	6909      	ldr	r1, [r1, #16]
 8007bf2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007bf6:	eba3 0901 	sub.w	r9, r3, r1
 8007bfa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007bfe:	1c7b      	adds	r3, r7, #1
 8007c00:	444b      	add	r3, r9
 8007c02:	106d      	asrs	r5, r5, #1
 8007c04:	429d      	cmp	r5, r3
 8007c06:	bf38      	it	cc
 8007c08:	461d      	movcc	r5, r3
 8007c0a:	0553      	lsls	r3, r2, #21
 8007c0c:	d527      	bpl.n	8007c5e <__ssputs_r+0x8e>
 8007c0e:	4629      	mov	r1, r5
 8007c10:	f7ff fbd8 	bl	80073c4 <_malloc_r>
 8007c14:	4606      	mov	r6, r0
 8007c16:	b360      	cbz	r0, 8007c72 <__ssputs_r+0xa2>
 8007c18:	464a      	mov	r2, r9
 8007c1a:	6921      	ldr	r1, [r4, #16]
 8007c1c:	f7fe fcf5 	bl	800660a <memcpy>
 8007c20:	89a3      	ldrh	r3, [r4, #12]
 8007c22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007c26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c2a:	81a3      	strh	r3, [r4, #12]
 8007c2c:	6126      	str	r6, [r4, #16]
 8007c2e:	444e      	add	r6, r9
 8007c30:	6026      	str	r6, [r4, #0]
 8007c32:	463e      	mov	r6, r7
 8007c34:	6165      	str	r5, [r4, #20]
 8007c36:	eba5 0509 	sub.w	r5, r5, r9
 8007c3a:	60a5      	str	r5, [r4, #8]
 8007c3c:	42be      	cmp	r6, r7
 8007c3e:	d900      	bls.n	8007c42 <__ssputs_r+0x72>
 8007c40:	463e      	mov	r6, r7
 8007c42:	4632      	mov	r2, r6
 8007c44:	4641      	mov	r1, r8
 8007c46:	6820      	ldr	r0, [r4, #0]
 8007c48:	f7fe fc37 	bl	80064ba <memmove>
 8007c4c:	2000      	movs	r0, #0
 8007c4e:	68a3      	ldr	r3, [r4, #8]
 8007c50:	1b9b      	subs	r3, r3, r6
 8007c52:	60a3      	str	r3, [r4, #8]
 8007c54:	6823      	ldr	r3, [r4, #0]
 8007c56:	4433      	add	r3, r6
 8007c58:	6023      	str	r3, [r4, #0]
 8007c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c5e:	462a      	mov	r2, r5
 8007c60:	f000 fa0a 	bl	8008078 <_realloc_r>
 8007c64:	4606      	mov	r6, r0
 8007c66:	2800      	cmp	r0, #0
 8007c68:	d1e0      	bne.n	8007c2c <__ssputs_r+0x5c>
 8007c6a:	4650      	mov	r0, sl
 8007c6c:	6921      	ldr	r1, [r4, #16]
 8007c6e:	f7ff fb37 	bl	80072e0 <_free_r>
 8007c72:	230c      	movs	r3, #12
 8007c74:	f8ca 3000 	str.w	r3, [sl]
 8007c78:	89a3      	ldrh	r3, [r4, #12]
 8007c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c82:	81a3      	strh	r3, [r4, #12]
 8007c84:	e7e9      	b.n	8007c5a <__ssputs_r+0x8a>
	...

08007c88 <_svfiprintf_r>:
 8007c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c8c:	4698      	mov	r8, r3
 8007c8e:	898b      	ldrh	r3, [r1, #12]
 8007c90:	4607      	mov	r7, r0
 8007c92:	061b      	lsls	r3, r3, #24
 8007c94:	460d      	mov	r5, r1
 8007c96:	4614      	mov	r4, r2
 8007c98:	b09d      	sub	sp, #116	@ 0x74
 8007c9a:	d510      	bpl.n	8007cbe <_svfiprintf_r+0x36>
 8007c9c:	690b      	ldr	r3, [r1, #16]
 8007c9e:	b973      	cbnz	r3, 8007cbe <_svfiprintf_r+0x36>
 8007ca0:	2140      	movs	r1, #64	@ 0x40
 8007ca2:	f7ff fb8f 	bl	80073c4 <_malloc_r>
 8007ca6:	6028      	str	r0, [r5, #0]
 8007ca8:	6128      	str	r0, [r5, #16]
 8007caa:	b930      	cbnz	r0, 8007cba <_svfiprintf_r+0x32>
 8007cac:	230c      	movs	r3, #12
 8007cae:	603b      	str	r3, [r7, #0]
 8007cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb4:	b01d      	add	sp, #116	@ 0x74
 8007cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cba:	2340      	movs	r3, #64	@ 0x40
 8007cbc:	616b      	str	r3, [r5, #20]
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cc2:	2320      	movs	r3, #32
 8007cc4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007cc8:	2330      	movs	r3, #48	@ 0x30
 8007cca:	f04f 0901 	mov.w	r9, #1
 8007cce:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cd2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007e6c <_svfiprintf_r+0x1e4>
 8007cd6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007cda:	4623      	mov	r3, r4
 8007cdc:	469a      	mov	sl, r3
 8007cde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ce2:	b10a      	cbz	r2, 8007ce8 <_svfiprintf_r+0x60>
 8007ce4:	2a25      	cmp	r2, #37	@ 0x25
 8007ce6:	d1f9      	bne.n	8007cdc <_svfiprintf_r+0x54>
 8007ce8:	ebba 0b04 	subs.w	fp, sl, r4
 8007cec:	d00b      	beq.n	8007d06 <_svfiprintf_r+0x7e>
 8007cee:	465b      	mov	r3, fp
 8007cf0:	4622      	mov	r2, r4
 8007cf2:	4629      	mov	r1, r5
 8007cf4:	4638      	mov	r0, r7
 8007cf6:	f7ff ff6b 	bl	8007bd0 <__ssputs_r>
 8007cfa:	3001      	adds	r0, #1
 8007cfc:	f000 80a7 	beq.w	8007e4e <_svfiprintf_r+0x1c6>
 8007d00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d02:	445a      	add	r2, fp
 8007d04:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d06:	f89a 3000 	ldrb.w	r3, [sl]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	f000 809f 	beq.w	8007e4e <_svfiprintf_r+0x1c6>
 8007d10:	2300      	movs	r3, #0
 8007d12:	f04f 32ff 	mov.w	r2, #4294967295
 8007d16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d1a:	f10a 0a01 	add.w	sl, sl, #1
 8007d1e:	9304      	str	r3, [sp, #16]
 8007d20:	9307      	str	r3, [sp, #28]
 8007d22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d26:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d28:	4654      	mov	r4, sl
 8007d2a:	2205      	movs	r2, #5
 8007d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d30:	484e      	ldr	r0, [pc, #312]	@ (8007e6c <_svfiprintf_r+0x1e4>)
 8007d32:	f7fe fc5c 	bl	80065ee <memchr>
 8007d36:	9a04      	ldr	r2, [sp, #16]
 8007d38:	b9d8      	cbnz	r0, 8007d72 <_svfiprintf_r+0xea>
 8007d3a:	06d0      	lsls	r0, r2, #27
 8007d3c:	bf44      	itt	mi
 8007d3e:	2320      	movmi	r3, #32
 8007d40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d44:	0711      	lsls	r1, r2, #28
 8007d46:	bf44      	itt	mi
 8007d48:	232b      	movmi	r3, #43	@ 0x2b
 8007d4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d4e:	f89a 3000 	ldrb.w	r3, [sl]
 8007d52:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d54:	d015      	beq.n	8007d82 <_svfiprintf_r+0xfa>
 8007d56:	4654      	mov	r4, sl
 8007d58:	2000      	movs	r0, #0
 8007d5a:	f04f 0c0a 	mov.w	ip, #10
 8007d5e:	9a07      	ldr	r2, [sp, #28]
 8007d60:	4621      	mov	r1, r4
 8007d62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d66:	3b30      	subs	r3, #48	@ 0x30
 8007d68:	2b09      	cmp	r3, #9
 8007d6a:	d94b      	bls.n	8007e04 <_svfiprintf_r+0x17c>
 8007d6c:	b1b0      	cbz	r0, 8007d9c <_svfiprintf_r+0x114>
 8007d6e:	9207      	str	r2, [sp, #28]
 8007d70:	e014      	b.n	8007d9c <_svfiprintf_r+0x114>
 8007d72:	eba0 0308 	sub.w	r3, r0, r8
 8007d76:	fa09 f303 	lsl.w	r3, r9, r3
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	46a2      	mov	sl, r4
 8007d7e:	9304      	str	r3, [sp, #16]
 8007d80:	e7d2      	b.n	8007d28 <_svfiprintf_r+0xa0>
 8007d82:	9b03      	ldr	r3, [sp, #12]
 8007d84:	1d19      	adds	r1, r3, #4
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	9103      	str	r1, [sp, #12]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	bfbb      	ittet	lt
 8007d8e:	425b      	neglt	r3, r3
 8007d90:	f042 0202 	orrlt.w	r2, r2, #2
 8007d94:	9307      	strge	r3, [sp, #28]
 8007d96:	9307      	strlt	r3, [sp, #28]
 8007d98:	bfb8      	it	lt
 8007d9a:	9204      	strlt	r2, [sp, #16]
 8007d9c:	7823      	ldrb	r3, [r4, #0]
 8007d9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007da0:	d10a      	bne.n	8007db8 <_svfiprintf_r+0x130>
 8007da2:	7863      	ldrb	r3, [r4, #1]
 8007da4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007da6:	d132      	bne.n	8007e0e <_svfiprintf_r+0x186>
 8007da8:	9b03      	ldr	r3, [sp, #12]
 8007daa:	3402      	adds	r4, #2
 8007dac:	1d1a      	adds	r2, r3, #4
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	9203      	str	r2, [sp, #12]
 8007db2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007db6:	9305      	str	r3, [sp, #20]
 8007db8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007e70 <_svfiprintf_r+0x1e8>
 8007dbc:	2203      	movs	r2, #3
 8007dbe:	4650      	mov	r0, sl
 8007dc0:	7821      	ldrb	r1, [r4, #0]
 8007dc2:	f7fe fc14 	bl	80065ee <memchr>
 8007dc6:	b138      	cbz	r0, 8007dd8 <_svfiprintf_r+0x150>
 8007dc8:	2240      	movs	r2, #64	@ 0x40
 8007dca:	9b04      	ldr	r3, [sp, #16]
 8007dcc:	eba0 000a 	sub.w	r0, r0, sl
 8007dd0:	4082      	lsls	r2, r0
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	3401      	adds	r4, #1
 8007dd6:	9304      	str	r3, [sp, #16]
 8007dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ddc:	2206      	movs	r2, #6
 8007dde:	4825      	ldr	r0, [pc, #148]	@ (8007e74 <_svfiprintf_r+0x1ec>)
 8007de0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007de4:	f7fe fc03 	bl	80065ee <memchr>
 8007de8:	2800      	cmp	r0, #0
 8007dea:	d036      	beq.n	8007e5a <_svfiprintf_r+0x1d2>
 8007dec:	4b22      	ldr	r3, [pc, #136]	@ (8007e78 <_svfiprintf_r+0x1f0>)
 8007dee:	bb1b      	cbnz	r3, 8007e38 <_svfiprintf_r+0x1b0>
 8007df0:	9b03      	ldr	r3, [sp, #12]
 8007df2:	3307      	adds	r3, #7
 8007df4:	f023 0307 	bic.w	r3, r3, #7
 8007df8:	3308      	adds	r3, #8
 8007dfa:	9303      	str	r3, [sp, #12]
 8007dfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dfe:	4433      	add	r3, r6
 8007e00:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e02:	e76a      	b.n	8007cda <_svfiprintf_r+0x52>
 8007e04:	460c      	mov	r4, r1
 8007e06:	2001      	movs	r0, #1
 8007e08:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e0c:	e7a8      	b.n	8007d60 <_svfiprintf_r+0xd8>
 8007e0e:	2300      	movs	r3, #0
 8007e10:	f04f 0c0a 	mov.w	ip, #10
 8007e14:	4619      	mov	r1, r3
 8007e16:	3401      	adds	r4, #1
 8007e18:	9305      	str	r3, [sp, #20]
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e20:	3a30      	subs	r2, #48	@ 0x30
 8007e22:	2a09      	cmp	r2, #9
 8007e24:	d903      	bls.n	8007e2e <_svfiprintf_r+0x1a6>
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d0c6      	beq.n	8007db8 <_svfiprintf_r+0x130>
 8007e2a:	9105      	str	r1, [sp, #20]
 8007e2c:	e7c4      	b.n	8007db8 <_svfiprintf_r+0x130>
 8007e2e:	4604      	mov	r4, r0
 8007e30:	2301      	movs	r3, #1
 8007e32:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e36:	e7f0      	b.n	8007e1a <_svfiprintf_r+0x192>
 8007e38:	ab03      	add	r3, sp, #12
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	462a      	mov	r2, r5
 8007e3e:	4638      	mov	r0, r7
 8007e40:	4b0e      	ldr	r3, [pc, #56]	@ (8007e7c <_svfiprintf_r+0x1f4>)
 8007e42:	a904      	add	r1, sp, #16
 8007e44:	f7fd fe56 	bl	8005af4 <_printf_float>
 8007e48:	1c42      	adds	r2, r0, #1
 8007e4a:	4606      	mov	r6, r0
 8007e4c:	d1d6      	bne.n	8007dfc <_svfiprintf_r+0x174>
 8007e4e:	89ab      	ldrh	r3, [r5, #12]
 8007e50:	065b      	lsls	r3, r3, #25
 8007e52:	f53f af2d 	bmi.w	8007cb0 <_svfiprintf_r+0x28>
 8007e56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e58:	e72c      	b.n	8007cb4 <_svfiprintf_r+0x2c>
 8007e5a:	ab03      	add	r3, sp, #12
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	462a      	mov	r2, r5
 8007e60:	4638      	mov	r0, r7
 8007e62:	4b06      	ldr	r3, [pc, #24]	@ (8007e7c <_svfiprintf_r+0x1f4>)
 8007e64:	a904      	add	r1, sp, #16
 8007e66:	f7fe f8e3 	bl	8006030 <_printf_i>
 8007e6a:	e7ed      	b.n	8007e48 <_svfiprintf_r+0x1c0>
 8007e6c:	0800a4e8 	.word	0x0800a4e8
 8007e70:	0800a4ee 	.word	0x0800a4ee
 8007e74:	0800a4f2 	.word	0x0800a4f2
 8007e78:	08005af5 	.word	0x08005af5
 8007e7c:	08007bd1 	.word	0x08007bd1

08007e80 <__sflush_r>:
 8007e80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e86:	0716      	lsls	r6, r2, #28
 8007e88:	4605      	mov	r5, r0
 8007e8a:	460c      	mov	r4, r1
 8007e8c:	d454      	bmi.n	8007f38 <__sflush_r+0xb8>
 8007e8e:	684b      	ldr	r3, [r1, #4]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	dc02      	bgt.n	8007e9a <__sflush_r+0x1a>
 8007e94:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	dd48      	ble.n	8007f2c <__sflush_r+0xac>
 8007e9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e9c:	2e00      	cmp	r6, #0
 8007e9e:	d045      	beq.n	8007f2c <__sflush_r+0xac>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ea6:	682f      	ldr	r7, [r5, #0]
 8007ea8:	6a21      	ldr	r1, [r4, #32]
 8007eaa:	602b      	str	r3, [r5, #0]
 8007eac:	d030      	beq.n	8007f10 <__sflush_r+0x90>
 8007eae:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007eb0:	89a3      	ldrh	r3, [r4, #12]
 8007eb2:	0759      	lsls	r1, r3, #29
 8007eb4:	d505      	bpl.n	8007ec2 <__sflush_r+0x42>
 8007eb6:	6863      	ldr	r3, [r4, #4]
 8007eb8:	1ad2      	subs	r2, r2, r3
 8007eba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007ebc:	b10b      	cbz	r3, 8007ec2 <__sflush_r+0x42>
 8007ebe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007ec0:	1ad2      	subs	r2, r2, r3
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ec8:	6a21      	ldr	r1, [r4, #32]
 8007eca:	47b0      	blx	r6
 8007ecc:	1c43      	adds	r3, r0, #1
 8007ece:	89a3      	ldrh	r3, [r4, #12]
 8007ed0:	d106      	bne.n	8007ee0 <__sflush_r+0x60>
 8007ed2:	6829      	ldr	r1, [r5, #0]
 8007ed4:	291d      	cmp	r1, #29
 8007ed6:	d82b      	bhi.n	8007f30 <__sflush_r+0xb0>
 8007ed8:	4a28      	ldr	r2, [pc, #160]	@ (8007f7c <__sflush_r+0xfc>)
 8007eda:	40ca      	lsrs	r2, r1
 8007edc:	07d6      	lsls	r6, r2, #31
 8007ede:	d527      	bpl.n	8007f30 <__sflush_r+0xb0>
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	6062      	str	r2, [r4, #4]
 8007ee4:	6922      	ldr	r2, [r4, #16]
 8007ee6:	04d9      	lsls	r1, r3, #19
 8007ee8:	6022      	str	r2, [r4, #0]
 8007eea:	d504      	bpl.n	8007ef6 <__sflush_r+0x76>
 8007eec:	1c42      	adds	r2, r0, #1
 8007eee:	d101      	bne.n	8007ef4 <__sflush_r+0x74>
 8007ef0:	682b      	ldr	r3, [r5, #0]
 8007ef2:	b903      	cbnz	r3, 8007ef6 <__sflush_r+0x76>
 8007ef4:	6560      	str	r0, [r4, #84]	@ 0x54
 8007ef6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ef8:	602f      	str	r7, [r5, #0]
 8007efa:	b1b9      	cbz	r1, 8007f2c <__sflush_r+0xac>
 8007efc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f00:	4299      	cmp	r1, r3
 8007f02:	d002      	beq.n	8007f0a <__sflush_r+0x8a>
 8007f04:	4628      	mov	r0, r5
 8007f06:	f7ff f9eb 	bl	80072e0 <_free_r>
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f0e:	e00d      	b.n	8007f2c <__sflush_r+0xac>
 8007f10:	2301      	movs	r3, #1
 8007f12:	4628      	mov	r0, r5
 8007f14:	47b0      	blx	r6
 8007f16:	4602      	mov	r2, r0
 8007f18:	1c50      	adds	r0, r2, #1
 8007f1a:	d1c9      	bne.n	8007eb0 <__sflush_r+0x30>
 8007f1c:	682b      	ldr	r3, [r5, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d0c6      	beq.n	8007eb0 <__sflush_r+0x30>
 8007f22:	2b1d      	cmp	r3, #29
 8007f24:	d001      	beq.n	8007f2a <__sflush_r+0xaa>
 8007f26:	2b16      	cmp	r3, #22
 8007f28:	d11d      	bne.n	8007f66 <__sflush_r+0xe6>
 8007f2a:	602f      	str	r7, [r5, #0]
 8007f2c:	2000      	movs	r0, #0
 8007f2e:	e021      	b.n	8007f74 <__sflush_r+0xf4>
 8007f30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f34:	b21b      	sxth	r3, r3
 8007f36:	e01a      	b.n	8007f6e <__sflush_r+0xee>
 8007f38:	690f      	ldr	r7, [r1, #16]
 8007f3a:	2f00      	cmp	r7, #0
 8007f3c:	d0f6      	beq.n	8007f2c <__sflush_r+0xac>
 8007f3e:	0793      	lsls	r3, r2, #30
 8007f40:	bf18      	it	ne
 8007f42:	2300      	movne	r3, #0
 8007f44:	680e      	ldr	r6, [r1, #0]
 8007f46:	bf08      	it	eq
 8007f48:	694b      	ldreq	r3, [r1, #20]
 8007f4a:	1bf6      	subs	r6, r6, r7
 8007f4c:	600f      	str	r7, [r1, #0]
 8007f4e:	608b      	str	r3, [r1, #8]
 8007f50:	2e00      	cmp	r6, #0
 8007f52:	ddeb      	ble.n	8007f2c <__sflush_r+0xac>
 8007f54:	4633      	mov	r3, r6
 8007f56:	463a      	mov	r2, r7
 8007f58:	4628      	mov	r0, r5
 8007f5a:	6a21      	ldr	r1, [r4, #32]
 8007f5c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007f60:	47e0      	blx	ip
 8007f62:	2800      	cmp	r0, #0
 8007f64:	dc07      	bgt.n	8007f76 <__sflush_r+0xf6>
 8007f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f72:	81a3      	strh	r3, [r4, #12]
 8007f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f76:	4407      	add	r7, r0
 8007f78:	1a36      	subs	r6, r6, r0
 8007f7a:	e7e9      	b.n	8007f50 <__sflush_r+0xd0>
 8007f7c:	20400001 	.word	0x20400001

08007f80 <_fflush_r>:
 8007f80:	b538      	push	{r3, r4, r5, lr}
 8007f82:	690b      	ldr	r3, [r1, #16]
 8007f84:	4605      	mov	r5, r0
 8007f86:	460c      	mov	r4, r1
 8007f88:	b913      	cbnz	r3, 8007f90 <_fflush_r+0x10>
 8007f8a:	2500      	movs	r5, #0
 8007f8c:	4628      	mov	r0, r5
 8007f8e:	bd38      	pop	{r3, r4, r5, pc}
 8007f90:	b118      	cbz	r0, 8007f9a <_fflush_r+0x1a>
 8007f92:	6a03      	ldr	r3, [r0, #32]
 8007f94:	b90b      	cbnz	r3, 8007f9a <_fflush_r+0x1a>
 8007f96:	f7fe f9f5 	bl	8006384 <__sinit>
 8007f9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d0f3      	beq.n	8007f8a <_fflush_r+0xa>
 8007fa2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007fa4:	07d0      	lsls	r0, r2, #31
 8007fa6:	d404      	bmi.n	8007fb2 <_fflush_r+0x32>
 8007fa8:	0599      	lsls	r1, r3, #22
 8007faa:	d402      	bmi.n	8007fb2 <_fflush_r+0x32>
 8007fac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fae:	f7fe fb1c 	bl	80065ea <__retarget_lock_acquire_recursive>
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	4621      	mov	r1, r4
 8007fb6:	f7ff ff63 	bl	8007e80 <__sflush_r>
 8007fba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007fbc:	4605      	mov	r5, r0
 8007fbe:	07da      	lsls	r2, r3, #31
 8007fc0:	d4e4      	bmi.n	8007f8c <_fflush_r+0xc>
 8007fc2:	89a3      	ldrh	r3, [r4, #12]
 8007fc4:	059b      	lsls	r3, r3, #22
 8007fc6:	d4e1      	bmi.n	8007f8c <_fflush_r+0xc>
 8007fc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fca:	f7fe fb0f 	bl	80065ec <__retarget_lock_release_recursive>
 8007fce:	e7dd      	b.n	8007f8c <_fflush_r+0xc>

08007fd0 <_sbrk_r>:
 8007fd0:	b538      	push	{r3, r4, r5, lr}
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	4d05      	ldr	r5, [pc, #20]	@ (8007fec <_sbrk_r+0x1c>)
 8007fd6:	4604      	mov	r4, r0
 8007fd8:	4608      	mov	r0, r1
 8007fda:	602b      	str	r3, [r5, #0]
 8007fdc:	f7fa f998 	bl	8002310 <_sbrk>
 8007fe0:	1c43      	adds	r3, r0, #1
 8007fe2:	d102      	bne.n	8007fea <_sbrk_r+0x1a>
 8007fe4:	682b      	ldr	r3, [r5, #0]
 8007fe6:	b103      	cbz	r3, 8007fea <_sbrk_r+0x1a>
 8007fe8:	6023      	str	r3, [r4, #0]
 8007fea:	bd38      	pop	{r3, r4, r5, pc}
 8007fec:	200008c4 	.word	0x200008c4

08007ff0 <__assert_func>:
 8007ff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ff2:	4614      	mov	r4, r2
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	4b09      	ldr	r3, [pc, #36]	@ (800801c <__assert_func+0x2c>)
 8007ff8:	4605      	mov	r5, r0
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68d8      	ldr	r0, [r3, #12]
 8007ffe:	b14c      	cbz	r4, 8008014 <__assert_func+0x24>
 8008000:	4b07      	ldr	r3, [pc, #28]	@ (8008020 <__assert_func+0x30>)
 8008002:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008006:	9100      	str	r1, [sp, #0]
 8008008:	462b      	mov	r3, r5
 800800a:	4906      	ldr	r1, [pc, #24]	@ (8008024 <__assert_func+0x34>)
 800800c:	f000 f870 	bl	80080f0 <fiprintf>
 8008010:	f000 f880 	bl	8008114 <abort>
 8008014:	4b04      	ldr	r3, [pc, #16]	@ (8008028 <__assert_func+0x38>)
 8008016:	461c      	mov	r4, r3
 8008018:	e7f3      	b.n	8008002 <__assert_func+0x12>
 800801a:	bf00      	nop
 800801c:	20000018 	.word	0x20000018
 8008020:	0800a503 	.word	0x0800a503
 8008024:	0800a510 	.word	0x0800a510
 8008028:	0800a53e 	.word	0x0800a53e

0800802c <_calloc_r>:
 800802c:	b570      	push	{r4, r5, r6, lr}
 800802e:	fba1 5402 	umull	r5, r4, r1, r2
 8008032:	b934      	cbnz	r4, 8008042 <_calloc_r+0x16>
 8008034:	4629      	mov	r1, r5
 8008036:	f7ff f9c5 	bl	80073c4 <_malloc_r>
 800803a:	4606      	mov	r6, r0
 800803c:	b928      	cbnz	r0, 800804a <_calloc_r+0x1e>
 800803e:	4630      	mov	r0, r6
 8008040:	bd70      	pop	{r4, r5, r6, pc}
 8008042:	220c      	movs	r2, #12
 8008044:	2600      	movs	r6, #0
 8008046:	6002      	str	r2, [r0, #0]
 8008048:	e7f9      	b.n	800803e <_calloc_r+0x12>
 800804a:	462a      	mov	r2, r5
 800804c:	4621      	mov	r1, r4
 800804e:	f7fe fa4e 	bl	80064ee <memset>
 8008052:	e7f4      	b.n	800803e <_calloc_r+0x12>

08008054 <__ascii_mbtowc>:
 8008054:	b082      	sub	sp, #8
 8008056:	b901      	cbnz	r1, 800805a <__ascii_mbtowc+0x6>
 8008058:	a901      	add	r1, sp, #4
 800805a:	b142      	cbz	r2, 800806e <__ascii_mbtowc+0x1a>
 800805c:	b14b      	cbz	r3, 8008072 <__ascii_mbtowc+0x1e>
 800805e:	7813      	ldrb	r3, [r2, #0]
 8008060:	600b      	str	r3, [r1, #0]
 8008062:	7812      	ldrb	r2, [r2, #0]
 8008064:	1e10      	subs	r0, r2, #0
 8008066:	bf18      	it	ne
 8008068:	2001      	movne	r0, #1
 800806a:	b002      	add	sp, #8
 800806c:	4770      	bx	lr
 800806e:	4610      	mov	r0, r2
 8008070:	e7fb      	b.n	800806a <__ascii_mbtowc+0x16>
 8008072:	f06f 0001 	mvn.w	r0, #1
 8008076:	e7f8      	b.n	800806a <__ascii_mbtowc+0x16>

08008078 <_realloc_r>:
 8008078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800807c:	4607      	mov	r7, r0
 800807e:	4614      	mov	r4, r2
 8008080:	460d      	mov	r5, r1
 8008082:	b921      	cbnz	r1, 800808e <_realloc_r+0x16>
 8008084:	4611      	mov	r1, r2
 8008086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800808a:	f7ff b99b 	b.w	80073c4 <_malloc_r>
 800808e:	b92a      	cbnz	r2, 800809c <_realloc_r+0x24>
 8008090:	f7ff f926 	bl	80072e0 <_free_r>
 8008094:	4625      	mov	r5, r4
 8008096:	4628      	mov	r0, r5
 8008098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800809c:	f000 f841 	bl	8008122 <_malloc_usable_size_r>
 80080a0:	4284      	cmp	r4, r0
 80080a2:	4606      	mov	r6, r0
 80080a4:	d802      	bhi.n	80080ac <_realloc_r+0x34>
 80080a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80080aa:	d8f4      	bhi.n	8008096 <_realloc_r+0x1e>
 80080ac:	4621      	mov	r1, r4
 80080ae:	4638      	mov	r0, r7
 80080b0:	f7ff f988 	bl	80073c4 <_malloc_r>
 80080b4:	4680      	mov	r8, r0
 80080b6:	b908      	cbnz	r0, 80080bc <_realloc_r+0x44>
 80080b8:	4645      	mov	r5, r8
 80080ba:	e7ec      	b.n	8008096 <_realloc_r+0x1e>
 80080bc:	42b4      	cmp	r4, r6
 80080be:	4622      	mov	r2, r4
 80080c0:	4629      	mov	r1, r5
 80080c2:	bf28      	it	cs
 80080c4:	4632      	movcs	r2, r6
 80080c6:	f7fe faa0 	bl	800660a <memcpy>
 80080ca:	4629      	mov	r1, r5
 80080cc:	4638      	mov	r0, r7
 80080ce:	f7ff f907 	bl	80072e0 <_free_r>
 80080d2:	e7f1      	b.n	80080b8 <_realloc_r+0x40>

080080d4 <__ascii_wctomb>:
 80080d4:	4603      	mov	r3, r0
 80080d6:	4608      	mov	r0, r1
 80080d8:	b141      	cbz	r1, 80080ec <__ascii_wctomb+0x18>
 80080da:	2aff      	cmp	r2, #255	@ 0xff
 80080dc:	d904      	bls.n	80080e8 <__ascii_wctomb+0x14>
 80080de:	228a      	movs	r2, #138	@ 0x8a
 80080e0:	f04f 30ff 	mov.w	r0, #4294967295
 80080e4:	601a      	str	r2, [r3, #0]
 80080e6:	4770      	bx	lr
 80080e8:	2001      	movs	r0, #1
 80080ea:	700a      	strb	r2, [r1, #0]
 80080ec:	4770      	bx	lr
	...

080080f0 <fiprintf>:
 80080f0:	b40e      	push	{r1, r2, r3}
 80080f2:	b503      	push	{r0, r1, lr}
 80080f4:	4601      	mov	r1, r0
 80080f6:	ab03      	add	r3, sp, #12
 80080f8:	4805      	ldr	r0, [pc, #20]	@ (8008110 <fiprintf+0x20>)
 80080fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80080fe:	6800      	ldr	r0, [r0, #0]
 8008100:	9301      	str	r3, [sp, #4]
 8008102:	f000 f83d 	bl	8008180 <_vfiprintf_r>
 8008106:	b002      	add	sp, #8
 8008108:	f85d eb04 	ldr.w	lr, [sp], #4
 800810c:	b003      	add	sp, #12
 800810e:	4770      	bx	lr
 8008110:	20000018 	.word	0x20000018

08008114 <abort>:
 8008114:	2006      	movs	r0, #6
 8008116:	b508      	push	{r3, lr}
 8008118:	f000 fa06 	bl	8008528 <raise>
 800811c:	2001      	movs	r0, #1
 800811e:	f7fa f882 	bl	8002226 <_exit>

08008122 <_malloc_usable_size_r>:
 8008122:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008126:	1f18      	subs	r0, r3, #4
 8008128:	2b00      	cmp	r3, #0
 800812a:	bfbc      	itt	lt
 800812c:	580b      	ldrlt	r3, [r1, r0]
 800812e:	18c0      	addlt	r0, r0, r3
 8008130:	4770      	bx	lr

08008132 <__sfputc_r>:
 8008132:	6893      	ldr	r3, [r2, #8]
 8008134:	b410      	push	{r4}
 8008136:	3b01      	subs	r3, #1
 8008138:	2b00      	cmp	r3, #0
 800813a:	6093      	str	r3, [r2, #8]
 800813c:	da07      	bge.n	800814e <__sfputc_r+0x1c>
 800813e:	6994      	ldr	r4, [r2, #24]
 8008140:	42a3      	cmp	r3, r4
 8008142:	db01      	blt.n	8008148 <__sfputc_r+0x16>
 8008144:	290a      	cmp	r1, #10
 8008146:	d102      	bne.n	800814e <__sfputc_r+0x1c>
 8008148:	bc10      	pop	{r4}
 800814a:	f000 b931 	b.w	80083b0 <__swbuf_r>
 800814e:	6813      	ldr	r3, [r2, #0]
 8008150:	1c58      	adds	r0, r3, #1
 8008152:	6010      	str	r0, [r2, #0]
 8008154:	7019      	strb	r1, [r3, #0]
 8008156:	4608      	mov	r0, r1
 8008158:	bc10      	pop	{r4}
 800815a:	4770      	bx	lr

0800815c <__sfputs_r>:
 800815c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800815e:	4606      	mov	r6, r0
 8008160:	460f      	mov	r7, r1
 8008162:	4614      	mov	r4, r2
 8008164:	18d5      	adds	r5, r2, r3
 8008166:	42ac      	cmp	r4, r5
 8008168:	d101      	bne.n	800816e <__sfputs_r+0x12>
 800816a:	2000      	movs	r0, #0
 800816c:	e007      	b.n	800817e <__sfputs_r+0x22>
 800816e:	463a      	mov	r2, r7
 8008170:	4630      	mov	r0, r6
 8008172:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008176:	f7ff ffdc 	bl	8008132 <__sfputc_r>
 800817a:	1c43      	adds	r3, r0, #1
 800817c:	d1f3      	bne.n	8008166 <__sfputs_r+0xa>
 800817e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008180 <_vfiprintf_r>:
 8008180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008184:	460d      	mov	r5, r1
 8008186:	4614      	mov	r4, r2
 8008188:	4698      	mov	r8, r3
 800818a:	4606      	mov	r6, r0
 800818c:	b09d      	sub	sp, #116	@ 0x74
 800818e:	b118      	cbz	r0, 8008198 <_vfiprintf_r+0x18>
 8008190:	6a03      	ldr	r3, [r0, #32]
 8008192:	b90b      	cbnz	r3, 8008198 <_vfiprintf_r+0x18>
 8008194:	f7fe f8f6 	bl	8006384 <__sinit>
 8008198:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800819a:	07d9      	lsls	r1, r3, #31
 800819c:	d405      	bmi.n	80081aa <_vfiprintf_r+0x2a>
 800819e:	89ab      	ldrh	r3, [r5, #12]
 80081a0:	059a      	lsls	r2, r3, #22
 80081a2:	d402      	bmi.n	80081aa <_vfiprintf_r+0x2a>
 80081a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081a6:	f7fe fa20 	bl	80065ea <__retarget_lock_acquire_recursive>
 80081aa:	89ab      	ldrh	r3, [r5, #12]
 80081ac:	071b      	lsls	r3, r3, #28
 80081ae:	d501      	bpl.n	80081b4 <_vfiprintf_r+0x34>
 80081b0:	692b      	ldr	r3, [r5, #16]
 80081b2:	b99b      	cbnz	r3, 80081dc <_vfiprintf_r+0x5c>
 80081b4:	4629      	mov	r1, r5
 80081b6:	4630      	mov	r0, r6
 80081b8:	f000 f938 	bl	800842c <__swsetup_r>
 80081bc:	b170      	cbz	r0, 80081dc <_vfiprintf_r+0x5c>
 80081be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081c0:	07dc      	lsls	r4, r3, #31
 80081c2:	d504      	bpl.n	80081ce <_vfiprintf_r+0x4e>
 80081c4:	f04f 30ff 	mov.w	r0, #4294967295
 80081c8:	b01d      	add	sp, #116	@ 0x74
 80081ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ce:	89ab      	ldrh	r3, [r5, #12]
 80081d0:	0598      	lsls	r0, r3, #22
 80081d2:	d4f7      	bmi.n	80081c4 <_vfiprintf_r+0x44>
 80081d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081d6:	f7fe fa09 	bl	80065ec <__retarget_lock_release_recursive>
 80081da:	e7f3      	b.n	80081c4 <_vfiprintf_r+0x44>
 80081dc:	2300      	movs	r3, #0
 80081de:	9309      	str	r3, [sp, #36]	@ 0x24
 80081e0:	2320      	movs	r3, #32
 80081e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80081e6:	2330      	movs	r3, #48	@ 0x30
 80081e8:	f04f 0901 	mov.w	r9, #1
 80081ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80081f0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800839c <_vfiprintf_r+0x21c>
 80081f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80081f8:	4623      	mov	r3, r4
 80081fa:	469a      	mov	sl, r3
 80081fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008200:	b10a      	cbz	r2, 8008206 <_vfiprintf_r+0x86>
 8008202:	2a25      	cmp	r2, #37	@ 0x25
 8008204:	d1f9      	bne.n	80081fa <_vfiprintf_r+0x7a>
 8008206:	ebba 0b04 	subs.w	fp, sl, r4
 800820a:	d00b      	beq.n	8008224 <_vfiprintf_r+0xa4>
 800820c:	465b      	mov	r3, fp
 800820e:	4622      	mov	r2, r4
 8008210:	4629      	mov	r1, r5
 8008212:	4630      	mov	r0, r6
 8008214:	f7ff ffa2 	bl	800815c <__sfputs_r>
 8008218:	3001      	adds	r0, #1
 800821a:	f000 80a7 	beq.w	800836c <_vfiprintf_r+0x1ec>
 800821e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008220:	445a      	add	r2, fp
 8008222:	9209      	str	r2, [sp, #36]	@ 0x24
 8008224:	f89a 3000 	ldrb.w	r3, [sl]
 8008228:	2b00      	cmp	r3, #0
 800822a:	f000 809f 	beq.w	800836c <_vfiprintf_r+0x1ec>
 800822e:	2300      	movs	r3, #0
 8008230:	f04f 32ff 	mov.w	r2, #4294967295
 8008234:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008238:	f10a 0a01 	add.w	sl, sl, #1
 800823c:	9304      	str	r3, [sp, #16]
 800823e:	9307      	str	r3, [sp, #28]
 8008240:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008244:	931a      	str	r3, [sp, #104]	@ 0x68
 8008246:	4654      	mov	r4, sl
 8008248:	2205      	movs	r2, #5
 800824a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800824e:	4853      	ldr	r0, [pc, #332]	@ (800839c <_vfiprintf_r+0x21c>)
 8008250:	f7fe f9cd 	bl	80065ee <memchr>
 8008254:	9a04      	ldr	r2, [sp, #16]
 8008256:	b9d8      	cbnz	r0, 8008290 <_vfiprintf_r+0x110>
 8008258:	06d1      	lsls	r1, r2, #27
 800825a:	bf44      	itt	mi
 800825c:	2320      	movmi	r3, #32
 800825e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008262:	0713      	lsls	r3, r2, #28
 8008264:	bf44      	itt	mi
 8008266:	232b      	movmi	r3, #43	@ 0x2b
 8008268:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800826c:	f89a 3000 	ldrb.w	r3, [sl]
 8008270:	2b2a      	cmp	r3, #42	@ 0x2a
 8008272:	d015      	beq.n	80082a0 <_vfiprintf_r+0x120>
 8008274:	4654      	mov	r4, sl
 8008276:	2000      	movs	r0, #0
 8008278:	f04f 0c0a 	mov.w	ip, #10
 800827c:	9a07      	ldr	r2, [sp, #28]
 800827e:	4621      	mov	r1, r4
 8008280:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008284:	3b30      	subs	r3, #48	@ 0x30
 8008286:	2b09      	cmp	r3, #9
 8008288:	d94b      	bls.n	8008322 <_vfiprintf_r+0x1a2>
 800828a:	b1b0      	cbz	r0, 80082ba <_vfiprintf_r+0x13a>
 800828c:	9207      	str	r2, [sp, #28]
 800828e:	e014      	b.n	80082ba <_vfiprintf_r+0x13a>
 8008290:	eba0 0308 	sub.w	r3, r0, r8
 8008294:	fa09 f303 	lsl.w	r3, r9, r3
 8008298:	4313      	orrs	r3, r2
 800829a:	46a2      	mov	sl, r4
 800829c:	9304      	str	r3, [sp, #16]
 800829e:	e7d2      	b.n	8008246 <_vfiprintf_r+0xc6>
 80082a0:	9b03      	ldr	r3, [sp, #12]
 80082a2:	1d19      	adds	r1, r3, #4
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	9103      	str	r1, [sp, #12]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	bfbb      	ittet	lt
 80082ac:	425b      	neglt	r3, r3
 80082ae:	f042 0202 	orrlt.w	r2, r2, #2
 80082b2:	9307      	strge	r3, [sp, #28]
 80082b4:	9307      	strlt	r3, [sp, #28]
 80082b6:	bfb8      	it	lt
 80082b8:	9204      	strlt	r2, [sp, #16]
 80082ba:	7823      	ldrb	r3, [r4, #0]
 80082bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80082be:	d10a      	bne.n	80082d6 <_vfiprintf_r+0x156>
 80082c0:	7863      	ldrb	r3, [r4, #1]
 80082c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80082c4:	d132      	bne.n	800832c <_vfiprintf_r+0x1ac>
 80082c6:	9b03      	ldr	r3, [sp, #12]
 80082c8:	3402      	adds	r4, #2
 80082ca:	1d1a      	adds	r2, r3, #4
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	9203      	str	r2, [sp, #12]
 80082d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80082d4:	9305      	str	r3, [sp, #20]
 80082d6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80083a0 <_vfiprintf_r+0x220>
 80082da:	2203      	movs	r2, #3
 80082dc:	4650      	mov	r0, sl
 80082de:	7821      	ldrb	r1, [r4, #0]
 80082e0:	f7fe f985 	bl	80065ee <memchr>
 80082e4:	b138      	cbz	r0, 80082f6 <_vfiprintf_r+0x176>
 80082e6:	2240      	movs	r2, #64	@ 0x40
 80082e8:	9b04      	ldr	r3, [sp, #16]
 80082ea:	eba0 000a 	sub.w	r0, r0, sl
 80082ee:	4082      	lsls	r2, r0
 80082f0:	4313      	orrs	r3, r2
 80082f2:	3401      	adds	r4, #1
 80082f4:	9304      	str	r3, [sp, #16]
 80082f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082fa:	2206      	movs	r2, #6
 80082fc:	4829      	ldr	r0, [pc, #164]	@ (80083a4 <_vfiprintf_r+0x224>)
 80082fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008302:	f7fe f974 	bl	80065ee <memchr>
 8008306:	2800      	cmp	r0, #0
 8008308:	d03f      	beq.n	800838a <_vfiprintf_r+0x20a>
 800830a:	4b27      	ldr	r3, [pc, #156]	@ (80083a8 <_vfiprintf_r+0x228>)
 800830c:	bb1b      	cbnz	r3, 8008356 <_vfiprintf_r+0x1d6>
 800830e:	9b03      	ldr	r3, [sp, #12]
 8008310:	3307      	adds	r3, #7
 8008312:	f023 0307 	bic.w	r3, r3, #7
 8008316:	3308      	adds	r3, #8
 8008318:	9303      	str	r3, [sp, #12]
 800831a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800831c:	443b      	add	r3, r7
 800831e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008320:	e76a      	b.n	80081f8 <_vfiprintf_r+0x78>
 8008322:	460c      	mov	r4, r1
 8008324:	2001      	movs	r0, #1
 8008326:	fb0c 3202 	mla	r2, ip, r2, r3
 800832a:	e7a8      	b.n	800827e <_vfiprintf_r+0xfe>
 800832c:	2300      	movs	r3, #0
 800832e:	f04f 0c0a 	mov.w	ip, #10
 8008332:	4619      	mov	r1, r3
 8008334:	3401      	adds	r4, #1
 8008336:	9305      	str	r3, [sp, #20]
 8008338:	4620      	mov	r0, r4
 800833a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800833e:	3a30      	subs	r2, #48	@ 0x30
 8008340:	2a09      	cmp	r2, #9
 8008342:	d903      	bls.n	800834c <_vfiprintf_r+0x1cc>
 8008344:	2b00      	cmp	r3, #0
 8008346:	d0c6      	beq.n	80082d6 <_vfiprintf_r+0x156>
 8008348:	9105      	str	r1, [sp, #20]
 800834a:	e7c4      	b.n	80082d6 <_vfiprintf_r+0x156>
 800834c:	4604      	mov	r4, r0
 800834e:	2301      	movs	r3, #1
 8008350:	fb0c 2101 	mla	r1, ip, r1, r2
 8008354:	e7f0      	b.n	8008338 <_vfiprintf_r+0x1b8>
 8008356:	ab03      	add	r3, sp, #12
 8008358:	9300      	str	r3, [sp, #0]
 800835a:	462a      	mov	r2, r5
 800835c:	4630      	mov	r0, r6
 800835e:	4b13      	ldr	r3, [pc, #76]	@ (80083ac <_vfiprintf_r+0x22c>)
 8008360:	a904      	add	r1, sp, #16
 8008362:	f7fd fbc7 	bl	8005af4 <_printf_float>
 8008366:	4607      	mov	r7, r0
 8008368:	1c78      	adds	r0, r7, #1
 800836a:	d1d6      	bne.n	800831a <_vfiprintf_r+0x19a>
 800836c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800836e:	07d9      	lsls	r1, r3, #31
 8008370:	d405      	bmi.n	800837e <_vfiprintf_r+0x1fe>
 8008372:	89ab      	ldrh	r3, [r5, #12]
 8008374:	059a      	lsls	r2, r3, #22
 8008376:	d402      	bmi.n	800837e <_vfiprintf_r+0x1fe>
 8008378:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800837a:	f7fe f937 	bl	80065ec <__retarget_lock_release_recursive>
 800837e:	89ab      	ldrh	r3, [r5, #12]
 8008380:	065b      	lsls	r3, r3, #25
 8008382:	f53f af1f 	bmi.w	80081c4 <_vfiprintf_r+0x44>
 8008386:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008388:	e71e      	b.n	80081c8 <_vfiprintf_r+0x48>
 800838a:	ab03      	add	r3, sp, #12
 800838c:	9300      	str	r3, [sp, #0]
 800838e:	462a      	mov	r2, r5
 8008390:	4630      	mov	r0, r6
 8008392:	4b06      	ldr	r3, [pc, #24]	@ (80083ac <_vfiprintf_r+0x22c>)
 8008394:	a904      	add	r1, sp, #16
 8008396:	f7fd fe4b 	bl	8006030 <_printf_i>
 800839a:	e7e4      	b.n	8008366 <_vfiprintf_r+0x1e6>
 800839c:	0800a4e8 	.word	0x0800a4e8
 80083a0:	0800a4ee 	.word	0x0800a4ee
 80083a4:	0800a4f2 	.word	0x0800a4f2
 80083a8:	08005af5 	.word	0x08005af5
 80083ac:	0800815d 	.word	0x0800815d

080083b0 <__swbuf_r>:
 80083b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083b2:	460e      	mov	r6, r1
 80083b4:	4614      	mov	r4, r2
 80083b6:	4605      	mov	r5, r0
 80083b8:	b118      	cbz	r0, 80083c2 <__swbuf_r+0x12>
 80083ba:	6a03      	ldr	r3, [r0, #32]
 80083bc:	b90b      	cbnz	r3, 80083c2 <__swbuf_r+0x12>
 80083be:	f7fd ffe1 	bl	8006384 <__sinit>
 80083c2:	69a3      	ldr	r3, [r4, #24]
 80083c4:	60a3      	str	r3, [r4, #8]
 80083c6:	89a3      	ldrh	r3, [r4, #12]
 80083c8:	071a      	lsls	r2, r3, #28
 80083ca:	d501      	bpl.n	80083d0 <__swbuf_r+0x20>
 80083cc:	6923      	ldr	r3, [r4, #16]
 80083ce:	b943      	cbnz	r3, 80083e2 <__swbuf_r+0x32>
 80083d0:	4621      	mov	r1, r4
 80083d2:	4628      	mov	r0, r5
 80083d4:	f000 f82a 	bl	800842c <__swsetup_r>
 80083d8:	b118      	cbz	r0, 80083e2 <__swbuf_r+0x32>
 80083da:	f04f 37ff 	mov.w	r7, #4294967295
 80083de:	4638      	mov	r0, r7
 80083e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083e2:	6823      	ldr	r3, [r4, #0]
 80083e4:	6922      	ldr	r2, [r4, #16]
 80083e6:	b2f6      	uxtb	r6, r6
 80083e8:	1a98      	subs	r0, r3, r2
 80083ea:	6963      	ldr	r3, [r4, #20]
 80083ec:	4637      	mov	r7, r6
 80083ee:	4283      	cmp	r3, r0
 80083f0:	dc05      	bgt.n	80083fe <__swbuf_r+0x4e>
 80083f2:	4621      	mov	r1, r4
 80083f4:	4628      	mov	r0, r5
 80083f6:	f7ff fdc3 	bl	8007f80 <_fflush_r>
 80083fa:	2800      	cmp	r0, #0
 80083fc:	d1ed      	bne.n	80083da <__swbuf_r+0x2a>
 80083fe:	68a3      	ldr	r3, [r4, #8]
 8008400:	3b01      	subs	r3, #1
 8008402:	60a3      	str	r3, [r4, #8]
 8008404:	6823      	ldr	r3, [r4, #0]
 8008406:	1c5a      	adds	r2, r3, #1
 8008408:	6022      	str	r2, [r4, #0]
 800840a:	701e      	strb	r6, [r3, #0]
 800840c:	6962      	ldr	r2, [r4, #20]
 800840e:	1c43      	adds	r3, r0, #1
 8008410:	429a      	cmp	r2, r3
 8008412:	d004      	beq.n	800841e <__swbuf_r+0x6e>
 8008414:	89a3      	ldrh	r3, [r4, #12]
 8008416:	07db      	lsls	r3, r3, #31
 8008418:	d5e1      	bpl.n	80083de <__swbuf_r+0x2e>
 800841a:	2e0a      	cmp	r6, #10
 800841c:	d1df      	bne.n	80083de <__swbuf_r+0x2e>
 800841e:	4621      	mov	r1, r4
 8008420:	4628      	mov	r0, r5
 8008422:	f7ff fdad 	bl	8007f80 <_fflush_r>
 8008426:	2800      	cmp	r0, #0
 8008428:	d0d9      	beq.n	80083de <__swbuf_r+0x2e>
 800842a:	e7d6      	b.n	80083da <__swbuf_r+0x2a>

0800842c <__swsetup_r>:
 800842c:	b538      	push	{r3, r4, r5, lr}
 800842e:	4b29      	ldr	r3, [pc, #164]	@ (80084d4 <__swsetup_r+0xa8>)
 8008430:	4605      	mov	r5, r0
 8008432:	6818      	ldr	r0, [r3, #0]
 8008434:	460c      	mov	r4, r1
 8008436:	b118      	cbz	r0, 8008440 <__swsetup_r+0x14>
 8008438:	6a03      	ldr	r3, [r0, #32]
 800843a:	b90b      	cbnz	r3, 8008440 <__swsetup_r+0x14>
 800843c:	f7fd ffa2 	bl	8006384 <__sinit>
 8008440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008444:	0719      	lsls	r1, r3, #28
 8008446:	d422      	bmi.n	800848e <__swsetup_r+0x62>
 8008448:	06da      	lsls	r2, r3, #27
 800844a:	d407      	bmi.n	800845c <__swsetup_r+0x30>
 800844c:	2209      	movs	r2, #9
 800844e:	602a      	str	r2, [r5, #0]
 8008450:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008454:	f04f 30ff 	mov.w	r0, #4294967295
 8008458:	81a3      	strh	r3, [r4, #12]
 800845a:	e033      	b.n	80084c4 <__swsetup_r+0x98>
 800845c:	0758      	lsls	r0, r3, #29
 800845e:	d512      	bpl.n	8008486 <__swsetup_r+0x5a>
 8008460:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008462:	b141      	cbz	r1, 8008476 <__swsetup_r+0x4a>
 8008464:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008468:	4299      	cmp	r1, r3
 800846a:	d002      	beq.n	8008472 <__swsetup_r+0x46>
 800846c:	4628      	mov	r0, r5
 800846e:	f7fe ff37 	bl	80072e0 <_free_r>
 8008472:	2300      	movs	r3, #0
 8008474:	6363      	str	r3, [r4, #52]	@ 0x34
 8008476:	89a3      	ldrh	r3, [r4, #12]
 8008478:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800847c:	81a3      	strh	r3, [r4, #12]
 800847e:	2300      	movs	r3, #0
 8008480:	6063      	str	r3, [r4, #4]
 8008482:	6923      	ldr	r3, [r4, #16]
 8008484:	6023      	str	r3, [r4, #0]
 8008486:	89a3      	ldrh	r3, [r4, #12]
 8008488:	f043 0308 	orr.w	r3, r3, #8
 800848c:	81a3      	strh	r3, [r4, #12]
 800848e:	6923      	ldr	r3, [r4, #16]
 8008490:	b94b      	cbnz	r3, 80084a6 <__swsetup_r+0x7a>
 8008492:	89a3      	ldrh	r3, [r4, #12]
 8008494:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800849c:	d003      	beq.n	80084a6 <__swsetup_r+0x7a>
 800849e:	4621      	mov	r1, r4
 80084a0:	4628      	mov	r0, r5
 80084a2:	f000 f882 	bl	80085aa <__smakebuf_r>
 80084a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084aa:	f013 0201 	ands.w	r2, r3, #1
 80084ae:	d00a      	beq.n	80084c6 <__swsetup_r+0x9a>
 80084b0:	2200      	movs	r2, #0
 80084b2:	60a2      	str	r2, [r4, #8]
 80084b4:	6962      	ldr	r2, [r4, #20]
 80084b6:	4252      	negs	r2, r2
 80084b8:	61a2      	str	r2, [r4, #24]
 80084ba:	6922      	ldr	r2, [r4, #16]
 80084bc:	b942      	cbnz	r2, 80084d0 <__swsetup_r+0xa4>
 80084be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80084c2:	d1c5      	bne.n	8008450 <__swsetup_r+0x24>
 80084c4:	bd38      	pop	{r3, r4, r5, pc}
 80084c6:	0799      	lsls	r1, r3, #30
 80084c8:	bf58      	it	pl
 80084ca:	6962      	ldrpl	r2, [r4, #20]
 80084cc:	60a2      	str	r2, [r4, #8]
 80084ce:	e7f4      	b.n	80084ba <__swsetup_r+0x8e>
 80084d0:	2000      	movs	r0, #0
 80084d2:	e7f7      	b.n	80084c4 <__swsetup_r+0x98>
 80084d4:	20000018 	.word	0x20000018

080084d8 <_raise_r>:
 80084d8:	291f      	cmp	r1, #31
 80084da:	b538      	push	{r3, r4, r5, lr}
 80084dc:	4605      	mov	r5, r0
 80084de:	460c      	mov	r4, r1
 80084e0:	d904      	bls.n	80084ec <_raise_r+0x14>
 80084e2:	2316      	movs	r3, #22
 80084e4:	6003      	str	r3, [r0, #0]
 80084e6:	f04f 30ff 	mov.w	r0, #4294967295
 80084ea:	bd38      	pop	{r3, r4, r5, pc}
 80084ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80084ee:	b112      	cbz	r2, 80084f6 <_raise_r+0x1e>
 80084f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80084f4:	b94b      	cbnz	r3, 800850a <_raise_r+0x32>
 80084f6:	4628      	mov	r0, r5
 80084f8:	f000 f830 	bl	800855c <_getpid_r>
 80084fc:	4622      	mov	r2, r4
 80084fe:	4601      	mov	r1, r0
 8008500:	4628      	mov	r0, r5
 8008502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008506:	f000 b817 	b.w	8008538 <_kill_r>
 800850a:	2b01      	cmp	r3, #1
 800850c:	d00a      	beq.n	8008524 <_raise_r+0x4c>
 800850e:	1c59      	adds	r1, r3, #1
 8008510:	d103      	bne.n	800851a <_raise_r+0x42>
 8008512:	2316      	movs	r3, #22
 8008514:	6003      	str	r3, [r0, #0]
 8008516:	2001      	movs	r0, #1
 8008518:	e7e7      	b.n	80084ea <_raise_r+0x12>
 800851a:	2100      	movs	r1, #0
 800851c:	4620      	mov	r0, r4
 800851e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008522:	4798      	blx	r3
 8008524:	2000      	movs	r0, #0
 8008526:	e7e0      	b.n	80084ea <_raise_r+0x12>

08008528 <raise>:
 8008528:	4b02      	ldr	r3, [pc, #8]	@ (8008534 <raise+0xc>)
 800852a:	4601      	mov	r1, r0
 800852c:	6818      	ldr	r0, [r3, #0]
 800852e:	f7ff bfd3 	b.w	80084d8 <_raise_r>
 8008532:	bf00      	nop
 8008534:	20000018 	.word	0x20000018

08008538 <_kill_r>:
 8008538:	b538      	push	{r3, r4, r5, lr}
 800853a:	2300      	movs	r3, #0
 800853c:	4d06      	ldr	r5, [pc, #24]	@ (8008558 <_kill_r+0x20>)
 800853e:	4604      	mov	r4, r0
 8008540:	4608      	mov	r0, r1
 8008542:	4611      	mov	r1, r2
 8008544:	602b      	str	r3, [r5, #0]
 8008546:	f7f9 fe5e 	bl	8002206 <_kill>
 800854a:	1c43      	adds	r3, r0, #1
 800854c:	d102      	bne.n	8008554 <_kill_r+0x1c>
 800854e:	682b      	ldr	r3, [r5, #0]
 8008550:	b103      	cbz	r3, 8008554 <_kill_r+0x1c>
 8008552:	6023      	str	r3, [r4, #0]
 8008554:	bd38      	pop	{r3, r4, r5, pc}
 8008556:	bf00      	nop
 8008558:	200008c4 	.word	0x200008c4

0800855c <_getpid_r>:
 800855c:	f7f9 be4c 	b.w	80021f8 <_getpid>

08008560 <__swhatbuf_r>:
 8008560:	b570      	push	{r4, r5, r6, lr}
 8008562:	460c      	mov	r4, r1
 8008564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008568:	4615      	mov	r5, r2
 800856a:	2900      	cmp	r1, #0
 800856c:	461e      	mov	r6, r3
 800856e:	b096      	sub	sp, #88	@ 0x58
 8008570:	da0c      	bge.n	800858c <__swhatbuf_r+0x2c>
 8008572:	89a3      	ldrh	r3, [r4, #12]
 8008574:	2100      	movs	r1, #0
 8008576:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800857a:	bf14      	ite	ne
 800857c:	2340      	movne	r3, #64	@ 0x40
 800857e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008582:	2000      	movs	r0, #0
 8008584:	6031      	str	r1, [r6, #0]
 8008586:	602b      	str	r3, [r5, #0]
 8008588:	b016      	add	sp, #88	@ 0x58
 800858a:	bd70      	pop	{r4, r5, r6, pc}
 800858c:	466a      	mov	r2, sp
 800858e:	f000 f849 	bl	8008624 <_fstat_r>
 8008592:	2800      	cmp	r0, #0
 8008594:	dbed      	blt.n	8008572 <__swhatbuf_r+0x12>
 8008596:	9901      	ldr	r1, [sp, #4]
 8008598:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800859c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80085a0:	4259      	negs	r1, r3
 80085a2:	4159      	adcs	r1, r3
 80085a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80085a8:	e7eb      	b.n	8008582 <__swhatbuf_r+0x22>

080085aa <__smakebuf_r>:
 80085aa:	898b      	ldrh	r3, [r1, #12]
 80085ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085ae:	079d      	lsls	r5, r3, #30
 80085b0:	4606      	mov	r6, r0
 80085b2:	460c      	mov	r4, r1
 80085b4:	d507      	bpl.n	80085c6 <__smakebuf_r+0x1c>
 80085b6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80085ba:	6023      	str	r3, [r4, #0]
 80085bc:	6123      	str	r3, [r4, #16]
 80085be:	2301      	movs	r3, #1
 80085c0:	6163      	str	r3, [r4, #20]
 80085c2:	b003      	add	sp, #12
 80085c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085c6:	466a      	mov	r2, sp
 80085c8:	ab01      	add	r3, sp, #4
 80085ca:	f7ff ffc9 	bl	8008560 <__swhatbuf_r>
 80085ce:	9f00      	ldr	r7, [sp, #0]
 80085d0:	4605      	mov	r5, r0
 80085d2:	4639      	mov	r1, r7
 80085d4:	4630      	mov	r0, r6
 80085d6:	f7fe fef5 	bl	80073c4 <_malloc_r>
 80085da:	b948      	cbnz	r0, 80085f0 <__smakebuf_r+0x46>
 80085dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085e0:	059a      	lsls	r2, r3, #22
 80085e2:	d4ee      	bmi.n	80085c2 <__smakebuf_r+0x18>
 80085e4:	f023 0303 	bic.w	r3, r3, #3
 80085e8:	f043 0302 	orr.w	r3, r3, #2
 80085ec:	81a3      	strh	r3, [r4, #12]
 80085ee:	e7e2      	b.n	80085b6 <__smakebuf_r+0xc>
 80085f0:	89a3      	ldrh	r3, [r4, #12]
 80085f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80085f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085fa:	81a3      	strh	r3, [r4, #12]
 80085fc:	9b01      	ldr	r3, [sp, #4]
 80085fe:	6020      	str	r0, [r4, #0]
 8008600:	b15b      	cbz	r3, 800861a <__smakebuf_r+0x70>
 8008602:	4630      	mov	r0, r6
 8008604:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008608:	f000 f81e 	bl	8008648 <_isatty_r>
 800860c:	b128      	cbz	r0, 800861a <__smakebuf_r+0x70>
 800860e:	89a3      	ldrh	r3, [r4, #12]
 8008610:	f023 0303 	bic.w	r3, r3, #3
 8008614:	f043 0301 	orr.w	r3, r3, #1
 8008618:	81a3      	strh	r3, [r4, #12]
 800861a:	89a3      	ldrh	r3, [r4, #12]
 800861c:	431d      	orrs	r5, r3
 800861e:	81a5      	strh	r5, [r4, #12]
 8008620:	e7cf      	b.n	80085c2 <__smakebuf_r+0x18>
	...

08008624 <_fstat_r>:
 8008624:	b538      	push	{r3, r4, r5, lr}
 8008626:	2300      	movs	r3, #0
 8008628:	4d06      	ldr	r5, [pc, #24]	@ (8008644 <_fstat_r+0x20>)
 800862a:	4604      	mov	r4, r0
 800862c:	4608      	mov	r0, r1
 800862e:	4611      	mov	r1, r2
 8008630:	602b      	str	r3, [r5, #0]
 8008632:	f7f9 fe47 	bl	80022c4 <_fstat>
 8008636:	1c43      	adds	r3, r0, #1
 8008638:	d102      	bne.n	8008640 <_fstat_r+0x1c>
 800863a:	682b      	ldr	r3, [r5, #0]
 800863c:	b103      	cbz	r3, 8008640 <_fstat_r+0x1c>
 800863e:	6023      	str	r3, [r4, #0]
 8008640:	bd38      	pop	{r3, r4, r5, pc}
 8008642:	bf00      	nop
 8008644:	200008c4 	.word	0x200008c4

08008648 <_isatty_r>:
 8008648:	b538      	push	{r3, r4, r5, lr}
 800864a:	2300      	movs	r3, #0
 800864c:	4d05      	ldr	r5, [pc, #20]	@ (8008664 <_isatty_r+0x1c>)
 800864e:	4604      	mov	r4, r0
 8008650:	4608      	mov	r0, r1
 8008652:	602b      	str	r3, [r5, #0]
 8008654:	f7f9 fe45 	bl	80022e2 <_isatty>
 8008658:	1c43      	adds	r3, r0, #1
 800865a:	d102      	bne.n	8008662 <_isatty_r+0x1a>
 800865c:	682b      	ldr	r3, [r5, #0]
 800865e:	b103      	cbz	r3, 8008662 <_isatty_r+0x1a>
 8008660:	6023      	str	r3, [r4, #0]
 8008662:	bd38      	pop	{r3, r4, r5, pc}
 8008664:	200008c4 	.word	0x200008c4

08008668 <_init>:
 8008668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800866a:	bf00      	nop
 800866c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800866e:	bc08      	pop	{r3}
 8008670:	469e      	mov	lr, r3
 8008672:	4770      	bx	lr

08008674 <_fini>:
 8008674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008676:	bf00      	nop
 8008678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800867a:	bc08      	pop	{r3}
 800867c:	469e      	mov	lr, r3
 800867e:	4770      	bx	lr
